<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android Studio 真机调试</title>
    <url>/blog/2020/10/23/android-RealMachineDebugging/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/android-RealMachineDebugging/android_logo.png"/></p>
<span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Android 开发使用真机有线调试和无线 wifi 调试</p>
<h3 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h3><h4 id="有线调试"><a href="#有线调试" class="headerlink" title="有线调试"></a>有线调试</h4><p>Android 手机数据线链接电脑并开启 USB 调试<br>大部分 Android 默认不显示 USB 调试，多次点击系统版本号开启开发者模式</p>
<h5 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h5><h6 id="安装-Google-USB-Driver"><a href="#安装-Google-USB-Driver" class="headerlink" title="安装 Google USB Driver"></a>安装 Google USB Driver</h6><ol>
<li><p>选择 File → Setting…<br><img src="https://sadness96.github.io/images/blog/android-RealMachineDebugging/选择菜单Windows_Settings.png"/></p>
</li>
<li><p>选择 Appearance &amp; Behavior → System Settings → Android SDK → SDK Tools 勾选 Android SDK Tools 选项安装<br><img src="https://sadness96.github.io/images/blog/android-RealMachineDebugging/GoogleUSBDriver.png"/></p>
</li>
<li><p>在计算机管理 → 设备管理器 → 便携设备中选择手机型号，更新驱动，期间可能会在手机中认证授权设备，确认即可<br><img src="https://sadness96.github.io/images/blog/android-RealMachineDebugging/计算机管理_更新驱动程序.png"/></p>
</li>
<li><p>确保正确开启 USB 调试后可以真机调试</p>
</li>
</ol>
<h5 id="Mac-OS"><a href="#Mac-OS" class="headerlink" title="Mac OS"></a>Mac OS</h5><h6 id="获取-Android-ADB-路径"><a href="#获取-Android-ADB-路径" class="headerlink" title="获取 Android ADB 路径"></a>获取 Android ADB 路径</h6><ol>
<li><p>选择 File → Project Structure…<br><img src="https://sadness96.github.io/images/blog/android-RealMachineDebugging/选择菜单ProjectStructure.png"/></p>
</li>
<li><p>选择 SDK Location → 选中位置为 Android ADB 路径<br><img src="https://sadness96.github.io/images/blog/android-RealMachineDebugging/ProjectStructure.png"/></p>
</li>
</ol>
<h6 id="配置-Android-ADB-环境变量"><a href="#配置-Android-ADB-环境变量" class="headerlink" title="配置 Android ADB 环境变量"></a>配置 Android ADB 环境变量</h6><p>在 ～/.bash_profile 文件中配置</p>
<ol>
<li><p>创建 .bash_profile 文件（如果不存在）</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">touch .bash_profile</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑 .bash_profile 文件，ANDROID_HOME 参数为上一步获取的 ADB 路径</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">open .bash_profile</span><br></pre></td></tr></table></figure>
<p> <img src="https://sadness96.github.io/images/blog/android-RealMachineDebugging/bash_profile文件.png"/></p>
</li>
<li><p>保存文件后执行配置立即生效命令，输入 adb version 检查是否配置成功</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source .bash_profile</span><br><span class="line">adb version</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h6 id="配置手机可被识别"><a href="#配置手机可被识别" class="headerlink" title="配置手机可被识别"></a>配置手机可被识别</h6><ol>
<li><p>执行命令获取 usb 接入信息，查询信息中会显示链接的 Android 信息，记录 Vendor ID 备用</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">system_profiler SPUSBDataType</span><br></pre></td></tr></table></figure>
<p> <img src="https://sadness96.github.io/images/blog/android-RealMachineDebugging/查询usb连接命令.png"/></p>
</li>
<li><p>在 ～/.android/.adb_usb 文件中配置，目录如下<br><img src="https://sadness96.github.io/images/blog/android-RealMachineDebugging/adb_usb目录.png"/></p>
</li>
<li><p>创建 .adb_usb 文件（如果不存在）</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">touch .android/.adb_usb</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑 .adb_usb 文件，填写上一步获取的 Vendor ID 并保存<br><img src="https://sadness96.github.io/images/blog/android-RealMachineDebugging/adb_usb文件.png"/></p>
</li>
<li><p>执行 adb 命令，显示出链接的手机信息后可以真机调试</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure>
<p> <img src="https://sadness96.github.io/images/blog/android-RealMachineDebugging/判断是否连接成功.png"/></p>
</li>
</ol>
<h4 id="无线调试（需完成有线调试步骤）"><a href="#无线调试（需完成有线调试步骤）" class="headerlink" title="无线调试（需完成有线调试步骤）"></a>无线调试（需完成有线调试步骤）</h4><h5 id="Windows-amp-Mac-OS"><a href="#Windows-amp-Mac-OS" class="headerlink" title="Windows &amp; Mac OS"></a>Windows &amp; Mac OS</h5><ol>
<li><p>配置 ADB 环境变量（如果未配置）<br>Windows 通常 ADB 路径：..\Android\Sdk\platform-tools<br>Mac OS 通常 ADB 路径：~/Library/Android/sdk</p>
</li>
<li><p>使用命令检测 Android 手机是否链接正常（有线连接）</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 adb 端口<br> 使用命令 adb tcpip [port] 让手机的某个端口处于监听状态<br> 服务器端通过扫描5555到5585之间的奇数端口来寻找模拟器或设备实例并与找到的建立链接。</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb topic 5555</span><br></pre></td></tr></table></figure>
<p> 返回 restarting in TCP mode port:5555 为创建成功</p>
</li>
<li><p>创建 adb 无线连接<br> 保证手机与电脑在一个网络中<br> 使用命令行 adb connect [ip-address]:[port-num] 连接手机<br> 命令中 ip 地址为手机在网络中的 ip 地址，端口号为上一步创建的监听端口</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb connect 192.168.1.101:5555</span><br></pre></td></tr></table></figure>
<p> 返回 connected to 192.168.1.101:5555 为创建成功，此时可以断开有线连接</p>
</li>
<li><p>重新执行命令检查 adb 链接情况</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure>
<p> 返回 {ip 地址}:{端口号} 正确则可以进行无线调试</p>
</li>
<li><p>断开 Wi-Fi 链接<br> 使用命令 adb disconnect [ip-address]:[port-num] 来中断连接</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb disconnect 192.168.1.101:5555</span><br></pre></td></tr></table></figure>
<p> 返回 disconnected 192.168.1.101:5555 断开成功</p>
</li>
<li><p>命令展示<br> <img src="https://sadness96.github.io/images/blog/android-RealMachineDebugging/无线调试.png"/></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>android studio</tag>
      </tags>
  </entry>
  <entry>
    <title>Asp服务端文件下载</title>
    <url>/blog/2019/03/11/asp-DownloadFile/</url>
    <content><![CDATA[<h3 id="服务端提供网页点击下载功能，或-WebApi-接口提供软件更新下载服务"><a href="#服务端提供网页点击下载功能，或-WebApi-接口提供软件更新下载服务" class="headerlink" title="服务端提供网页点击下载功能，或 WebApi 接口提供软件更新下载服务"></a>服务端提供网页点击下载功能，或 WebApi 接口提供软件更新下载服务</h3><span id="more"></span>
<h4 id="继承-Controller-接口的控制器方法下载方式"><a href="#继承-Controller-接口的控制器方法下载方式" class="headerlink" title="继承 Controller 接口的控制器方法下载方式"></a>继承 Controller 接口的控制器方法下载方式</h4><p>使用环境：网页端按钮点击下载<br>按钮脚本链接进入这个方法之后，服务端直接生成文件，浏览器自动下载</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 下载文件</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>是否下载成功<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">DownLoadFile</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> filePath = <span class="string">&quot;服务端文件路径（程序自动获取路径或根据传入参数判断文件路径）&quot;</span>;</span><br><span class="line">    FileInfo fileInfo = <span class="keyword">new</span> FileInfo(filePath);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fileInfo.Exists)</span><br><span class="line">    &#123;</span><br><span class="line">        Response.Clear();</span><br><span class="line">        Response.ClearContent();</span><br><span class="line">        Response.ClearHeaders();</span><br><span class="line">        Response.Buffer = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        Response.AddHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + Server.UrlEncode(fileInfo.Name));</span><br><span class="line">        Response.AddHeader(<span class="string">&quot;Content-Length&quot;</span>, fileInfo.Length.ToString());</span><br><span class="line">        Response.AddHeader(<span class="string">&quot;Content-Transfer-Encoding&quot;</span>, <span class="string">&quot;binary&quot;</span>);</span><br><span class="line">        Response.ContentType = <span class="string">&quot;application/x-msdownload&quot;</span>;</span><br><span class="line">        Response.ContentEncoding = System.Text.Encoding.GetEncoding(<span class="string">&quot;gb2312&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Response.WriteFile(fileInfo.FullName);</span><br><span class="line">        Response.Flush();</span><br><span class="line">        Response.End();</span><br><span class="line">        <span class="keyword">return</span> Json(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Json(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="继承-ApiController-接口的-WebApi-方法下载方式"><a href="#继承-ApiController-接口的-WebApi-方法下载方式" class="headerlink" title="继承 ApiController 接口的 WebApi 方法下载方式"></a>继承 ApiController 接口的 WebApi 方法下载方式</h4><p>使用环境：桌面端自动更新 提交需要更新的文件名 获取下载<br>服务端返回文件流，桌面端接收并保存到指定目录替换</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 下载文件</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>文件数据流<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">byte</span>[] <span class="title">DownLoadFile</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> filePath = <span class="string">&quot;服务端文件路径（程序自动获取路径或根据传入参数判断文件路径）&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> File.Exists(filePath) ? File.ReadAllBytes(filePath) : <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Asp.Net</category>
      </categories>
      <tags>
        <tag>asp</tag>
        <tag>download</tag>
      </tags>
  </entry>
  <entry>
    <title>打印Word文件</title>
    <url>/blog/2018/10/25/asp-PrintWord/</url>
    <content><![CDATA[<h3 id="服务端调用打印机打印Word文件"><a href="#服务端调用打印机打印Word文件" class="headerlink" title="服务端调用打印机打印Word文件"></a>服务端调用打印机打印Word文件</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>工作时需要直接操作 <a href="https://baike.baidu.com/item/%E5%8A%9E%E5%85%AC%E8%87%AA%E5%8A%A8%E5%8C%96/1428?fromtitle=OA&amp;fromid=25368&amp;fr=aladdin">OA系统</a> 调用打印机打印 <a href="https://baike.baidu.com/item/Microsoft%20Office%20Word/1448679?fromtitle=word&amp;fromid=2970534">Word</a> 文件。</p>
<h4 id="引用库介绍"><a href="#引用库介绍" class="headerlink" title="引用库介绍"></a>引用库介绍</h4><p>需要电脑安装 <a href="https://office.microsoft.com/">Microsoft Office</a> 并引用COM组件 <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.office.interop.word?redirectedfrom=MSDN&amp;view=word-pia">Microsoft.Office.Interop.Word</a> 才可以调用打印机。</p>
<h4 id="代码及调用"><a href="#代码及调用" class="headerlink" title="代码及调用"></a>代码及调用</h4><p>打印Word<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Word = Microsoft.Office.Interop.Word;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 打印Word</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;filePath&quot;&gt;</span>需要打印的文件<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;PrintName&quot;&gt;</span>打印机名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintWord</span>(<span class="params"><span class="built_in">string</span> filePath, <span class="built_in">string</span> PrintName</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//要打印的文件路径</span></span><br><span class="line">        Object wordFile = filePath;</span><br><span class="line">        <span class="built_in">object</span> oMissing = Missing.Value;</span><br><span class="line">        <span class="comment">//自定义object类型的布尔值</span></span><br><span class="line">        <span class="built_in">object</span> oTrue = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">object</span> oFalse = <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">object</span> doNotSaveChanges = Word.WdSaveOptions.wdDoNotSaveChanges;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Word.Application appWord = null;</span></span><br><span class="line">        <span class="comment">//定义word Application相关</span></span><br><span class="line">        Word.Application appWord = <span class="keyword">new</span> Word.Application();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//word程序不可见</span></span><br><span class="line">        appWord.Visible = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不弹出警告框</span></span><br><span class="line">        appWord.DisplayAlerts = Word.WdAlertLevel.wdAlertsNone;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先保存默认的打印机</span></span><br><span class="line">        <span class="built_in">string</span> defaultPrinter = appWord.ActivePrinter;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打开要打印的文件</span></span><br><span class="line">        Word.Document doc = appWord.Documents.Open(</span><br><span class="line">            <span class="keyword">ref</span> wordFile,</span><br><span class="line">            <span class="keyword">ref</span> oMissing,</span><br><span class="line">            <span class="keyword">ref</span> oTrue,</span><br><span class="line">            <span class="keyword">ref</span> oFalse,</span><br><span class="line">            <span class="keyword">ref</span> oMissing,</span><br><span class="line">            <span class="keyword">ref</span> oMissing,</span><br><span class="line">            <span class="keyword">ref</span> oMissing,</span><br><span class="line">            <span class="keyword">ref</span> oMissing,</span><br><span class="line">            <span class="keyword">ref</span> oMissing,</span><br><span class="line">            <span class="keyword">ref</span> oMissing,</span><br><span class="line">            <span class="keyword">ref</span> oMissing,</span><br><span class="line">            <span class="keyword">ref</span> oMissing,</span><br><span class="line">            <span class="keyword">ref</span> oMissing,</span><br><span class="line">            <span class="keyword">ref</span> oMissing,</span><br><span class="line">            <span class="keyword">ref</span> oMissing,</span><br><span class="line">            <span class="keyword">ref</span> oMissing</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置指定的打印机名字</span></span><br><span class="line">        appWord.ActivePrinter = PrintName;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印</span></span><br><span class="line">        doc.PrintOut(</span><br><span class="line">            <span class="keyword">ref</span> oTrue,<span class="comment">//此处为true表示后台打印</span></span><br><span class="line">            <span class="keyword">ref</span> oFalse,</span><br><span class="line">            <span class="keyword">ref</span> oMissing,</span><br><span class="line">            <span class="keyword">ref</span> oMissing,</span><br><span class="line">            <span class="keyword">ref</span> oMissing,</span><br><span class="line">            <span class="keyword">ref</span> oMissing,</span><br><span class="line">            <span class="keyword">ref</span> oMissing,</span><br><span class="line">            <span class="keyword">ref</span> oMissing,</span><br><span class="line">            <span class="keyword">ref</span> oMissing,</span><br><span class="line">            <span class="keyword">ref</span> oMissing,</span><br><span class="line">            <span class="keyword">ref</span> oMissing,</span><br><span class="line">            <span class="keyword">ref</span> oMissing,</span><br><span class="line">            <span class="keyword">ref</span> oMissing,</span><br><span class="line">            <span class="keyword">ref</span> oMissing,</span><br><span class="line">            <span class="keyword">ref</span> oMissing,</span><br><span class="line">            <span class="keyword">ref</span> oMissing,</span><br><span class="line">            <span class="keyword">ref</span> oMissing,</span><br><span class="line">            <span class="keyword">ref</span> oMissing</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印完关闭word文件</span></span><br><span class="line">        doc.Close(<span class="keyword">ref</span> doNotSaveChanges, <span class="keyword">ref</span> oMissing, <span class="keyword">ref</span> oMissing);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//还原原来的默认打印机</span></span><br><span class="line">        appWord.ActivePrinter = defaultPrinter;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//退出word程序</span></span><br><span class="line">        appWord.Quit(<span class="keyword">ref</span> oMissing, <span class="keyword">ref</span> oMissing, <span class="keyword">ref</span> oMissing);</span><br><span class="line">        doc = <span class="literal">null</span>;</span><br><span class="line">        appWord = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//代码行数</span></span><br><span class="line">        <span class="built_in">string</span> line = ex.StackTrace.ToString();</span><br><span class="line">        <span class="comment">//返回错误发生的方法定义</span></span><br><span class="line">        <span class="built_in">string</span> errorfunction = ex.TargetSite.ToString();</span><br><span class="line">        <span class="built_in">int</span> code = ex.HResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>调用方法<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//打印Word</span></span><br><span class="line">PrintWord(dialog.FileName, <span class="string">&quot;审批打印机&quot;</span>);</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Asp.Net</category>
      </categories>
      <tags>
        <tag>asp</tag>
        <tag>printer</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 博客升级</title>
    <url>/blog/2021/01/11/blog-IndexNull/</url>
    <content><![CDATA[<h3 id="Hexo-博客生成后-Index-文件为空"><a href="#Hexo-博客生成后-Index-文件为空" class="headerlink" title="Hexo 博客生成后 Index 文件为空"></a>Hexo 博客生成后 Index 文件为空</h3><span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>出差时在一台新系统中装环境，执行生成博客命令 hexo generate 后检查生成目录 public 中的 index.html 文件都为空。<br>调试后发现是新装的 <a href="https://nodejs.org/zh-cn/">Node.js</a> 版本与 <a href="https://hexo.io/">Hexo</a> 版本不匹配，旧版 Nodejs 版本为 v12.14.0，新装版本为 v14.15.4，Hexo 版本为 v3.9。</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><h4 id="降级-Nodejs"><a href="#降级-Nodejs" class="headerlink" title="降级 Nodejs"></a>降级 Nodejs</h4><p>降级 Nodejs 版本至 v12</p>
<h4 id="升级-Hexo"><a href="#升级-Hexo" class="headerlink" title="升级 Hexo"></a>升级 Hexo</h4><p>升级 Hexo 版本至与 Nodejs v14.15 匹配的 Hexo v5.3.0</p>
<h5 id="修改配置文件版本"><a href="#修改配置文件版本" class="headerlink" title="修改配置文件版本"></a>修改配置文件版本</h5><p>修改 Hexo 目录中 package.json 文件<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* ··· */</span></span><br><span class="line">  <span class="attr">&quot;hexo&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;5.3.0&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;hexo&quot;</span>: <span class="string">&quot;^5.3.0&quot;</span>,</span><br><span class="line">    <span class="comment">/* ··· */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="执行命令升级版本"><a href="#执行命令升级版本" class="headerlink" title="执行命令升级版本"></a>执行命令升级版本</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm update</span><br></pre></td></tr></table></figure>
<h5 id="安装-swig"><a href="#安装-swig" class="headerlink" title="安装 swig"></a>安装 swig</h5><p>如果直接生成博客则会出现 “ { % extends ‘_layout.swig‘ % } { % import ‘_macro/post.swig‘ as post_template % }“ 问题。<br>原因是 hexo 在 5.0 之后把 swig 给删除了需要自己手动安装。<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i hexo-renderer-swig</span><br></pre></td></tr></table></figure></p>
<h5 id="修改-external-link"><a href="#修改-external-link" class="headerlink" title="修改 external_link"></a>修改 external_link</h5><p>生成博客提示异常信息<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO  Validating config</span><br><span class="line">WARN  Deprecated config detected: &quot;external_link&quot; with a Boolean value is deprecated. See https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;configuration for more details.</span><br></pre></td></tr></table></figure><br>修改文件 _config.yml 中的节点<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">external_link:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span><span class="string">|false</span></span><br></pre></td></tr></table></figure><br>改为<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">external_link:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment"># Apply to the whole site</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></p>
<h5 id="Next-主题分页显示异常"><a href="#Next-主题分页显示异常" class="headerlink" title="Next 主题分页显示异常"></a>Next 主题分页显示异常</h5><p>参考最新的 <a href="https://github.com/theme-next/hexo-theme-next/blob/master/layout/_partials/pagination.swig">pagination.swig</a><br>修改 Next 主题的配置文件 ../themes/next/layout/_partials/pagination.swig<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;%- if page.prev or page.next %&#125;</span><br><span class="line">  &lt;nav class&#x3D;&quot;pagination&quot;&gt;</span><br><span class="line">    &#123;&#123;</span><br><span class="line">      paginator(&#123;</span><br><span class="line">        prev_text: &#39;&lt;i class&#x3D;&quot;fa fa-angle-left&quot; aria-label&#x3D;&quot;&#39; + __(&#39;accessibility.prev_page&#39;) + &#39;&quot;&gt;&lt;&#x2F;i&gt;&#39;,</span><br><span class="line">        next_text: &#39;&lt;i class&#x3D;&quot;fa fa-angle-right&quot; aria-label&#x3D;&quot;&#39; + __(&#39;accessibility.next_page&#39;) + &#39;&quot;&gt;&lt;&#x2F;i&gt;&#39;,</span><br><span class="line">        mid_size : 1,</span><br><span class="line">        escape   : false</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;&#125;</span><br><span class="line">  &lt;&#x2F;nav&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="Hexo-无法解析特殊字符导致生成失败"><a href="#Hexo-无法解析特殊字符导致生成失败" class="headerlink" title="Hexo 无法解析特殊字符导致生成失败"></a>Hexo 无法解析特殊字符导致生成失败</h5><p>标题中的中括号，例如：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: 网页使用 <span class="xml"><span class="tag">&lt;<span class="name">iframe</span>&gt;</span></span> 嵌入部分其他网页</span><br></pre></td></tr></table></figure></p>
<h6 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h6><p>文章中的特殊字符，例如：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;&#123; &#125;&#125;、&#123;% %&#125;</span><br></pre></td></tr></table></figure></p>
<p>推荐避免使用类似字符或使用<a href="https://tool.oschina.net/commons?type=2">HTML转义字符对照表</a>进行转义。</p>
<h5 id="NexT5-中文超链接乱码导致不能跳转"><a href="#NexT5-中文超链接乱码导致不能跳转" class="headerlink" title="NexT5 中文超链接乱码导致不能跳转"></a>NexT5 中文超链接乱码导致不能跳转</h5><p>博客文章左侧超链接点击无效无法跳转，控制台报错：Cannot read property ‘top’ of undefined。</p>
<h6 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h6><p>由于 href 链接中文 url 未经转码导致中文链接无法跳转，使用 decodeURI() 方法进行重新编码。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对获取到的url进行重编码</span></span><br><span class="line">targetSelector = <span class="built_in">decodeURI</span>(<span class="built_in">this</span>.getAttribute(<span class="string">&#x27;href&#x27;</span>));</span><br></pre></td></tr></table></figure></p>
<h6 id="完整段落代码"><a href="#完整段落代码" class="headerlink" title="完整段落代码"></a>完整段落代码</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TOC item animation navigate &amp; prevent #item selector in adress bar.</span></span><br><span class="line">$(<span class="string">&#x27;.post-toc a&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  <span class="keyword">var</span> targetSelector = NexT.utils.escapeSelector(<span class="built_in">this</span>.getAttribute(<span class="string">&#x27;href&#x27;</span>));</span><br><span class="line">  <span class="comment">// 对获取到的url进行重编码</span></span><br><span class="line">  targetSelector = <span class="built_in">decodeURI</span>(<span class="built_in">this</span>.getAttribute(<span class="string">&#x27;href&#x27;</span>));</span><br><span class="line">  <span class="keyword">var</span> offset = $(targetSelector).offset().top;</span><br><span class="line"></span><br><span class="line">  hasVelocity</span><br><span class="line">    ? html.velocity(<span class="string">&#x27;stop&#x27;</span>).velocity(<span class="string">&#x27;scroll&#x27;</span>, &#123;</span><br><span class="line">      offset  : offset + <span class="string">&#x27;px&#x27;</span>,</span><br><span class="line">      mobileHA: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">    : $(<span class="string">&#x27;html, body&#x27;</span>).stop().animate(&#123;</span><br><span class="line">      scrollTop: offset</span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Canon 相机管理控制</title>
    <url>/blog/2021/03/08/camera-ManageControl/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/camera-ManageControl/ewu-banner-wide.jpg"/></p>
<span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>使用 PC、手机 连接相机后直接预览相片或直接远程控制相机拍照录像。</p>
<h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><h4 id="PC"><a href="#PC" class="headerlink" title="PC"></a>PC</h4><ul>
<li>使用佳能 USB 线或通过 WIFI 连接 PC。</li>
<li>安装软件 <a href="https://cweb.canon.jp/eos/software/eu.html">EOS Utility</a> 用于控制相机图像传输，遥控拍摄，设置参数。</li>
<li>安装软件 <a href="https://cweb.canon.jp/eos/software/ewu.html">EOS Webcam Utility</a> 用于将相机作为网络摄像头。</li>
</ul>
<h5 id="EOS-Utility"><a href="#EOS-Utility" class="headerlink" title="EOS Utility"></a>EOS Utility</h5><p>相机连接 PC 后使用 EOS Utility 可以试试显示控制相机拍摄，或是用于传输图片。<br><img src="https://sadness96.github.io/images/blog/camera-ManageControl/EOSUtility.jpg"/></p>
<h5 id="EOS-Webcam-Utility"><a href="#EOS-Webcam-Utility" class="headerlink" title="EOS Webcam Utility"></a>EOS Webcam Utility</h5><p>EOS Webcam Utility 作为一个服务不需要启动，相机连接 PC 后即被视为网络摄像头，可通过 <a href="https://obsproject.com/">OBS</a> 或其他推流软件显示相机试试视频，可做为网络摄像头推流。<br><img src="https://sadness96.github.io/images/blog/camera-ManageControl/EOSWebcamUtilitySetting.jpg"/></p>
<p><img src="https://sadness96.github.io/images/blog/camera-ManageControl/EOSWebcamUtility.jpg"/></p>
<h4 id="手机"><a href="#手机" class="headerlink" title="手机"></a>手机</h4><ul>
<li>相机启动 WIFI/NFC 功能</li>
<li>手机安装软件 <a href="https://cweb.canon.jp/eos/software/cc.html">Camera Connect</a> 用于 iOS/Android 设备遥控功能舒适地拍摄和查看图像。</li>
<li>手机连接相机 WIFI 后建立连接。</li>
</ul>
<h5 id="启动-WIFI-NFC"><a href="#启动-WIFI-NFC" class="headerlink" title="启动 WIFI/NFC"></a>启动 WIFI/NFC</h5><p><img src="https://sadness96.github.io/images/blog/camera-ManageControl/wifi_1.jpg"/></p>
<p><img src="https://sadness96.github.io/images/blog/camera-ManageControl/wifi_2.jpg"/></p>
<p><img src="https://sadness96.github.io/images/blog/camera-ManageControl/wifi_3.jpg"/></p>
<p><img src="https://sadness96.github.io/images/blog/camera-ManageControl/wifi_4.jpg"/></p>
<h5 id="运行-Camera-Connect"><a href="#运行-Camera-Connect" class="headerlink" title="运行 Camera Connect"></a>运行 Camera Connect</h5><p>根据提示与相机建立连接<br><img src="https://sadness96.github.io/images/blog/camera-ManageControl/CameraConnect.jpg"/></p>
]]></content>
      <categories>
        <category>Camera</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>canon</tag>
      </tags>
  </entry>
  <entry>
    <title>迁移博客至 GitHub Pages + Hexo</title>
    <url>/blog/2019/06/18/blog-TransferHexo/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/blog-TransferHexo/BlogLogo.png"/></p>
<span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>原来只有使用 <a href="https://cn.wordpress.org/">WordPress</a> 记录一部分博客，以及平时有随手记录工作生活的习惯，这次迁移博客统一整理一遍。</p>
<h3 id="技术简介"><a href="#技术简介" class="headerlink" title="技术简介"></a>技术简介</h3><p>博客主体使用 <a href="https://pages.github.com/">GitHub Pages</a> 作为静态网站托管平台，使用 <a href="https://hexo.io/zh-cn/">Hexo</a> 作为静态博客生成框架，以及使用 <a href="http://theme-next.iissnan.com/">theme-next</a> 主题。</p>
<h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><p><a href="https://code.visualstudio.com/">VSCode</a> + <a href="http://nodejs.cn/">Node.js</a> + <a href="https://hexo.io/zh-cn/">Hexo</a> + <a href="https://www.python.org/">Python</a> + <a href="https://git-scm.com/">GIT</a></p>
<h3 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h3><h4 id="创建-GitHub-Pages"><a href="#创建-GitHub-Pages" class="headerlink" title="创建 GitHub Pages"></a>创建 GitHub Pages</h4><h5 id="GitHub-仓库创建与用户名同名的-“-github-io”-库"><a href="#GitHub-仓库创建与用户名同名的-“-github-io”-库" class="headerlink" title="GitHub 仓库创建与用户名同名的 “.github.io” 库"></a>GitHub 仓库创建与用户名同名的 “.github.io” 库</h5><p>要求：名称必须为小写字母或数字<br>例：Github 用户名为：Test；则创建库为：test.github.io<br>库地址即为：<a href="https://github.com/Test/test.github.io">https://github.com/Test/test.github.io</a><br>git地址为：<a href="https://github.com/Test/test.github.io.git">https://github.com/Test/test.github.io.git</a><br>Pages访问地址为：<a href="https://test.github.io">https://test.github.io</a><br>设置网站为<a href="https://baike.baidu.com/item/https/285356?fr=aladdin">HTTPS</a>：库 Settings 中勾选：Enforce HTTPS</p>
<h5 id="域名配置"><a href="#域名配置" class="headerlink" title="域名配置"></a>域名配置</h5><p>在<a href="https://www.aliyun.com/">阿里云</a>中购买域名（例：test.com）后需实名认证<br>安全设置中设置<a href="https://wanwang.aliyun.com/domain/transferlock/?spm=5176.100251.0.0.7dd54f15rzxrOx">禁止转移锁</a>、<a href="https://wanwang.aliyun.com/domain/domainlock/?spm=5176.100251.0.0.7dd54f15rzxrOx">禁止更新锁</a><br>设置域名解析：新增两条记录<br>1、记录类型：CNAME；主机记录：www；解析线路：默认；记录值：test.github.io；TTL：10分钟；<br>2、记录类型：CNAME；主机记录：@；解析线路：默认；记录值：test.github.io；TTL：10分钟；<br>即可跳转为 test.github.io 地址<br>设置打开网站为域名地址：<br>GitHub 库中新增 CNAME 文件 保存内容为域名地址（例：test.com）<br>Settings 中显示 “Your site is published at <a href="https://test.com/">https://test.com/</a> “ 即可</p>
<h5 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h5><table>
<thead>
<tr>
<th style="text-align:left">目录文件夹或文件</th>
<th style="text-align:left">作用及功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">blog</td>
<td style="text-align:left">用于发布的静态博客</td>
</tr>
<tr>
<td style="text-align:left">flash</td>
<td style="text-align:left">网页中加载的Flash文件</td>
</tr>
<tr>
<td style="text-align:left">hexoblog</td>
<td style="text-align:left">Hexo 编译博客源码</td>
</tr>
<tr>
<td style="text-align:left">images</td>
<td style="text-align:left">网页中加载的图片文件</td>
</tr>
<tr>
<td style="text-align:left">resume</td>
<td style="text-align:left">简历页面</td>
</tr>
<tr>
<td style="text-align:left">.nojekyll</td>
<td style="text-align:left">关闭jekyll检查</td>
</tr>
<tr>
<td style="text-align:left">404.html</td>
<td style="text-align:left">网站404页面</td>
</tr>
<tr>
<td style="text-align:left">CNAME</td>
<td style="text-align:left">设置Pages解析域名地址</td>
</tr>
<tr>
<td style="text-align:left">README.md</td>
<td style="text-align:left">自述文件</td>
</tr>
<tr>
<td style="text-align:left">index.html</td>
<td style="text-align:left">博客主界面</td>
</tr>
</tbody>
</table>
<h5 id="修改主题样式"><a href="#修改主题样式" class="headerlink" title="修改主题样式"></a>修改主题样式</h5><p>仅展示代码样式部分，主题配置文件请查阅官网 <a href="http://theme-next.iissnan.com/">theme-next</a><br>修改文件路径：hexoblog/themes/next/source/css/_custom/custom.styl<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// Custom styles.</span><br><span class="line">// 主页文章添加阴影效果</span><br><span class="line"><span class="selector-class">.post</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#FFF</span>;</span><br><span class="line">    -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, .<span class="number">5</span>);</span><br><span class="line">    -moz-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, .<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 主页文章内间距</span><br><span class="line"><span class="selector-class">.content-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.posts-expand</span> &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 超链接颜色</span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: none;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#0593d3</span>;</span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fc6423</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: none;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#fc6423</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 主页文章块缩进</span><br><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-eof</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">30px</span> auto <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-meta</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">3px</span> <span class="number">0</span> <span class="number">30px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-body</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span> auto <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.post-button</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 底部页码格式</span><br><span class="line"><span class="selector-class">.pagination</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">40px</span> <span class="number">0</span> <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="压缩Hexo博客生成空白行"><a href="#压缩Hexo博客生成空白行" class="headerlink" title="压缩Hexo博客生成空白行"></a>压缩Hexo博客生成空白行</h5><p>解决Hexo博客系统生成导致大量空白行问题<br>自动遍历目录下所有html文件，创建临时文件，把非空格行拷贝，最后在重命名文件恢复<br>生成博客文章后执行命令：python compress.py 即可<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minify_html</span>(<span class="params">filename</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> p:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename+<span class="string">&#x27;.tmp&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> t:</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                l = p.readline()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> l:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> re.search(<span class="string">r&#x27;\S&#x27;</span>, l):</span><br><span class="line">                        t.write(l)</span><br><span class="line">    os.remove(filename)</span><br><span class="line">    os.rename(filename+<span class="string">&#x27;.tmp&#x27;</span>, filename)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s 已压缩！&#x27;</span> % filename)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">yasuo</span>(<span class="params">dir_path</span>):</span></span><br><span class="line">    <span class="keyword">if</span> dir_path[<span class="built_in">len</span>(dir_path)-<span class="number">1</span>] == <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">        dir_path = dir_path[:<span class="built_in">len</span>(dir_path)-<span class="number">1</span>]</span><br><span class="line">    file_list = os.listdir(dir_path)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> file_list:</span><br><span class="line">        <span class="keyword">if</span> i.find(<span class="string">&#x27;html&#x27;</span>) &gt; <span class="number">0</span>:</span><br><span class="line">            minify_html(dir_path+<span class="string">&#x27;/&#x27;</span>+i)</span><br><span class="line">        <span class="keyword">elif</span> os.path.isdir(dir_path+<span class="string">&#x27;/&#x27;</span>+i) <span class="keyword">and</span> <span class="keyword">not</span> re.match(<span class="string">r&#x27;\.|\_&#x27;</span>, i):</span><br><span class="line">            yasuo(<span class="string">&quot;%s/%s&quot;</span> % (dir_path, i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># dir_path：压缩相对路径</span></span><br><span class="line">yasuo(<span class="string">&#x27;public&#x27;</span>)</span><br></pre></td></tr></table></figure></p>
<h5 id="拷贝Hexo博客系统public目录"><a href="#拷贝Hexo博客系统public目录" class="headerlink" title="拷贝Hexo博客系统public目录"></a>拷贝Hexo博客系统public目录</h5><p>当前系统Hexo博客源码在 /hexoblog 目录下（该目录不被上传），将生成文件自动拷贝至上层目录 /blog 下<br>生成博客文章后执行命令：python deploy.py 即可<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deploy</span>(<span class="params">dir_path, dir_copy</span>):</span></span><br><span class="line">    dirpath = <span class="string">r&#x27;%s\%s&#x27;</span> % (os.path.dirname(</span><br><span class="line">        os.path.realpath(__file__)), dir_path)</span><br><span class="line">    dircopy = <span class="string">r&#x27;%s\%s&#x27;</span> % (os.path.abspath(</span><br><span class="line">        os.path.dirname(os.getcwd())), dir_copy)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;dirpath：%s&#x27;</span>, dirpath)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;dircopy：%s&#x27;</span>, dircopy)</span><br><span class="line">    <span class="comment"># 删除文件夹</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(dircopy):</span><br><span class="line">        shutil.rmtree(dircopy)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;删除文件夹成功！&#x27;</span>)</span><br><span class="line">    <span class="comment"># 拷贝文件夹</span></span><br><span class="line">    shutil.copytree(dirpath, dircopy)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;拷贝文件夹成功！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成博客相对路径</span></span><br><span class="line"><span class="comment"># 拷贝上级目录相对路径</span></span><br><span class="line">deploy(<span class="string">&#x27;public&#x27;</span>, <span class="string">&#x27;blog&#x27;</span>)</span><br></pre></td></tr></table></figure></p>
<h5 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h5><h6 id="使用VSCode开发时生成静态页不加载CSS样式"><a href="#使用VSCode开发时生成静态页不加载CSS样式" class="headerlink" title="使用VSCode开发时生成静态页不加载CSS样式"></a>使用VSCode开发时生成静态页不加载CSS样式</h6><p>插件：View In Browser 本地网页打开<br>插件：Live Server 启动一个服务打开网站</p>
<h6 id="上传Hexo博客源码后报错：Date-is-not-a-valid-datetime"><a href="#上传Hexo博客源码后报错：Date-is-not-a-valid-datetime" class="headerlink" title="上传Hexo博客源码后报错：Date is not a valid datetime"></a>上传Hexo博客源码后报错：Date is not a valid datetime</h6><p>由于GitHub Pages默认使用jekyll作为代码检查，在上传Hexo源码之后存在编译不通过的情况，所以需要创建.nojekyll空文件在Repository的根目录下以关闭针对jekyll的检查。<br>Windows下创建以“.”开头文件夹和文件（执行命令）：<br><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">md</span> .folder              //创建文件夹</span><br><span class="line"><span class="built_in">echo</span> &gt;.file             //创建文件</span><br></pre></td></tr></table></figure></p>
<h6 id="Hexo生成静态博客存在大量空白行"><a href="#Hexo生成静态博客存在大量空白行" class="headerlink" title="Hexo生成静态博客存在大量空白行"></a>Hexo生成静态博客存在大量空白行</h6><p>请查看文章：<a href="/blog/2019/06/17/python-CompressHexo/">压缩Hexo博客生成空白行</a></p>
<h5 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h5><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> hexoblog                 //进入博客源码文件夹</span><br><span class="line">hexo new &lt;<span class="built_in">title</span>&gt;            //创建新文章</span><br><span class="line">hexo clean                  //清理博客生成文件</span><br><span class="line">hexo generate               //生成博客静文件</span><br><span class="line">hexo server                 //启动博客服务测试内容</span><br><span class="line">python compress.py          //压缩Hexo生成空白行</span><br><span class="line">python deploy.py            //拷贝至上级 &quot;../blog&quot; 发布目录</span><br><span class="line"><span class="built_in">cd</span> ..                       //回到上级 &quot;../&quot; 目录</span><br><span class="line">git status                  //对比差异文件</span><br><span class="line">git add .                   //添加修改至缓存区</span><br><span class="line">git commit -m &quot;Message&quot;     //填写修改内容</span><br><span class="line">git push                    //提交修改</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>python</tag>
        <tag>cmd</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Canon 相机延时摄影</title>
    <url>/blog/2022/08/28/camera-TimelapsePhotography/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/camera-TimelapsePhotography/mmexport1619697203114.jpg"/></p>
<span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://en.wikipedia.org/wiki/Time-lapse_photography">延时摄影</a> 是以一种将时间压缩的拍摄技术。其拍摄的通常是一组照片，后期通过将照片串联合成视频，把几分钟、几小时甚至是几天的过程压缩在一个较短的时间内以视频的方式播放。在一段延时摄影视频中，物体或者景物缓慢变化的过程被压缩到一个较短的时间内，呈现出平时用肉眼无法察觉的奇异精彩的景象。</p>
<h3 id="延时设置"><a href="#延时设置" class="headerlink" title="延时设置"></a>延时设置</h3><p><a href="https://cweb.canon.jp/eos/lineup/5dmk4/index.html">Canon EOS 5D Mark IV</a> 提供两种延时拍摄方式，一种为延时短片，一种为定时间隔拍照。</p>
<h4 id="延时短片"><a href="#延时短片" class="headerlink" title="延时短片"></a>延时短片</h4><p>佳能提供以常规录像方式的延时摄影，有点是设置简单，拍摄完成直接输出视频文件，但缺点是仅支持 1080P 的分辨率。需要切换到视频模式，并且关闭 WIFI 后才可设置。<br><img src="https://sadness96.github.io/images/blog/camera-TimelapsePhotography/延时短片1.jpg"/></p>
<p><img src="https://sadness96.github.io/images/blog/camera-TimelapsePhotography/延时短片2.jpg"/></p>
<p><img src="https://sadness96.github.io/images/blog/camera-TimelapsePhotography/延时短片3.jpg"/></p>
<h4 id="定时间隔拍照"><a href="#定时间隔拍照" class="headerlink" title="定时间隔拍照"></a>定时间隔拍照</h4><p>定时间隔拍照为常规延时视频制作方式，优点是每一帧的画质都可以设置为相机拍照原本的画质，测试 5d4 合成视频上传后可以显示为 8K 超高清，缺点是需要使用软件合成视频，并且拍摄时不断的触发快门，对相机产生消耗，或许微单比单反更适合这样拍摄。<br><img src="https://sadness96.github.io/images/blog/camera-TimelapsePhotography/延时拍照1.jpg"/></p>
<p><img src="https://sadness96.github.io/images/blog/camera-TimelapsePhotography/延时拍照2.jpg"/></p>
<p><img src="https://sadness96.github.io/images/blog/camera-TimelapsePhotography/延时拍照3.jpg"/></p>
<h5 id="Adobe-Premiere-导入"><a href="#Adobe-Premiere-导入" class="headerlink" title="Adobe Premiere 导入"></a>Adobe Premiere 导入</h5><p>使用 <a href="https://www.adobe.com/products/premiere.html">Adobe Premiere</a> 导入素材，导入媒体选择第一张图片，勾选：图像序列 即可，拖入时间轴即可编辑视频<br><img src="https://sadness96.github.io/images/blog/camera-TimelapsePhotography/PrImport.jpg"/></p>
<p><img src="https://sadness96.github.io/images/blog/camera-TimelapsePhotography/PrTimeAxis.jpg"/></p>
<h3 id="演示实拍"><a href="#演示实拍" class="headerlink" title="演示实拍"></a>演示实拍</h3><p>由于实拍时处于阴天，效果并不是很理想，第一次实拍在曝光的设置上有些问题，导致黑天时过暗，下次在好好调。<br>Bilibili 外链限制清晰度，打开原视频最高可看 8K 超高清。</p>
<iframe src="https://player.bilibili.com/player.html?aid=644908659&page=1&high_quality=1&danmaku=0&allowfullscreen=true" width="100%" height="500px" scrolling="no" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>

<h3 id="拍摄地点"><a href="#拍摄地点" class="headerlink" title="拍摄地点"></a>拍摄地点</h3><div id="allmap"></div>

<style type="text/css">
    #allmap {
        width: 100%;
        height: 400px;
        overflow: hidden;
        margin: 0;
    }
</style>

<script type="text/javascript" src="https://api.map.baidu.com/api?v=3.0&ak=tgELalGNumraHZdVurYllitGmvd7RC6R"></script>
<script>
    window.onload = function () {
        //加载百度地图
        var map = new BMap.Map("allmap");
        var point = new BMap.Point(116.398636, 40.025161);
        map.centerAndZoom(point, 17);
        map.enableScrollWheelZoom();
        var marker = new BMap.Marker(point);
        map.addOverlay(marker);
    }
</script>]]></content>
      <categories>
        <category>Camera</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>canon</tag>
      </tags>
  </entry>
  <entry>
    <title>AVFrame And Mat Convert</title>
    <url>/blog/2022/04/07/cpp-AVFrameAndMatConvert/</url>
    <content><![CDATA[<h3 id="FFmpeg-yuv420p、nv12-与-OpenCV-Mat-互相转换"><a href="#FFmpeg-yuv420p、nv12-与-OpenCV-Mat-互相转换" class="headerlink" title="FFmpeg(yuv420p、nv12) 与 OpenCV Mat 互相转换"></a>FFmpeg(yuv420p、nv12) 与 OpenCV Mat 互相转换</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><a href="https://opencv.org/">OpenCV</a> 可以使用 <a href="https://docs.opencv.org/3.4/d8/dfe/classcv_1_1VideoCapture.html">VideoCapture</a> 类读取视频，虽然同样是封装了 <a href="https://ffmpeg.org/">FFmpeg</a>，但是也屏蔽了很多接口，想做一些复杂操作就很不方便。<br>所以改用 FFmpeg 读取视频传递给 OpenCV 使用，将视频帧 FFmpeg <a href="https://www.ffmpeg.org/doxygen/4.1/structAVFrame.html">AVFrame</a> 转换为 OpenCV <a href="https://docs.opencv.org/4.x/d3/d63/classcv_1_1Mat.html">Mat</a>。</p>
<h4 id="解码帧"><a href="#解码帧" class="headerlink" title="解码帧"></a>解码帧</h4><h5 id="软解码"><a href="#软解码" class="headerlink" title="软解码"></a>软解码</h5><p>软解码解析出的 AVFrame 格式为：(AVPixelFormat)AV_PIX_FMT_YUV420P。<br>需要使用 <a href="https://ffmpeg.org/doxygen/2.2/structSwsContext.html">SwsContext</a> 类转换为 Mat BGR24。</p>
<p>部分视频解析出的格式为：(AVPixelFormat)AV_PIX_FMT_YUVJ420P，直接转换会提示警告：Convert Deprecated Format，警告不重要，但最好还是转换不推荐的格式。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 转换不推荐的格式</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="function">AVPixelFormat <span class="title">ConvertDeprecatedFormat</span><span class="params">(<span class="keyword">enum</span> AVPixelFormat format)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in"><span class="keyword">switch</span></span> (format)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> AV_PIX_FMT_YUVJ420P:</span><br><span class="line">		<span class="keyword">return</span> AV_PIX_FMT_YUV420P;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> AV_PIX_FMT_YUVJ422P:</span><br><span class="line">		<span class="keyword">return</span> AV_PIX_FMT_YUV422P;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> AV_PIX_FMT_YUVJ444P:</span><br><span class="line">		<span class="keyword">return</span> AV_PIX_FMT_YUV444P;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> AV_PIX_FMT_YUVJ440P:</span><br><span class="line">		<span class="keyword">return</span> AV_PIX_FMT_YUV440P;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="keyword">return</span> format;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="硬解码"><a href="#硬解码" class="headerlink" title="硬解码"></a>硬解码</h5><p>硬解码解析出的 AVFrame 格式为：显存 NV12。<br>硬解码类型：AV_HWDEVICE_TYPE_CUDA 解析结果为 (AVPixelFormat)AV_PIX_FMT_CUDA。<br>硬解码类型：AV_HWDEVICE_TYPE_DXVA2 解析结果为 (AVPixelFormat)AV_PIX_FMT_FXVA2_VLD。<br>硬解码类型：AV_HWDEVICE_TYPE_D3D11VA 解析结果为 (AVPixelFormat)AV_PIX_FMT_D3D11。</p>
<p>使用 <a href="https://ffmpeg.org/doxygen/3.2/hwcontext_8h.html">av_hwframe_transfer_data</a> 函数把显存数据统一转换为内存数据 NV12。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (pCodecCtx-&gt;hw_device_ctx)</span><br><span class="line">&#123;</span><br><span class="line">    AVFrame* hw_frame;</span><br><span class="line">    hw_frame = <span class="built_in">av_frame_alloc</span>();</span><br><span class="line">    <span class="built_in">av_hwframe_transfer_data</span>(hw_frame, frame, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>内存数据 NV12 格式为：(AVPixelFormat)AV_PIX_FMT_NV12。<br>同样需要使用 <a href="https://ffmpeg.org/doxygen/2.2/structSwsContext.html">SwsContext</a> 类转换为 Mat BGR24。</p>
<h4 id="转换-AVFrame-To-Mat"><a href="#转换-AVFrame-To-Mat" class="headerlink" title="转换 AVFrame To Mat"></a>转换 AVFrame To Mat</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 从 FFmpeg 图片类型转换为 OpenCV 类型</span></span><br><span class="line"><span class="comment">/// 修改尺寸</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;frame&quot;&gt;FFmpeg 图像&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;dstWidth&quot;&gt;输出图像宽度&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;dstHeight&quot;&gt;输出图像高度&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;isfree&quot;&gt;是否释放内存&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;Mat&lt;/returns&gt;</span></span><br><span class="line"><span class="function">Mat <span class="title">AVFrameToMat</span><span class="params">(AVFrame* frame, <span class="keyword">int</span> dstWidth, <span class="keyword">int</span> dstHeight, <span class="keyword">bool</span> isfree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Mat <span class="title">image</span><span class="params">(dstHeight, dstWidth, CV_8UC3)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> srcWidth = frame-&gt;width;</span><br><span class="line">	<span class="keyword">int</span> srcHeight = frame-&gt;height;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> cvLinesizes[<span class="number">1</span>]&#123; image.<span class="built_in">step1</span>() &#125;;</span><br><span class="line">	<span class="keyword">auto</span> srcFormat = <span class="built_in">ConvertDeprecatedFormat</span>((AVPixelFormat)frame-&gt;format);</span><br><span class="line">	SwsContext* conversion = <span class="built_in">sws_getContext</span>(srcWidth, srcHeight, srcFormat, dstWidth, dstHeight, AV_PIX_FMT_BGR24, SWS_FAST_BILINEAR, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">sws_scale</span>(conversion, frame-&gt;data, frame-&gt;linesize, <span class="number">0</span>, srcHeight, &amp;image.data, cvLinesizes);</span><br><span class="line">	<span class="built_in">sws_freeContext</span>(conversion);</span><br><span class="line">	<span class="keyword">if</span> (isfree)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">av_frame_free</span>(&amp;frame);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> image;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 从 FFmpeg 图片类型转换为 OpenCV 类型</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;frame&quot;&gt;FFmpeg 图像&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;isfree&quot;&gt;是否释放内存&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;Mat&lt;/returns&gt;</span></span><br><span class="line"><span class="function">Mat <span class="title">AVFrameToMat</span><span class="params">(AVFrame* frame, <span class="keyword">bool</span> isfree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">AVFrameToMat</span>(frame, frame-&gt;width, frame-&gt;height, isfree);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="转换-Mat-To-AVFrame"><a href="#转换-Mat-To-AVFrame" class="headerlink" title="转换 Mat To AVFrame"></a>转换 Mat To AVFrame</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 从 OpenCV 图片类型转换为 FFmpeg 类型</span></span><br><span class="line"><span class="comment">/// 修改尺寸</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;image&quot;&gt;OpenCV 图像&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;frame&quot;&gt;FFmpeg 图像&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;dstWidth&quot;&gt;输出图像宽度&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;dstHeight&quot;&gt;输出图像高度&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;AVFrame&lt;/returns&gt;</span></span><br><span class="line"><span class="function">AVFrame* <span class="title">MatToAVFrame</span><span class="params">(Mat* image, AVFrame* frame, <span class="keyword">int</span> dstWidth, <span class="keyword">int</span> dstHeight)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (frame == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		frame = <span class="built_in">av_frame_alloc</span>();</span><br><span class="line">		frame-&gt;format = AV_PIX_FMT_YUV420P;</span><br><span class="line">		frame-&gt;width = dstWidth;</span><br><span class="line">		frame-&gt;height = dstHeight;</span><br><span class="line">		<span class="built_in">av_frame_get_buffer</span>(frame, <span class="number">0</span>);</span><br><span class="line">		<span class="built_in">av_frame_make_writable</span>(frame);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> srcWidth = image-&gt;cols;</span><br><span class="line">	<span class="keyword">int</span> srcHeight = image-&gt;rows;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> cvLinesizes[<span class="number">1</span>]&#123; image-&gt;<span class="built_in">step1</span>() &#125;;</span><br><span class="line">	SwsContext* conversion = <span class="built_in">sws_getContext</span>(srcWidth, srcHeight, AV_PIX_FMT_BGR24, dstWidth, dstHeight, (AVPixelFormat)frame-&gt;format, SWS_FAST_BILINEAR, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">sws_scale</span>(conversion, &amp;image-&gt;data, cvLinesizes, <span class="number">0</span>, srcHeight, frame-&gt;data, frame-&gt;linesize);</span><br><span class="line">	<span class="built_in">sws_freeContext</span>(conversion);</span><br><span class="line">	<span class="keyword">return</span> frame;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 从 OpenCV 图片类型转换为 FFmpeg 类型</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;image&quot;&gt;OpenCV 图像&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;frame&quot;&gt;FFmpeg 图像&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;AVFrame&lt;/returns&gt;</span></span><br><span class="line"><span class="function">AVFrame* <span class="title">MatToAVFrame</span><span class="params">(Mat* image, AVFrame* frame)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">MatToAVFrame</span>(image, frame, image-&gt;cols, image-&gt;rows);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>ffmpeg</tag>
        <tag>opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Cuda Demo</title>
    <url>/blog/2021/09/14/cpp-CudaDemo/</url>
    <content><![CDATA[<h3 id="使用-Cuda-并行计算对图像处理加速"><a href="#使用-Cuda-并行计算对图像处理加速" class="headerlink" title="使用 Cuda 并行计算对图像处理加速"></a>使用 Cuda 并行计算对图像处理加速</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><a href="https://www.nvidia.cn/geforce/technologies/cuda/">CUDA</a> 是 <a href="https://www.nvidia.cn/">NVIDIA</a> 发明的一种并行计算平台和编程模型。它通过利用图形处理器 (GPU) 的处理能力，可大幅提升计算性能。<br>参考：<a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html">CUDA C++ Programming Guide</a></p>
<h4 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h4><ul>
<li>Windows 10</li>
<li><a href="https://visualstudio.microsoft.com/zh-hans/">Visual Studio 2019</a></li>
<li><a href="https://developer.nvidia.com/cuda-10.2-download-archive">CUDA Toolkit 10.2</a></li>
</ul>
<h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><ol>
<li>安装 Cuda 程序后使用命令 “nvcc -V” 验证安装完成。</li>
<li>拷贝目录 “C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2\” 下 “include”、”lib” 目录到项目下。</li>
<li>工程项目添加 VC++ 目录：包含目录和库目录。</li>
<li>连接器 → 输入 → 附加依赖项 中加入：”cudart.lib”。</li>
<li>生成依赖项 → 生成自定义 中勾选：CUDA 10.2(.targets,.props)。</li>
</ol>
<h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><p>简单的 Cuda 示例，使用两种方式进行内存和显存的相互拷贝。<br>TestCuda1：使用 GpuMat 方式拷贝，Opencv 提供的方式，代码更简洁。<br>TestCuda2：使用 cudaMalloc 方式拷贝，Cuda 方法，效率更高，拷贝速度更快。</p>
<h5 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">Mat <span class="title">TestCuda1</span><span class="params">(Mat img)</span></span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">Mat <span class="title">TestCuda2</span><span class="params">(Mat img)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Mat img = <span class="built_in">imread</span>(<span class="string">&quot;1.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> img1 = <span class="built_in">TestCuda1</span>(img);</span><br><span class="line">    <span class="keyword">auto</span> img2 = <span class="built_in">TestCuda2</span>(img);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;1&quot;</span>, img1);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;2&quot;</span>, img2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="CudaDemo-cu"><a href="#CudaDemo-cu" class="headerlink" title="CudaDemo.cu"></a>CudaDemo.cu</h5><ul>
<li>Cuda 代码文件以 .cu 后缀结尾。</li>
<li>使用前缀 “__global__ “ 开头修饰的函数是核函数。</li>
<li>使用新的 &lt;&lt;&lt;…&gt;&gt;&gt; 调用。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">CudaCore1</span><span class="params">(PtrStepSz&lt;uchar3&gt; inputMat, PtrStepSz&lt;uchar3&gt; outputMat)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> tidx = threadIdx.x + blockDim.x * blockIdx.x;</span><br><span class="line">	<span class="keyword">int</span> tidy = threadIdx.y + blockDim.y * blockIdx.y;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (tidx &lt; inputMat.cols &amp;&amp; tidy &lt; inputMat.rows)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">outputMat</span>(tidy, tidx) = <span class="built_in">inputMat</span>(tidy, tidx);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">Mat <span class="title">TestCuda1</span><span class="params">(Mat img)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">GpuMat <span class="title">inputMat</span><span class="params">(img)</span></span>;</span><br><span class="line">	<span class="keyword">auto</span> outputMat = <span class="built_in">GpuMat</span>(img.rows, img.cols, CV_8UC3);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> width = img.cols;</span><br><span class="line">	<span class="keyword">int</span> height = img.rows;</span><br><span class="line"></span><br><span class="line">	<span class="function">dim3 <span class="title">block</span><span class="params">(<span class="number">32</span>, <span class="number">32</span>)</span></span>;</span><br><span class="line">	<span class="function">dim3 <span class="title">grid</span><span class="params">((width + block.x - <span class="number">1</span>) / block.x, (height + block.y - <span class="number">1</span>) / block.y)</span></span>;</span><br><span class="line">	CudaCore1 &lt;&lt; &lt;grid, block &gt;&gt; &gt; (inputMat, outputMat);</span><br><span class="line">	<span class="built_in">cudaThreadSynchronize</span>();</span><br><span class="line"></span><br><span class="line">	Mat dstImg;</span><br><span class="line">	outputMat.<span class="built_in">download</span>(dstImg);</span><br><span class="line">	<span class="keyword">return</span> dstImg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">CudaCore2</span><span class="params">(<span class="keyword">const</span> uchar3* inputImg, uchar3* outputImg, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> tidx = threadIdx.x + blockDim.x * blockIdx.x;</span><br><span class="line">	<span class="keyword">int</span> tidy = threadIdx.y + blockDim.y * blockIdx.y;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (tidx &lt; width &amp;&amp; tidy &lt; height)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> idx = tidy * width + tidx;</span><br><span class="line">		outputImg[idx] = inputImg[idx];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">Mat <span class="title">TestCuda2</span><span class="params">(Mat img)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> height = img.rows;</span><br><span class="line">	<span class="keyword">int</span> width = img.cols;</span><br><span class="line">	<span class="keyword">auto</span> img_size = <span class="built_in"><span class="keyword">sizeof</span></span>(uchar3) * height * width;</span><br><span class="line"></span><br><span class="line">	uchar3* inputImg = <span class="literal">NULL</span>;</span><br><span class="line">	uchar3* outputImg = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cudaMalloc</span>((<span class="keyword">void</span>**)&amp;inputImg, img_size);</span><br><span class="line">	<span class="built_in">cudaMalloc</span>((<span class="keyword">void</span>**)&amp;outputImg, img_size);</span><br><span class="line">	<span class="built_in">cudaMemcpy</span>(inputImg, (uchar3*)img.data, img_size, cudaMemcpyHostToDevice);</span><br><span class="line"></span><br><span class="line">	<span class="function">dim3 <span class="title">block</span><span class="params">(<span class="number">32</span>, <span class="number">32</span>)</span></span>;</span><br><span class="line">	<span class="function">dim3 <span class="title">grid</span><span class="params">((width + block.x - <span class="number">1</span>) / block.x, (height + block.y - <span class="number">1</span>) / block.y)</span></span>;</span><br><span class="line">	CudaCore2 &lt;&lt; &lt;grid, block &gt;&gt; &gt; (inputImg, outputImg, width, height);</span><br><span class="line">	<span class="built_in">cudaFree</span>(inputImg);</span><br><span class="line">	<span class="built_in">cudaThreadSynchronize</span>();</span><br><span class="line"></span><br><span class="line">	<span class="function">Mat <span class="title">dstImg</span><span class="params">(height, width, CV_8UC3)</span></span>;</span><br><span class="line">	uchar3* outputUChar = (uchar3*)dstImg.data;</span><br><span class="line">	<span class="built_in">cudaMemcpy</span>(outputUChar, outputImg, img_size, cudaMemcpyDeviceToHost);</span><br><span class="line">	<span class="built_in">cudaFree</span>(outputImg);</span><br><span class="line">	<span class="keyword">return</span> dstImg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>cuda</tag>
      </tags>
  </entry>
  <entry>
    <title>FFmpeg 解码视频</title>
    <url>/blog/2021/11/08/cpp-FFmpegDecoder/</url>
    <content><![CDATA[<h3 id="使用-FFmpeg-解码视频并显示"><a href="#使用-FFmpeg-解码视频并显示" class="headerlink" title="使用 FFmpeg 解码视频并显示"></a>使用 FFmpeg 解码视频并显示</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><a href="https://ffmpeg.org/">FFmpeg</a> 是一个完整的跨平台解决方案，用于录制、转换和流式传输音频和视频。</p>
<h4 id="安装与配置开发环境"><a href="#安装与配置开发环境" class="headerlink" title="安装与配置开发环境"></a>安装与配置开发环境</h4><p>这里不记录如何编译 FFmpeg，不需要精简打包大小或开关一些功能的话直接 <a href="https://ffmpeg.org/download.html">下载</a> 编译好的版本即可，该篇代码基于第三方的发布版本 n4.4-178-g4b583e5425-20211018 开发。</p>
<h5 id="配置系统环境"><a href="#配置系统环境" class="headerlink" title="配置系统环境"></a>配置系统环境</h5><ol>
<li>解压下载后的压缩包到文件目录。</li>
<li>配置文件夹下 .\bin 目录到环境变量。</li>
<li>在命令行中输入 ffmpeg 与 ffplay 测试配置成功。</li>
</ol>
<h5 id="配置开发环境"><a href="#配置开发环境" class="headerlink" title="配置开发环境"></a>配置开发环境</h5><ol>
<li>拷贝 ffmpeg 目录中 .\include 与 .\lib 到 C++ 工程目录。</li>
<li>项目属性中：VC++ 目录 → 包含目录，选择 .\include 文件夹。</li>
<li>项目属性中：VC++ 目录 → 库目录，选择 .\lib 文件夹。</li>
</ol>
<h4 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h4><h5 id="参数变量"><a href="#参数变量" class="headerlink" title="参数变量"></a>参数变量</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 是否启用 TCP 优化解码</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	<span class="keyword">bool</span> is_tcp_decode_ = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 是否多线程软解码</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	<span class="keyword">bool</span> is_thread_soft_decoding_ = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 是否硬解码</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	<span class="keyword">bool</span> is_hard_decoding_ = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 硬解码类型</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	<span class="keyword">int</span> hw_type_ = AV_HWDEVICE_TYPE_CUDA;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 控制 FPS</span></span><br><span class="line">	<span class="comment">/// 读取文件视频时使用</span></span><br><span class="line">	<span class="comment">/// 读取 RTSP 视频流会导致花屏</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	<span class="keyword">bool</span> is_control_fps_ = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>
<h5 id="解码视频"><a href="#解码视频" class="headerlink" title="解码视频"></a>解码视频</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用 FFmpeg C 头文件</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/opt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/channel_layout.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/common.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/imgutils.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/mathematics.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/samplefmt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/fifo.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavcodec/avcodec.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavformat/avformat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavformat/avio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavfilter/avfilter.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavfilter/buffersink.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavfilter/buffersrc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libswscale/swscale.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libswresample/swresample.h&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;winmm.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;avcodec.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;avformat.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;avutil.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;swscale.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 打印 FFmpeg 错误信息</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;error&quot;&gt;异常代码&lt;/param&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintError</span><span class="params">(<span class="keyword">int</span> error)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> buf[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="built_in">av_strerror</span>(error, buf, <span class="built_in"><span class="keyword">sizeof</span></span>(buf) - <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;FFmpeg Error Code:%d Info:%s\n&quot;</span>, error, buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 视频路径</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	string videoUrl_ = <span class="string">&quot;rtsp://localhost:8554/live&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 初始化 FFmpeg</span></span><br><span class="line">	<span class="built_in">av_register_all</span>();</span><br><span class="line">	<span class="built_in">avformat_network_init</span>();</span><br><span class="line"></span><br><span class="line">	AVFormatContext* inputContext = <span class="literal">NULL</span>;</span><br><span class="line">	inputContext = <span class="built_in">avformat_alloc_context</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置连接超时</span></span><br><span class="line">	AVDictionary* dict = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="keyword">if</span> (is_tcp_decode_)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 读取最大字节数 100KB</span></span><br><span class="line">		inputContext-&gt;probesize = <span class="number">100</span> * <span class="number">1024</span>;</span><br><span class="line">		<span class="comment">// 读取最大时长 200ms</span></span><br><span class="line">		inputContext-&gt;max_analyze_duration = <span class="number">200</span> * <span class="number">1000</span>;</span><br><span class="line">		<span class="comment">// 优先连接方式改为 TCP</span></span><br><span class="line">		<span class="built_in">av_dict_set</span>(&amp;dict, <span class="string">&quot;rtsp_transport&quot;</span>, <span class="string">&quot;tcp&quot;</span>, <span class="number">0</span>);</span><br><span class="line">		<span class="comment">// 扩大缓冲区，减少卡顿或花屏</span></span><br><span class="line">		<span class="built_in">av_dict_set</span>(&amp;dict, <span class="string">&quot;buffer_size&quot;</span>, <span class="string">&quot;1024000&quot;</span>, <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 设置超时断开</span></span><br><span class="line">	<span class="built_in">av_dict_set</span>(&amp;dict, <span class="string">&quot;stimeout&quot;</span>, <span class="string">&quot;2000000&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> ret = <span class="built_in">avformat_open_input</span>(&amp;inputContext, videoUrl_.<span class="built_in">c_str</span>(), <span class="literal">NULL</span>, &amp;dict);</span><br><span class="line">	<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">av_dict_free</span>(&amp;dict);</span><br><span class="line">		<span class="built_in">avformat_free_context</span>(inputContext);</span><br><span class="line">		<span class="built_in">PrintError</span>(ret);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ret = <span class="built_in">avformat_find_stream_info</span>(inputContext, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">PrintError</span>(ret);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 打印视频信息</span></span><br><span class="line">	<span class="built_in">av_dump_format</span>(inputContext, <span class="literal">NULL</span>, videoUrl_.<span class="built_in">c_str</span>(), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 打印音视频信息</span></span><br><span class="line">	AVStream* audioStream = <span class="literal">nullptr</span>;</span><br><span class="line">	AVStream* videoStream = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inputContext-&gt;nb_streams; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (inputContext-&gt;streams[i]-&gt;codecpar-&gt;codec_type == AVMEDIA_TYPE_AUDIO)</span><br><span class="line">		&#123;</span><br><span class="line">			audioStream = inputContext-&gt;streams[i];</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;===== 音频 =====&quot;</span> &lt;&lt; endl;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;sample_rate:&quot;</span> &lt;&lt; audioStream-&gt;codecpar-&gt;sample_rate &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (inputContext-&gt;streams[i]-&gt;codecpar-&gt;codec_type == AVMEDIA_TYPE_VIDEO)</span><br><span class="line">		&#123;</span><br><span class="line">			videoStream = inputContext-&gt;streams[i];</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;===== 视频 =====&quot;</span> &lt;&lt; endl;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;width:&quot;</span> &lt;&lt; videoStream-&gt;codecpar-&gt;width &lt;&lt; <span class="string">&quot; height:&quot;</span> &lt;&lt; videoStream-&gt;codecpar-&gt;height &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 解码视频数据</span></span><br><span class="line">	<span class="keyword">int</span> videoIndex = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inputContext-&gt;nb_streams; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (inputContext-&gt;streams[i]-&gt;codec-&gt;codec_type == AVMEDIA_TYPE_VIDEO)</span><br><span class="line">		&#123;</span><br><span class="line">			videoIndex = i;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (videoIndex == <span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Didn&#x27;t find a video stream\n&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	AVCodecContext* pCodecCtx;</span><br><span class="line">	AVCodec* pCodec;</span><br><span class="line">	pCodecCtx = inputContext-&gt;streams[videoIndex]-&gt;codec;</span><br><span class="line">	pCodec = <span class="built_in">avcodec_find_decoder</span>(pCodecCtx-&gt;codec_id);</span><br><span class="line">	<span class="keyword">if</span> (pCodec == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Codec not found.\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (is_thread_soft_decoding_)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 启用多线程软解码</span></span><br><span class="line">		pCodecCtx-&gt;thread_count = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (is_hard_decoding_)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 启用硬解码</span></span><br><span class="line">		AVBufferRef* hw_ctx = <span class="literal">nullptr</span>;</span><br><span class="line">		<span class="built_in">av_hwdevice_ctx_create</span>(&amp;hw_ctx, (AVHWDeviceType)hw_type_, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">		pCodecCtx-&gt;hw_device_ctx = <span class="built_in">av_buffer_ref</span>(hw_ctx);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">avcodec_open2</span>(pCodecCtx, pCodec, <span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Could not open codec.\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 解码帧</span></span><br><span class="line">	AVPacket* packet;</span><br><span class="line">	packet = (AVPacket*)<span class="built_in">av_malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(AVPacket));</span><br><span class="line">	AVFrame* frame, * hw_frame;</span><br><span class="line">	frame = <span class="built_in">av_frame_alloc</span>();</span><br><span class="line">	hw_frame = <span class="built_in">av_frame_alloc</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">clock_t</span> startSendTimeOut, stopSendTimeOut;</span><br><span class="line">		startSendTimeOut = <span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line">		ret = <span class="built_in">av_read_frame</span>(inputContext, packet);</span><br><span class="line">		<span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;Read Frame Error. Error Code:&quot;</span> &lt;&lt; ret &lt;&lt; endl;</span><br><span class="line">			<span class="built_in">PrintError</span>(ret);</span><br><span class="line">			<span class="comment">// 释放 AVPacket</span></span><br><span class="line">			<span class="built_in">av_free_packet</span>(packet);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!packet || packet-&gt;stream_index != videoStream-&gt;index)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// 判断是否是视频流</span></span><br><span class="line">			<span class="built_in">av_packet_free</span>(&amp;packet);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 计算 packet 帧间隔，用于打开文件时控制 FPS</span></span><br><span class="line">		<span class="keyword">auto</span> dur = <span class="built_in">av_rescale_q</span>(packet-&gt;duration, inputContext-&gt;streams[packet-&gt;stream_index]-&gt;time_base, &#123; <span class="number">1</span>,<span class="number">1000</span> &#125;);</span><br><span class="line"></span><br><span class="line">		ret = <span class="built_in">avcodec_send_packet</span>(pCodecCtx, packet);</span><br><span class="line">		<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;Send Packet Error. Error Code:&quot;</span> &lt;&lt; ret &lt;&lt; endl;</span><br><span class="line">			<span class="built_in">PrintError</span>(ret);</span><br><span class="line">			<span class="comment">// 释放 AVPacket</span></span><br><span class="line">			<span class="built_in">av_free_packet</span>(packet);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		stopSendTimeOut = <span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (ret &gt;= <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">clock_t</span> startReceiveTimeOut;</span><br><span class="line">			startReceiveTimeOut = <span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (frame == <span class="literal">nullptr</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				frame = <span class="built_in">av_frame_alloc</span>();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">auto</span> ret = <span class="built_in">avcodec_receive_frame</span>(pCodecCtx, frame);</span><br><span class="line">			<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">av_frame_free</span>(&amp;frame);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (ret == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">auto</span> pframe = frame;</span><br><span class="line">				<span class="keyword">if</span> (pCodecCtx-&gt;hw_device_ctx)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="comment">// 硬解码转换 显存 =&gt; 内存</span></span><br><span class="line">					<span class="built_in">av_hwframe_transfer_data</span>(hw_frame, frame, <span class="number">0</span>);</span><br><span class="line">					pframe = hw_frame;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// <span class="doctag">TODO:</span> 可使用 SDL 或 OpenCV 显示视频</span></span><br><span class="line">				<span class="comment">// 打印每一帧数据 AVFrame 编码类型</span></span><br><span class="line">				cout &lt;&lt; pframe-&gt;format &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// 控制 FPS</span></span><br><span class="line">				<span class="keyword">if</span> (is_control_fps_)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (dur &lt; <span class="number">40</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						dur = <span class="number">40</span>;</span><br><span class="line">					&#125;</span><br><span class="line"></span><br><span class="line">					<span class="keyword">auto</span> vSendTimeOut = stopSendTimeOut - startSendTimeOut;</span><br><span class="line">					<span class="keyword">auto</span> vReceiveTimeOut = <span class="built_in">clock</span>() - startReceiveTimeOut;</span><br><span class="line">					<span class="keyword">auto</span> vTimeOut = vSendTimeOut = vReceiveTimeOut;</span><br><span class="line">					<span class="keyword">if</span> (vTimeOut &gt;= <span class="number">0</span> &amp;&amp; vTimeOut &lt; dur)</span><br><span class="line">					&#123;</span><br><span class="line">						dur -= vTimeOut;</span><br><span class="line"></span><br><span class="line">						<span class="built_in">timeBeginPeriod</span>(<span class="number">1</span>);</span><br><span class="line">						this_thread::<span class="built_in">sleep_for</span>(<span class="built_in">milliseconds</span>(dur));</span><br><span class="line">						<span class="built_in">timeEndPeriod</span>(<span class="number">1</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 释放 AVFrame</span></span><br><span class="line">			<span class="built_in">av_frame_free</span>(&amp;frame);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 释放 AVPacket</span></span><br><span class="line">		<span class="built_in">av_free_packet</span>(packet);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 释放 AVFormatContext</span></span><br><span class="line">	<span class="built_in">avformat_close_input</span>(&amp;inputContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><h5 id="TCP-解码"><a href="#TCP-解码" class="headerlink" title="TCP 解码"></a>TCP 解码</h5><p>FFmpeg 默认使用 UDP 解码视频，可设置强制使用 TCP 解码，传输更稳定。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string videoUrl_ = <span class="string">&quot;&quot;</span>;</span><br><span class="line">AVFormatContext* inputContext = <span class="literal">NULL</span>;</span><br><span class="line">AVDictionary* dict = <span class="literal">nullptr</span>;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 读取最大字节数 100KB</span></span><br><span class="line">inputContext-&gt;probesize = <span class="number">100</span> * <span class="number">1024</span>;</span><br><span class="line"><span class="comment">// 读取最大时长 200ms</span></span><br><span class="line">inputContext-&gt;max_analyze_duration = <span class="number">200</span> * <span class="number">1000</span>;</span><br><span class="line"><span class="comment">// 优先连接方式改为 TCP</span></span><br><span class="line"><span class="built_in">av_dict_set</span>(&amp;dict, <span class="string">&quot;rtsp_transport&quot;</span>, <span class="string">&quot;tcp&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 扩大缓冲区，减少卡顿或花屏</span></span><br><span class="line"><span class="built_in">av_dict_set</span>(&amp;dict, <span class="string">&quot;buffer_size&quot;</span>, <span class="string">&quot;1024000&quot;</span>, <span class="number">0</span>);</span><br><span class="line">...</span><br><span class="line"><span class="keyword">int</span> ret = <span class="built_in">avformat_open_input</span>(&amp;inputContext, videoUrl_.<span class="built_in">c_str</span>(), <span class="literal">NULL</span>, &amp;dict);</span><br></pre></td></tr></table></figure></p>
<h5 id="多线程软解码（CPU-YUV420）"><a href="#多线程软解码（CPU-YUV420）" class="headerlink" title="多线程软解码（CPU YUV420）"></a>多线程软解码（CPU YUV420）</h5><p>FFmpeg 软解码默认使用单线程解码，可设置为多线程解码，速度更快。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">AVCodecContext* pCodecCtx;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 启用多线程软解码</span></span><br><span class="line"><span class="comment">// 设置 CPU 线程数（0 - 16），默认值为单线程 1，值为 0 时自动检测</span></span><br><span class="line">pCodecCtx-&gt;thread_count = <span class="number">0</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<h5 id="硬解码（GPU-NV12）"><a href="#硬解码（GPU-NV12）" class="headerlink" title="硬解码（GPU NV12）"></a>硬解码（GPU NV12）</h5><p>FFmpeg 默认使用软解码（CPU），可设置以硬解码（GPU）的方式解码。</p>
<h6 id="获取支持的硬解码类型"><a href="#获取支持的硬解码类型" class="headerlink" title="获取支持的硬解码类型"></a>获取支持的硬解码类型</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">AVCodecID codec_id = AV_CODEC_ID_H264;</span><br><span class="line"><span class="keyword">auto</span> codec = <span class="built_in">avcodec_find_decoder</span>(codec_id);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;; i++) &#123;</span><br><span class="line">    <span class="keyword">auto</span> config = <span class="built_in">avcodec_get_hw_config</span>(codec, i);</span><br><span class="line">    <span class="keyword">if</span> (!config)<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> (config-&gt;device_type) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">av_hwdevice_get_type_name</span>(config-&gt;device_type) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当前机器测试的支持环境有<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">AVHWDeviceType</span> &#123;</span></span><br><span class="line">    AV_HWDEVICE_TYPE_CUDA,</span><br><span class="line">    AV_HWDEVICE_TYPE_DXVA2,</span><br><span class="line">    AV_HWDEVICE_TYPE_D3D11VA</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>也可以使用命令行查询<br><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">:: 显示所有可用的硬件加速器</span><br><span class="line">ffmpeg -hwaccels</span><br></pre></td></tr></table></figure></p>
<h6 id="启用硬解码"><a href="#启用硬解码" class="headerlink" title="启用硬解码"></a>启用硬解码</h6><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">AVCodecContext* pCodecCtx;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 启用硬解码 例如：CUDA</span></span><br><span class="line">AVBufferRef* hw_ctx = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="built_in">av_hwdevice_ctx_create</span>(&amp;hw_ctx, (AVHWDeviceType)AV_HWDEVICE_TYPE_CUDA, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">pCodecCtx-&gt;hw_device_ctx = <span class="built_in">av_buffer_ref</span>(hw_ctx);</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h6 id="硬解码转换"><a href="#硬解码转换" class="headerlink" title="硬解码转换"></a>硬解码转换</h6><ul>
<li><p>使用硬解码返回的数据类型为显存类型</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">AVPixelFormat</span> &#123;</span></span><br><span class="line">    AV_PIX_FMT_CUDA, <span class="comment">// 119</span></span><br><span class="line">    AV_PIX_FMT_DXVA2_VLD, <span class="comment">// 53</span></span><br><span class="line">    AV_PIX_FMT_D3D11 <span class="comment">// 174</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>需要转换为内存类型</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">AVFrame* frame, * hw_frame;</span><br><span class="line">frame = <span class="built_in">av_frame_alloc</span>();</span><br><span class="line">hw_frame = <span class="built_in">av_frame_alloc</span>();</span><br><span class="line">...</span><br><span class="line"><span class="keyword">auto</span> pframe = frame;</span><br><span class="line"><span class="keyword">if</span> (pCodecCtx-&gt;hw_device_ctx)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 硬解码转换 显存 =&gt; 内存</span></span><br><span class="line">	<span class="built_in">av_hwframe_transfer_data</span>(hw_frame, frame, <span class="number">0</span>);</span><br><span class="line">	pframe = hw_frame;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印每一帧数据 AVFrame 编码类型</span></span><br><span class="line">cout &lt;&lt; pframe-&gt;format &lt;&lt; endl;</span><br></pre></td></tr></table></figure>
</li>
<li><p>转换后数据类型为内存类型 NV12</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">AVPixelFormat</span> &#123;</span></span><br><span class="line">    AV_PIX_FMT_NV12 <span class="comment">// 23</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="控制-FPS"><a href="#控制-FPS" class="headerlink" title="控制 FPS"></a>控制 FPS</h5><p>在读取文件视频时，为了转码则忽略，如果是为了显示视频，需要控制帧率，按照视频播放帧率解码渲染，否则会以解码速度加速显示，在读取 RTSP/RTMP 等流视频时则忽略，否则会造成花屏。<br>C++11 中的 <a href="https://docs.microsoft.com/zh-cn/cpp/standard-library/thread-functions?view=msvc-170&amp;redirectedfrom=MSDN&amp;f1url=%3FappId%3DDev16IDEF1%26l%3DZH-CN%26k%3Dk">this_thread::sleep_for</a> 不够精准，使用 <a href="https://docs.microsoft.com/zh-cn/windows/win32/api/timeapi/nf-timeapi-timebeginperiod?f1url=%3FappId%3DDev16IDEF1%26l%3DZH-CN%26k%3Dk">timeBeginPeriod</a> 与 <a href="https://docs.microsoft.com/en-us/previous-versions/ms713415(v=vs.85">timeEndPeriod</a>) 改变系统计时器的分辨率的方式可以让 sleep 更加精准。此功能会影响全局的 Windows 设置，所以必须将每次对 timeBeginPeriod 的调用与对 timeEndPeriod 的调用相匹配，并在两个调用中指定相同的最小分辨率。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> dur = 帧间隔（毫秒） - 解码耗时（毫秒）;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">timeBeginPeriod</span>(<span class="number">1</span>);</span><br><span class="line">    this_thread::<span class="built_in">sleep_for</span>(<span class="built_in">milliseconds</span>(dur));</span><br><span class="line">    <span class="built_in">timeEndPeriod</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>FFmpeg 转发推流到 rtsp/rtmp</title>
    <url>/blog/2022/07/11/cpp-FFmpegPushCurrent/</url>
    <content><![CDATA[<h3 id="使用-FFmpeg-以代码的方式分别转发推流到-rtsp-rtmp"><a href="#使用-FFmpeg-以代码的方式分别转发推流到-rtsp-rtmp" class="headerlink" title="使用 FFmpeg 以代码的方式分别转发推流到 rtsp/rtmp"></a>使用 FFmpeg 以代码的方式分别转发推流到 rtsp/rtmp</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>转发任意支持的格式，推流到 rtsp/rtmp 的最简代码，数据源为文件的话需要额外添加 FPS 控制。<br>使用流媒体服务为： <a href="https://github.com/aler9/rtsp-simple-server">rtsp-simple-server</a><br><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">:: rtsp-simple-server 提供的推流命令</span><br><span class="line"></span><br><span class="line">:: 推流到 RTSP</span><br><span class="line">ffmpeg -re -stream_loop -<span class="number">1</span> -i C:\Video.mp4 -c <span class="built_in">copy</span> -f rtsp -rtsp_transport tcp rtsp://localhost:<span class="number">8554</span>/live</span><br><span class="line"></span><br><span class="line">:: 推流到 RTMP</span><br><span class="line">ffmpeg -re -stream_loop -<span class="number">1</span> -i C:\Video.mp4 -c <span class="built_in">copy</span> -f flv rtmp://localhost/live</span><br></pre></td></tr></table></figure></p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">av_packet_rescale_ts</span><span class="params">(AVPacket* pkt, AVRational src_tb, AVRational dst_tb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (pkt-&gt;pts != AV_NOPTS_VALUE)</span><br><span class="line">		pkt-&gt;pts = <span class="built_in">av_rescale_q</span>(pkt-&gt;pts, src_tb, dst_tb);</span><br><span class="line">	<span class="keyword">if</span> (pkt-&gt;dts != AV_NOPTS_VALUE)</span><br><span class="line">		pkt-&gt;dts = <span class="built_in">av_rescale_q</span>(pkt-&gt;dts, src_tb, dst_tb);</span><br><span class="line">	<span class="keyword">if</span> (pkt-&gt;duration &gt; <span class="number">0</span>)</span><br><span class="line">		pkt-&gt;duration = <span class="built_in">av_rescale_q</span>(pkt-&gt;duration, src_tb, dst_tb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 打印 FFmpeg 错误信息</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;error&quot;&gt;异常代码&lt;/param&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintError</span><span class="params">(<span class="keyword">int</span> error)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> buf[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="built_in">av_strerror</span>(error, buf, <span class="built_in"><span class="keyword">sizeof</span></span>(buf) - <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;FFmpeg Error Code:%d Info:%s\n&quot;</span>, error, buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">av_register_all</span>();</span><br><span class="line">	<span class="built_in">avformat_network_init</span>();</span><br><span class="line"></span><br><span class="line">	string input = <span class="string">&quot;rtsp://localhost:8554/live&quot;</span>;</span><br><span class="line">	<span class="comment">//string output = &quot;rtsp://localhost:8554/live2&quot;;</span></span><br><span class="line">	string output = <span class="string">&quot;rtmp://localhost/live2&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建输入流连接</span></span><br><span class="line">	AVFormatContext* inputContext = <span class="built_in">avformat_alloc_context</span>();</span><br><span class="line">	<span class="keyword">int</span> ret = <span class="built_in">avformat_open_input</span>(&amp;inputContext, input.<span class="built_in">c_str</span>(), <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;Input file open input failed\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>  ret;</span><br><span class="line">	&#125;</span><br><span class="line">	ret = <span class="built_in">avformat_find_stream_info</span>(inputContext, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;Find input file stream inform failed\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_INFO, <span class="string">&quot;Open input file  %s success\n&quot;</span>, input.<span class="built_in">c_str</span>());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建输出流连接</span></span><br><span class="line">	AVFormatContext* outputContext;</span><br><span class="line">	string rtspJudgment = <span class="string">&quot;rtsp&quot;</span>;</span><br><span class="line">	string rtmpJudgment = <span class="string">&quot;rtmp&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (output.<span class="built_in">rfind</span>(rtspJudgment, <span class="number">0</span>) == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 初始化 rtsp 连接</span></span><br><span class="line">		ret = <span class="built_in">avformat_alloc_output_context2</span>(&amp;outputContext, <span class="literal">NULL</span>, <span class="string">&quot;rtsp&quot;</span>, output.<span class="built_in">c_str</span>());</span><br><span class="line">		<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;open output context failed\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (output.<span class="built_in">rfind</span>(rtmpJudgment, <span class="number">0</span>) == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 初始化 rtmp 连接</span></span><br><span class="line">		<span class="keyword">int</span> ret = <span class="built_in">avformat_alloc_output_context2</span>(&amp;outputContext, <span class="literal">nullptr</span>, <span class="string">&quot;flv&quot;</span>, output.<span class="built_in">c_str</span>());</span><br><span class="line">		<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;open output context failed\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		ret = <span class="built_in">avio_open2</span>(&amp;outputContext-&gt;pb, output.<span class="built_in">c_str</span>(), AVIO_FLAG_READ_WRITE, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">		<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">PrintError</span>(ret);</span><br><span class="line">			<span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;open avio failed&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inputContext-&gt;nb_streams; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		AVStream* stream = <span class="built_in">avformat_new_stream</span>(outputContext, inputContext-&gt;streams[i]-&gt;codec-&gt;codec);</span><br><span class="line">		ret = <span class="built_in">avcodec_copy_context</span>(stream-&gt;codec, inputContext-&gt;streams[i]-&gt;codec);</span><br><span class="line">		<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;copy coddec context failed&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ret = <span class="built_in">avformat_write_header</span>(outputContext, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;format write header failed&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_INFO, <span class="string">&quot; Open output file success %s\n&quot;</span>, output.<span class="built_in">c_str</span>());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 转发数据流</span></span><br><span class="line">	AVPacket* packet = (AVPacket*)<span class="built_in">av_malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(AVPacket));</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		ret = <span class="built_in">av_read_frame</span>(inputContext, packet);</span><br><span class="line">		<span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="built_in">av_free_packet</span>(packet);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">auto</span> inputStream = inputContext-&gt;streams[packet-&gt;stream_index];</span><br><span class="line">		<span class="keyword">auto</span> outputStream = outputContext-&gt;streams[packet-&gt;stream_index];</span><br><span class="line">		<span class="built_in">av_packet_rescale_ts</span>(packet, inputStream-&gt;time_base, outputStream-&gt;time_base);</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">av_interleaved_write_frame</span>(outputContext, packet) &gt;= <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;WritePacket Success!&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;WritePacket failed! ret = &quot;</span> &lt;&lt; ret &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">av_free_packet</span>(packet);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>C#/C++ 混合编程</title>
    <url>/blog/2018/08/01/cpp-HybridCSharp/</url>
    <content><![CDATA[<h3 id="使用C-开发算法（全景拼接、人脸识别、超分辨率重建）-使用C-开发服务端业务逻辑和UI"><a href="#使用C-开发算法（全景拼接、人脸识别、超分辨率重建）-使用C-开发服务端业务逻辑和UI" class="headerlink" title="使用C++开发算法（全景拼接、人脸识别、超分辨率重建）/使用C#开发服务端业务逻辑和UI"></a>使用C++开发算法（全景拼接、人脸识别、超分辨率重建）/使用C#开发服务端业务逻辑和UI</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>现工作中作由于 C++ 的 UI（<a href="https://baike.baidu.com/item/MFC/2530850?fr=aladdin">MFC</a>、<a href="https://baike.baidu.com/item/qt">QT</a>）开发界面比较难看，定制用户控件复杂且样式一般。而 C# 又不擅长于开发算法逻辑，效率不如 C++。所以现在大部分公司都会选用 C#/C++ 混合编程。</p>
<h4 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h4><p>使用 C# 做界面要比 C++ 高效的多，但是存在算法逻辑的时候由于性能问题不得不把部分模块交给 C++ 处理，C++ 可以使用高效的栈内存对象（CCalc），而 C# 所有对象只能放在托管堆中。测试 C# 调用 C++ 类库使用<a href="https://baike.baidu.com/item/%E6%89%98%E7%AE%A1/3967693">托管</a>方式性能得到了一定程度的提升，但比起单纯的 C++ 项目，还是差了很多；测试 C# 调用 C++ 类库使用 <a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.dllimportattribute?redirectedfrom=MSDN&amp;view=netframework-4.8">DllImport</a> <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/">Attribute</a> 混合方式由<a href="https://baike.baidu.com/item/%E9%9D%9E%E6%89%98%E7%AE%A1/7967564">非托管动态链接库</a>效率与单独运行 C++ 相差无几。</p>
<h4 id="简单基础参数传递"><a href="#简单基础参数传递" class="headerlink" title="简单基础参数传递"></a>简单基础参数传递</h4><p>例子：<br>1.最基础的加法运算；<br>2.传入图片地址，通过 OpenCV 处理后返回图片地址；<br>3.传入图片地址，通过 OpenCV 把彩色图像转换为灰度图像，然后返回给 C#；<br>方法声明为 C++ 方法时，<a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.dllimportattribute?redirectedfrom=MSDN&amp;view=netframework-4.8">DllImport</a> 引用被不明方法加密，调用时需使用Depends工具拷贝对应方法的Function名字粘贴到EntryPoint。详情查看<a href="/blog/2018/08/01/software-Depends/">Depends 使用介绍</a></p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><h5 id="h"><a href="#h" class="headerlink" title=".h"></a>.h</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> TEST_RXPORTS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Test_API __declspec(dllexport)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Test_API __declspec(dllimport)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// TEST_RXPORTS</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">Test_API <span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> Test_API <span class="keyword">char</span>* <span class="title">filePath</span><span class="params">(<span class="keyword">char</span>* filePath)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> Test_API IplImage* <span class="title">Color2Gray</span><span class="params">(<span class="keyword">char</span>* filePath)</span></span>;</span><br></pre></td></tr></table></figure>
<h5 id="cpp"><a href="#cpp" class="headerlink" title=".cpp"></a>.cpp</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">filePath</span><span class="params">(<span class="keyword">char</span>* filePath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span>* resurlt;</span><br><span class="line">	resurlt = filePath;</span><br><span class="line">	IplImage* img = <span class="built_in">cvLoadImage</span>(filePath);</span><br><span class="line">	<span class="comment">//用原图像指针创建新图像</span></span><br><span class="line">	IplImage* dst = <span class="built_in">cvCreateImage</span>(<span class="built_in">cvGetSize</span>(img), IPL_DEPTH_8U, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == dst)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cvCvtColor</span>(img, dst, CV_BGR2GRAY);</span><br><span class="line">	<span class="keyword">return</span> resurlt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">IplImage* <span class="title">Color2Gray</span><span class="params">(<span class="keyword">char</span>* filePath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	IplImage* img = <span class="built_in">cvLoadImage</span>(filePath);</span><br><span class="line">	<span class="comment">//用原图像指针创建新图像</span></span><br><span class="line">	IplImage* dst = <span class="built_in">cvCreateImage</span>(<span class="built_in">cvGetSize</span>(img), IPL_DEPTH_8U, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == dst)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cvCvtColor</span>(img, dst, CV_BGR2GRAY);</span><br><span class="line">	<span class="keyword">return</span> dst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="cs"><a href="#cs" class="headerlink" title=".cs"></a>.cs</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">DllImport(@<span class="meta-string">&quot;CPP_Demo.dll&quot;</span>, EntryPoint = <span class="meta-string">&quot;Add&quot;</span>, CallingConvention = CallingConvention.Cdecl)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">int</span> <span class="title">Add</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">DllImport(@<span class="meta-string">&quot;CPP_Demo.dll&quot;</span>, EntryPoint = <span class="meta-string">&quot;?filePath@@YAPEADPEAD@Z&quot;</span>, CallingConvention = CallingConvention.Cdecl)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">filePath</span>(<span class="params">IntPtr filePath</span>)</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">DllImport(@<span class="meta-string">&quot;CPP_Demo.dll&quot;</span>, EntryPoint = <span class="meta-string">&quot;?Color2Gray@@YAPEAU_IplImage@@PEAD@Z&quot;</span>, CallingConvention = CallingConvention.Cdecl)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">Color2Gray</span>(<span class="params">IntPtr filePath</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载基础图片</span></span><br><span class="line">image1.Source = <span class="keyword">new</span> BitmapImage(<span class="keyword">new</span> Uri(<span class="string">@&quot;./image/HUA1.JPG&quot;</span>, UriKind.Relative));</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试1</span></span><br><span class="line"><span class="built_in">int</span> iAdd = Add(<span class="number">8</span>, <span class="number">12</span>);</span><br><span class="line"><span class="comment">//测试2</span></span><br><span class="line"><span class="built_in">string</span> strFile = Marshal.PtrToStringAnsi(filePath(Marshal.StringToHGlobalAnsi(<span class="string">@&quot;F:\Demos\C#调用C++类库(OpenCV)\CSharp_Demo\CSharp_Demo\Image\HUA1.JPG&quot;</span>)));</span><br><span class="line"><span class="comment">//测试3</span></span><br><span class="line">IntPtr imageGray = Color2Gray(Marshal.StringToHGlobalAnsi(<span class="string">@&quot;F:\Demos\C#调用C++类库(OpenCV)\CSharp_Demo\CSharp_Demo\Image\HUA1.JPG&quot;</span>));</span><br><span class="line">MIplImage lplimage = (Emgu.CV.Structure.MIplImage)System.Runtime.InteropServices.Marshal.PtrToStructure(imageGray, <span class="keyword">typeof</span>(Emgu.CV.Structure.MIplImage));</span><br><span class="line">Image&lt;Gray, Byte&gt; dst = <span class="keyword">new</span> Image&lt;Gray, Byte&gt;(lplimage.Width, lplimage.Height, lplimage.WidthStep, lplimage.ImageData);</span><br><span class="line">image2.Source = ChangeBitmapToImageSource(dst.ToBitmap());</span><br></pre></td></tr></table></figure>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><h5 id="引用方法乱码"><a href="#引用方法乱码" class="headerlink" title="引用方法乱码"></a>引用方法乱码</h5><p>使用 C++ 声明方法会导致引用是乱码，引用名称可以通过 <a href="/blog/2018/08/01/software-Depends/">Depends</a> 查询。改为 C 声明后可正常引用方法，建议所有方法使用 C 声明，例如使用 C++ 需要引用方法：”?Add@@YAHHH@Z”，而使用 C 声明只需引用：”Add”。</p>
<h5 id="报错：无法加载-DLL“xxx-dll”-找不到指定的模块"><a href="#报错：无法加载-DLL“xxx-dll”-找不到指定的模块" class="headerlink" title="报错：无法加载 DLL“xxx.dll”: 找不到指定的模块"></a>报错：无法加载 DLL“xxx.dll”: 找不到指定的模块</h5><p>推荐使用 <a href="/blog/2018/08/01/software-Depends/">Depends</a> 工具检测缺少引用类库</p>
<h5 id="报错：调用-Dll-“试图加载格式不正确的程序。-异常来自-HRESULT-0x8007000B"><a href="#报错：调用-Dll-“试图加载格式不正确的程序。-异常来自-HRESULT-0x8007000B" class="headerlink" title="报错：调用 Dll “试图加载格式不正确的程序。(异常来自 HRESULT:0x8007000B)"></a>报错：调用 Dll “试图加载格式不正确的程序。(异常来自 HRESULT:0x8007000B)</h5><p>调用64位类库需要把项目改为64位<br>桌面端修改：属性 → 生成 → 目标平台设为：”Any Cpu”，取消勾选”首选32位”。<br>Web 端修改：工具 → 选项 → 项目和解决方案 → Web 项目 → 勾选：”对网站和项目使用 IIS Express 的 64 位版”</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>c++</tag>
        <tag>depends</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV 计算最大内接矩形</title>
    <url>/blog/2021/10/22/cpp-InscribedRectangle/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/cpp-InscribedRectangle/441036.jpg"/></p>
<span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>使用 OpenCV 计算任意形状图像内最大矩形，最大内接矩形。</p>
<h3 id="计算最大内接矩形"><a href="#计算最大内接矩形" class="headerlink" title="计算最大内接矩形"></a>计算最大内接矩形</h3><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 获取有效像素百分比</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;panomask&quot;&gt;蒙版图像&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;IsRow&quot;&gt;是否是行判断&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;Number&quot;&gt;起始坐标&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;StartPixel&quot;&gt;起始像素&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;StopPixel&quot;&gt;中止像素&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;空像素百分比&lt;/returns&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">GetEffectivePixel</span><span class="params">(Mat panomask, <span class="keyword">bool</span> IsRow, <span class="keyword">int</span> Number, <span class="keyword">int</span> StartPixel, <span class="keyword">int</span> StopPixel)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> invalidNumber = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (IsRow)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 行裁切判断</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = StartPixel; i &lt; StopPixel; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			Vec3b data = panomask.at&lt;Vec3b&gt;(Number, i);</span><br><span class="line">			<span class="keyword">int</span> B = data[<span class="number">0</span>];</span><br><span class="line">			<span class="keyword">int</span> G = data[<span class="number">1</span>];</span><br><span class="line">			<span class="keyword">int</span> R = data[<span class="number">2</span>];</span><br><span class="line">			<span class="keyword">if</span> (B &lt;= <span class="number">0</span> &amp;&amp; G &lt;= <span class="number">0</span> &amp;&amp; R &lt;= <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				invalidNumber++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 列裁切判断</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = StartPixel; i &lt; StopPixel; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			Vec3b data = panomask.at&lt;Vec3b&gt;(i, Number);</span><br><span class="line">			<span class="keyword">int</span> B = data[<span class="number">0</span>];</span><br><span class="line">			<span class="keyword">int</span> G = data[<span class="number">1</span>];</span><br><span class="line">			<span class="keyword">int</span> R = data[<span class="number">2</span>];</span><br><span class="line">			<span class="keyword">if</span> (B &lt;= <span class="number">0</span> &amp;&amp; G &lt;= <span class="number">0</span> &amp;&amp; R &lt;= <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				invalidNumber++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> (<span class="keyword">double</span>)invalidNumber / ((<span class="keyword">double</span>)StopPixel - (<span class="keyword">double</span>)StartPixel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 计算裁切范围</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;panomask&quot;&gt;蒙版图像&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;裁切范围&lt;/returns&gt;</span></span><br><span class="line"><span class="function">Rect <span class="title">CalcCuttingRange</span><span class="params">(Mat panomask)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Mat panomaskRGB;</span><br><span class="line">	panomask.<span class="built_in">convertTo</span>(panomaskRGB, CV_8U);</span><br><span class="line">	<span class="comment">// 裁切前图像宽高</span></span><br><span class="line">	<span class="keyword">int</span> height = panomaskRGB.rows;</span><br><span class="line">	<span class="keyword">int</span> width = panomaskRGB.cols;</span><br><span class="line">	<span class="comment">// 上下左右边距</span></span><br><span class="line">	<span class="keyword">int</span> top = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> buttom = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">// 当前边距百分比</span></span><br><span class="line">	<span class="keyword">double</span> topPercent = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">double</span> buttomPercent = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">double</span> leftPercent = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">double</span> rightPercent = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (topPercent &gt; <span class="number">0</span> || buttomPercent &gt; <span class="number">0</span> || leftPercent &gt; <span class="number">0</span> || rightPercent &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (topPercent &gt; <span class="number">0</span> &amp;&amp; topPercent &gt;= buttomPercent &amp;&amp; topPercent &gt;= leftPercent &amp;&amp; topPercent &gt;= rightPercent)</span><br><span class="line">		&#123;</span><br><span class="line">			top++;</span><br><span class="line">			topPercent = <span class="built_in">GetEffectivePixel</span>(panomaskRGB, <span class="literal">true</span>, top, left, width - right);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (buttomPercent &gt; <span class="number">0</span> &amp;&amp; buttomPercent &gt;= topPercent &amp;&amp; buttomPercent &gt;= leftPercent &amp;&amp; buttomPercent &gt;= rightPercent)</span><br><span class="line">		&#123;</span><br><span class="line">			buttom++;</span><br><span class="line">			buttomPercent = <span class="built_in">GetEffectivePixel</span>(panomaskRGB, <span class="literal">true</span>, height - buttom, left, width - right);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (leftPercent &gt; <span class="number">0</span> &amp;&amp; leftPercent &gt;= topPercent &amp;&amp; leftPercent &gt;= buttomPercent &amp;&amp; leftPercent &gt;= rightPercent)</span><br><span class="line">		&#123;</span><br><span class="line">			left++;</span><br><span class="line">			leftPercent = <span class="built_in">GetEffectivePixel</span>(panomaskRGB, <span class="literal">false</span>, left, top, height - buttom);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (rightPercent &gt; <span class="number">0</span> &amp;&amp; rightPercent &gt;= topPercent &amp;&amp; rightPercent &gt;= buttomPercent &amp;&amp; rightPercent &gt;= leftPercent)</span><br><span class="line">		&#123;</span><br><span class="line">			right++;</span><br><span class="line">			rightPercent = <span class="built_in">GetEffectivePixel</span>(panomaskRGB, <span class="literal">false</span>, width - right, top, height - buttom);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Rect rect;</span><br><span class="line">	rect.x = left;</span><br><span class="line">	rect.y = top;</span><br><span class="line">	rect.height = height - (top + buttom);</span><br><span class="line">	rect.width = width - (left + right);</span><br><span class="line">	<span class="keyword">return</span> rect;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Mat img_mask = <span class="built_in">imread</span>(<span class="string">&quot;mask.jpg&quot;</span>);</span><br><span class="line">	<span class="keyword">auto</span> img_rect = <span class="built_in">CalcCuttingRange</span>(img_mask);</span><br><span class="line">	<span class="keyword">auto</span> img_cutting = <span class="built_in">img_mask</span>(img_rect);</span><br><span class="line">	<span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="计算结果"><a href="#计算结果" class="headerlink" title="计算结果"></a>计算结果</h4><p><img src="https://sadness96.github.io/images/blog/cpp-InscribedRectangle/rect.jpg"/></p>
<h4 id="计算过程"><a href="#计算过程" class="headerlink" title="计算过程"></a>计算过程</h4><p><img src="https://sadness96.github.io/images/blog/cpp-InscribedRectangle/CalcCuttingRange.gif"/></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>c++</tag>
        <tag>depends</tag>
      </tags>
  </entry>
  <entry>
    <title>获取显卡状态信息</title>
    <url>/blog/2022/10/08/cpp-NVML/</url>
    <content><![CDATA[<h3 id="使用-NVIDIA-管理库-NVML-获取-GPU-利用率"><a href="#使用-NVIDIA-管理库-NVML-获取-GPU-利用率" class="headerlink" title="使用 NVIDIA 管理库 NVML 获取 GPU 利用率"></a>使用 NVIDIA 管理库 NVML 获取 GPU 利用率</h3><span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://developer.nvidia.com/nvidia-management-library-nvml">NVIDIA Management Library (NVML)</a> 随 CUDA 一起发布，是一个基于 C 代码的 API，用于兼用和管理 NVIDIA GPU 设备的各种状态。简单的使用获取显示显卡利用率。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h4><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">:: 查询显卡使用情况信息</span><br><span class="line">nvidia-smi</span><br><span class="line">:: 查询可用设备</span><br><span class="line">nvidia-smi -L</span><br></pre></td></tr></table></figure>
<h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;nvml.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;nvml.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	nvmlReturn_t result;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> device_count, i;</span><br><span class="line">	<span class="comment">// First initialize NVML library</span></span><br><span class="line">	result = <span class="built_in">nvmlInit</span>();</span><br><span class="line"></span><br><span class="line">	result = <span class="built_in">nvmlDeviceGetCount</span>(&amp;device_count);</span><br><span class="line">	<span class="keyword">if</span> (NVML_SUCCESS != result)</span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;Failed to query device count: &quot;</span> &lt;&lt; <span class="built_in">nvmlErrorString</span>(result);</span><br><span class="line">	&#125;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;Found&quot;</span> &lt;&lt; device_count &lt;&lt; <span class="string">&quot; device&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;Listing devices:&quot;</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; device_count; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			nvmlDevice_t device;</span><br><span class="line">			result = <span class="built_in">nvmlDeviceGetHandleByIndex</span>(i, &amp;device);</span><br><span class="line">			<span class="keyword">if</span> (NVML_SUCCESS != result) &#123;</span><br><span class="line">				std::cout &lt;&lt; <span class="string">&quot;get device failed &quot;</span> &lt;&lt; endl;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">char</span> name[NVML_DEVICE_NAME_BUFFER_SIZE];</span><br><span class="line">			result = <span class="built_in">nvmlDeviceGetName</span>(device, name, NVML_DEVICE_NAME_BUFFER_SIZE);</span><br><span class="line">			<span class="keyword">if</span> (NVML_SUCCESS == result) &#123;</span><br><span class="line">				std::cout &lt;&lt; <span class="string">&quot;GPU name： &quot;</span> &lt;&lt; name &lt;&lt; endl;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">char</span> uuid[NVML_DEVICE_UUID_BUFFER_SIZE];</span><br><span class="line">			result = <span class="built_in">nvmlDeviceGetUUID</span>(device, uuid, NVML_DEVICE_UUID_BUFFER_SIZE);</span><br><span class="line">			<span class="keyword">if</span> (NVML_SUCCESS == result) &#123;</span><br><span class="line">				std::cout &lt;&lt; <span class="string">&quot;GPU uuid： &quot;</span> &lt;&lt; uuid &lt;&lt; endl;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//使用率</span></span><br><span class="line">			nvmlUtilization_t utilization;</span><br><span class="line">			result = <span class="built_in">nvmlDeviceGetUtilizationRates</span>(device, &amp;utilization);</span><br><span class="line">			<span class="keyword">if</span> (NVML_SUCCESS == result)</span><br><span class="line">			&#123;</span><br><span class="line">				std::cout &lt;&lt; <span class="string">&quot;----- 使用率 ----- &quot;</span> &lt;&lt; endl;</span><br><span class="line">				std::cout &lt;&lt; <span class="string">&quot;GPU 使用率： &quot;</span> &lt;&lt; utilization.gpu &lt;&lt; endl;</span><br><span class="line">				std::cout &lt;&lt; <span class="string">&quot;显存使用率 &quot;</span> &lt;&lt; utilization.memory &lt;&lt; endl;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">Sleep</span>(<span class="number">1000</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h4><p>使用 C# 调用 NVML 需要额外封装 nvml.dll 库。<br>参考 <a href="https://github.com/jcbritobr/nvml-csharp">nvml-csharp</a> 库封装一个简单的帮助类，仅用于获取 GPU 与显存使用率。<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 显卡利用率统计</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NvmlStateHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> NVML 库名称</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">string</span> NVML_SHARED_LIBRARY_STRING = <span class="string">&quot;nvml.dll&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Buffer size guaranteed to be large enough for \ref nvmlDeviceGetName</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">int</span> NVML_DEVICE_NAME_BUFFER_SIZE = <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Buffer size guaranteed to be large enough for \ref nvmlDeviceGetUUID</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">int</span> NVML_DEVICE_UUID_BUFFER_SIZE = <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 初始化 NVML 库</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    [<span class="meta">DllImport(NVML_SHARED_LIBRARY_STRING, EntryPoint = <span class="meta-string">&quot;nvmlInit_v2&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">extern</span> NvmlReturn <span class="title">NvmlInitV2</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取显卡数量</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;deviceCount&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    [<span class="meta">DllImport(NVML_SHARED_LIBRARY_STRING, CharSet = CharSet.Ansi, EntryPoint = <span class="meta-string">&quot;nvmlDeviceGetCount_v2&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">extern</span> NvmlReturn <span class="title">NvmlDeviceGetCount_v2</span>(<span class="params"><span class="keyword">out</span> <span class="built_in">uint</span> deviceCount</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取显卡句柄</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;index&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;device&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    [<span class="meta">DllImport(NVML_SHARED_LIBRARY_STRING, EntryPoint = <span class="meta-string">&quot;nvmlDeviceGetHandleByIndex&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">extern</span> NvmlReturn <span class="title">NvmlDeviceGetHandleByIndex</span>(<span class="params"><span class="built_in">uint</span> index, <span class="keyword">out</span> IntPtr device</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取显卡名称</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;device&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;name&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;length&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    [<span class="meta">DllImport(NVML_SHARED_LIBRARY_STRING, CharSet = CharSet.Ansi, EntryPoint = <span class="meta-string">&quot;nvmlDeviceGetName&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">extern</span> NvmlReturn <span class="title">NvmlDeviceGetName</span>(<span class="params">IntPtr device, [Out, MarshalAs(UnmanagedType.LPArray</span>)] <span class="built_in">byte</span>[] name, <span class="built_in">uint</span> length)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取显卡 UUID</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;device&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;uuid&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;length&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    [<span class="meta">DllImport(NVML_SHARED_LIBRARY_STRING, CharSet = CharSet.Ansi, EntryPoint = <span class="meta-string">&quot;nvmlDeviceGetUUID&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">extern</span> NvmlReturn <span class="title">NvmlDeviceGetUUID</span>(<span class="params">IntPtr device, [Out, MarshalAs(UnmanagedType.LPArray</span>)] <span class="built_in">byte</span>[] uuid, <span class="built_in">uint</span> length)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取显卡使用率信息</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;device&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;utilization&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    [<span class="meta">DllImport(NVML_SHARED_LIBRARY_STRING, CharSet = CharSet.Ansi, EntryPoint = <span class="meta-string">&quot;nvmlDeviceGetUtilizationRates&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">extern</span> NvmlReturn <span class="title">NvmlDeviceGetUtilizationRates</span>(<span class="params">IntPtr device, <span class="keyword">out</span> NvmlUtilization utilization</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 关闭调用</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    [<span class="meta">DllImport(NVML_SHARED_LIBRARY_STRING, EntryPoint = <span class="meta-string">&quot;nvmlShutdown&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">extern</span> NvmlReturn <span class="title">NvmlShutdown</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取显卡全局使用率</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;gpuCount&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;exception cref=&quot;SystemException&quot;&gt;</span><span class="doctag">&lt;/exception&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NvmlStateHelper</span>(<span class="params"><span class="built_in">uint</span> gpuCount = <span class="number">0</span></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Task.Run(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            NvmlReturn res = NvmlInitV2();</span><br><span class="line">            <span class="keyword">if</span> (NvmlReturn.NVML_SUCCESS != res)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//throw new SystemException(res.ToString());</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> device = IntPtr.Zero;</span><br><span class="line">            res = NvmlDeviceGetHandleByIndex(gpuCount, <span class="keyword">out</span> device);</span><br><span class="line">            <span class="keyword">if</span> (NvmlReturn.NVML_SUCCESS != res)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//throw new SystemException(res.ToString());</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取显卡名称</span></span><br><span class="line">            <span class="built_in">byte</span>[] bufferName = <span class="keyword">new</span> <span class="built_in">byte</span>[NVML_DEVICE_NAME_BUFFER_SIZE];</span><br><span class="line">            res = NvmlDeviceGetName(device, bufferName, NVML_DEVICE_NAME_BUFFER_SIZE);</span><br><span class="line">            <span class="keyword">if</span> (NvmlReturn.NVML_SUCCESS == res)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> gpuName = Encoding.Default.GetString(bufferName).Replace(<span class="string">&quot;\0&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取显卡 UUID</span></span><br><span class="line">            <span class="built_in">byte</span>[] bufferUUID = <span class="keyword">new</span> <span class="built_in">byte</span>[NVML_DEVICE_UUID_BUFFER_SIZE];</span><br><span class="line">            res = NvmlDeviceGetUUID(device, bufferUUID, NVML_DEVICE_UUID_BUFFER_SIZE);</span><br><span class="line">            <span class="keyword">if</span> (NvmlReturn.NVML_SUCCESS == res)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> gpuUUID = Encoding.Default.GetString(bufferUUID).Replace(<span class="string">&quot;\0&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取 GPU 与显存使用率</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    NvmlUtilization nvmlUtilization;</span><br><span class="line">                    res = NvmlDeviceGetUtilizationRates(device, <span class="keyword">out</span> nvmlUtilization);</span><br><span class="line">                    <span class="keyword">if</span> (NvmlReturn.NVML_SUCCESS != res)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//throw new SystemException(res.ToString());</span></span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    GpuChange?.Invoke(nvmlUtilization.gpu);</span><br><span class="line">                    MemoryChange?.Invoke(nvmlUtilization.memory);</span><br><span class="line">                &#125;</span><br><span class="line">                catch (Exception)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 获取信息失败</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Gpu 使用率</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;<span class="built_in">uint</span>&gt; GpuChange;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 显存使用率</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;<span class="built_in">uint</span>&gt; MemoryChange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> NVML 返回值类型</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> NvmlReturn</span><br><span class="line">&#123;</span><br><span class="line">    NVML_SUCCESS = <span class="number">0</span>,</span><br><span class="line">    NVML_ERROR_UNINITIALIZED,</span><br><span class="line">    NVML_ERROR_INVALID_ARGUMENT,</span><br><span class="line">    NVML_ERROR_NOT_SUPPORTED,</span><br><span class="line">    NVML_ERROR_NO_PERMISSION,</span><br><span class="line">    NVML_ERROR_ALREADY_INITIALIZED,</span><br><span class="line">    NVML_ERROR_NOT_FOUND,</span><br><span class="line">    NVML_ERROR_INSUFFICIENT_SIZE,</span><br><span class="line">    NVML_ERROR_INSUFFICIENT_POWER,</span><br><span class="line">    NVML_ERROR_DRIVER_NOT_LOADED,</span><br><span class="line">    NVML_ERROR_TIMEOUT,</span><br><span class="line">    NVML_ERROR_IRQ_ISSUE,</span><br><span class="line">    NVML_ERROR_LIBRARY_NOT_FOUND,</span><br><span class="line">    NVML_ERROR_FUNCTION_NOT_FOUND,</span><br><span class="line">    NVML_ERROR_CORRUPTED_INFOROM,</span><br><span class="line">    NVML_ERROR_GPU_IS_LOST,</span><br><span class="line">    NVML_ERROR_RESET_REQUIRED,</span><br><span class="line">    NVML_ERROR_OPERATING_SYSTEM,</span><br><span class="line">    NVML_ERROR_LIB_RM_VERSION_MISMATCH,</span><br><span class="line">    NVML_ERROR_IN_USE,</span><br><span class="line">    NVML_ERROR_MEMORY,</span><br><span class="line">    NVML_ERROR_NO_DATA,</span><br><span class="line">    NVML_ERROR_VGPU_ECC_NOT_SUPPORTED,</span><br><span class="line">    NVML_ERROR_INSUFFICIENT_RESOURCES,</span><br><span class="line">    NVML_ERROR_UNKNOWN = <span class="number">999</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 显卡使用率信息模型</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> NvmlUtilization</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">uint</span> gpu &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">uint</span> memory &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>拉普拉斯金字塔多波段融合</title>
    <url>/blog/2022/05/22/cpp-Pyramid/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/cpp-Pyramid/pyramidTitle.jpg"/></p>
<span id="more"></span>
<h4 id="使用拉普拉斯金字塔（LaplacianPyramid）融合图像"><a href="#使用拉普拉斯金字塔（LaplacianPyramid）融合图像" class="headerlink" title="使用拉普拉斯金字塔（LaplacianPyramid）融合图像"></a>使用拉普拉斯金字塔（LaplacianPyramid）融合图像</h4><p><a href="https://docs.opencv.org/4.x/dc/dff/tutorial_py_pyramids.html">图像金字塔</a> 是图像的集合，所有图像都来自单个原始图像，这些图像被连续下采样，直到达到某个所需的停止点。</p>
<p>有两种常见的图像金字塔：</p>
<ul>
<li>高斯金字塔：用于对图像进行下采样</li>
<li>拉普拉斯金字塔：用于从金字塔较低的图像（分辨率较低）重建上采样图像</li>
</ul>
<p>使用拉普拉斯金字塔融合复原图像，可以解决拼接缝隙问题，也叫做多波段融合(MultibandBlending)</p>
<h4 id="直接拼接"><a href="#直接拼接" class="headerlink" title="直接拼接"></a>直接拼接</h4><p>直接使用蒙版拼接两张图片，存在较为明显的拼接缝隙。</p>
<table>
<thead>
<tr>
<th>图片1</th>
<th>蒙版</th>
<th>图片2</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="https://sadness96.github.io/images/blog/cpp-Pyramid/apple.jpg" width='120px'/></td>
<td><img src="https://sadness96.github.io/images/blog/cpp-Pyramid/mask.jpg" width='120px'/></td>
<td><img src="https://sadness96.github.io/images/blog/cpp-Pyramid/orange.jpg" width='120px'/></td>
<td><img src="https://sadness96.github.io/images/blog/cpp-Pyramid/result0.jpg" width='120px'/></td>
</tr>
</tbody>
</table>
<h4 id="多波段融合"><a href="#多波段融合" class="headerlink" title="多波段融合"></a>多波段融合</h4><p>使用 5 层拉普拉斯金字塔融合图像，融合效果较好</p>
<table>
<thead>
<tr>
<th>图片1</th>
<th>蒙版</th>
<th>图片2</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="https://sadness96.github.io/images/blog/cpp-Pyramid/apple.jpg" width='120px'/></td>
<td><img src="https://sadness96.github.io/images/blog/cpp-Pyramid/mask.jpg" width='120px'/></td>
<td><img src="https://sadness96.github.io/images/blog/cpp-Pyramid/orange.jpg" width='120px'/></td>
<td><img src="https://sadness96.github.io/images/blog/cpp-Pyramid/result5.jpg" width='120px'/></td>
</tr>
</tbody>
</table>
<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 创建高斯金字塔</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;img&quot;&gt;原图像&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;num_levels&quot;&gt;金字塔层数&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pyr&quot;&gt;金字塔集合&lt;/param&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateGaussianPyramid</span><span class="params">(<span class="keyword">const</span> Mat&amp; img, <span class="keyword">int</span> num_levels, vector&lt;Mat&gt;&amp; pyr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	pyr.<span class="built_in">clear</span>();</span><br><span class="line">	Mat gp_img = img;</span><br><span class="line">	pyr.<span class="built_in">push_back</span>(gp_img);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; num_levels; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Mat down;</span><br><span class="line">		<span class="built_in">pyrDown</span>(gp_img, down);</span><br><span class="line">		pyr.<span class="built_in">push_back</span>(down);</span><br><span class="line">		gp_img = down;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 创建拉普拉斯金字塔</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;img&quot;&gt;原图像&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;num_levels&quot;&gt;金字塔层数&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pyr&quot;&gt;金字塔集合&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;highest_level&quot;&gt;最高级别图像&lt;/param&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateLaplacianPyramid</span><span class="params">(<span class="keyword">const</span> Mat&amp; img, <span class="keyword">int</span> num_levels, vector&lt;Mat&gt;&amp; pyr, Mat&amp; highest_level)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	pyr.<span class="built_in">clear</span>();</span><br><span class="line">	Mat gp_img = img;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; num_levels; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Mat down, up;</span><br><span class="line">		<span class="built_in">pyrDown</span>(gp_img, down);</span><br><span class="line">		<span class="built_in">pyrUp</span>(down, up, gp_img.<span class="built_in">size</span>());</span><br><span class="line">		Mat lap;</span><br><span class="line">		<span class="built_in">subtract</span>(gp_img, up, lap);</span><br><span class="line">		pyr.<span class="built_in">push_back</span>(lap);</span><br><span class="line">		gp_img = down;</span><br><span class="line">	&#125;</span><br><span class="line">	gp_img.<span class="built_in">copyTo</span>(highest_level);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 根据蒙版融合金字塔图像</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pyr_img1&quot;&gt;图像1 拉普拉斯金字塔&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pyr_img2&quot;&gt;图像2 拉普拉斯金字塔&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pyr_mask&quot;&gt;蒙版 高斯金字塔&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;num_levels&quot;&gt;金字塔层数&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pyr&quot;&gt;金字塔集合&lt;/param&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FusionPyramidImage</span><span class="params">(vector&lt;Mat&gt;&amp; pyr_img1, Mat&amp; img1, vector&lt;Mat&gt;&amp; pyr_img2, Mat&amp; img2, vector&lt;Mat&gt;&amp; pyr_mask, <span class="keyword">int</span> num_levels, vector&lt;Mat&gt;&amp; pyr, Mat&amp; result_highest_level)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	pyr.<span class="built_in">clear</span>();</span><br><span class="line">	result_highest_level = img1.<span class="built_in">mul</span>(pyr_mask.<span class="built_in">back</span>()) + img2.<span class="built_in">mul</span>(<span class="built_in">Scalar</span>(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>) - pyr_mask.<span class="built_in">back</span>());</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; num_levels; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		pyr.<span class="built_in">push_back</span>(pyr_img1[i].<span class="built_in">mul</span>(pyr_mask[i]) + pyr_img2[i].<span class="built_in">mul</span>(<span class="built_in">Scalar</span>(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>) - pyr_mask[i]));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 重建图像</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pyr&quot;&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;num_levels&quot;&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line"><span class="function">Mat <span class="title">ReconstructImg</span><span class="params">(vector&lt;Mat&gt;&amp; pyr, Mat&amp; img, <span class="keyword">int</span> num_levels)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Mat current_img = img;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = num_levels - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		Mat up;</span><br><span class="line">		<span class="built_in">pyrUp</span>(current_img, up, pyr[i].<span class="built_in">size</span>());</span><br><span class="line">		<span class="built_in">add</span>(up, pyr[i], current_img);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> current_img;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Mat img_apple = <span class="built_in">imread</span>(<span class="string">&quot;apple.jpg&quot;</span>);</span><br><span class="line">	Mat img_orange = <span class="built_in">imread</span>(<span class="string">&quot;orange.jpg&quot;</span>);</span><br><span class="line">	Mat img_mask = <span class="built_in">imread</span>(<span class="string">&quot;mask.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建拉普拉斯金字塔层数</span></span><br><span class="line">	<span class="keyword">int</span> num_bands_ = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 拼接图像转换为 CV_32F 类型</span></span><br><span class="line">	img_apple.<span class="built_in">convertTo</span>(img_apple, CV_32F);</span><br><span class="line">	img_orange.<span class="built_in">convertTo</span>(img_orange, CV_32F);</span><br><span class="line">	<span class="comment">// 蒙版图像转换为 CV_32F, 1.0 / 255.0 类型</span></span><br><span class="line">	img_mask.<span class="built_in">convertTo</span>(img_mask, CV_32F, <span class="number">1.0</span> / <span class="number">255.0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 可选：创建以中间分隔的蒙版</span></span><br><span class="line">	<span class="comment">//Mat img_mask = Mat::zeros(img_apple.rows, img_apple.cols, CV_32FC1);</span></span><br><span class="line">	<span class="comment">//img_mask(Range::all(), Range(0, img_mask.cols * 0.5)) = 1.0;</span></span><br><span class="line">	<span class="comment">//cvtColor(img_mask, img_mask, CV_GRAY2BGR);</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建拼接图像拉普拉斯金字塔</span></span><br><span class="line">	vector&lt;Mat&gt; pyr_apple;</span><br><span class="line">	Mat highest_level_apple;</span><br><span class="line">	<span class="built_in">CreateLaplacianPyramid</span>(img_apple, num_bands_, pyr_apple, highest_level_apple);</span><br><span class="line">	vector&lt;Mat&gt; pyr_orange;</span><br><span class="line">	Mat highest_level_orange;</span><br><span class="line">	<span class="built_in">CreateLaplacianPyramid</span>(img_orange, num_bands_, pyr_orange, highest_level_orange);</span><br><span class="line">	<span class="comment">// 创建蒙版高斯金字塔</span></span><br><span class="line">	vector&lt;Mat&gt; pyr_mask;</span><br><span class="line">	<span class="built_in">CreateGaussianPyramid</span>(img_mask, num_bands_, pyr_mask);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 融合图像</span></span><br><span class="line">	vector&lt;Mat&gt; pyr_result;</span><br><span class="line">	Mat result_highest_level;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 以 orange 作为底图</span></span><br><span class="line">	<span class="comment">//FusionPyramidImage(pyr_apple, highest_level_apple, pyr_orange, highest_level_orange, pyr_mask, num_bands_, pyr_result, result_highest_level);</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 以 apple 作为底图</span></span><br><span class="line">	<span class="built_in">FusionPyramidImage</span>(pyr_orange, highest_level_orange, pyr_apple, highest_level_apple, pyr_mask, num_bands_, pyr_result, result_highest_level);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 重建图像</span></span><br><span class="line">	Mat result = <span class="built_in">ReconstructImg</span>(pyr_result, result_highest_level, num_bands_);</span><br><span class="line">	result.<span class="built_in">convertTo</span>(result, CV_8UC3);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">imshow</span>(<span class="string">&quot;result&quot;</span>, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="羽化融合"><a href="#羽化融合" class="headerlink" title="羽化融合"></a>羽化融合</h4><p>虽然拉普拉斯金字塔融合效果很好，但是多次生成高斯模糊和下采样上采样效率始终无法提升效率。可以退而求其次使用羽化融合（alpha blending），只需对蒙版高斯模糊一次即可。</p>
<table>
<thead>
<tr>
<th>图片1</th>
<th>蒙版</th>
<th>图片2</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="https://sadness96.github.io/images/blog/cpp-Pyramid/apple.jpg" width='120px'/></td>
<td><img src="https://sadness96.github.io/images/blog/cpp-Pyramid/GaussianBlur_mask.jpg" width='120px'/></td>
<td><img src="https://sadness96.github.io/images/blog/cpp-Pyramid/orange.jpg" width='120px'/></td>
<td><img src="https://sadness96.github.io/images/blog/cpp-Pyramid/alpha_blending.jpg" width='120px'/></td>
</tr>
</tbody>
</table>
<h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Mat img_apple = <span class="built_in">imread</span>(<span class="string">&quot;apple.jpg&quot;</span>);</span><br><span class="line">	Mat img_orange = <span class="built_in">imread</span>(<span class="string">&quot;orange.jpg&quot;</span>);</span><br><span class="line">	Mat img_mask = <span class="built_in">imread</span>(<span class="string">&quot;mask.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 使用高斯滤波模糊蒙版，高斯核大小越大，融合越好</span></span><br><span class="line">	<span class="built_in">GaussianBlur</span>(img_mask, img_mask, <span class="built_in">Size</span>(<span class="number">101</span>, <span class="number">101</span>), <span class="number">0</span>);</span><br><span class="line">	img_mask.<span class="built_in">convertTo</span>(img_mask, CV_32F, <span class="number">1.0</span> / <span class="number">255.0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="function">Mat <span class="title">result</span><span class="params">(img_apple.rows, img_apple.cols, CV_32FC3)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">size_t</span> w = <span class="number">0</span>; w &lt; img_apple.cols; w++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">size_t</span> h = <span class="number">0</span>; h &lt; img_apple.rows; h++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">float</span> alpha = img_mask.at&lt;Vec3f&gt;(h, w)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">			result.at&lt;Vec3f&gt;(h, w)[<span class="number">0</span>] = img_apple.at&lt;Vec3b&gt;(h, w)[<span class="number">0</span>] * (<span class="number">1</span> - alpha) + img_orange.at&lt;Vec3b&gt;(h, w)[<span class="number">0</span>] * alpha;</span><br><span class="line">			result.at&lt;Vec3f&gt;(h, w)[<span class="number">1</span>] = img_apple.at&lt;Vec3b&gt;(h, w)[<span class="number">1</span>] * (<span class="number">1</span> - alpha) + img_orange.at&lt;Vec3b&gt;(h, w)[<span class="number">1</span>] * alpha;</span><br><span class="line">			result.at&lt;Vec3f&gt;(h, w)[<span class="number">2</span>] = img_apple.at&lt;Vec3b&gt;(h, w)[<span class="number">2</span>] * (<span class="number">1</span> - alpha) + img_orange.at&lt;Vec3b&gt;(h, w)[<span class="number">2</span>] * alpha;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	result.<span class="built_in">convertTo</span>(result, CV_8UC3);</span><br><span class="line">	<span class="built_in">imshow</span>(<span class="string">&quot;result&quot;</span>, result);</span><br><span class="line">	<span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>pyramid</tag>
      </tags>
  </entry>
  <entry>
    <title>Cuda 优化图像金字塔</title>
    <url>/blog/2022/06/15/cpp-PyramidCuda/</url>
    <content><![CDATA[<h3 id="基于-Cuda-并行加速处理图像金字塔"><a href="#基于-Cuda-并行加速处理图像金字塔" class="headerlink" title="基于 Cuda 并行加速处理图像金字塔"></a>基于 Cuda 并行加速处理图像金字塔</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><a href="https://sadness96.github.io/blog/2022/05/22/cpp-Pyramid/">拉普拉斯金字塔多波段融合</a> 用于融合图像，OpenCV 提供了一系列方法实现这一功能，其实也提供了 GPU 加速版本，但是其中的 cuda::pyrUp 无法固定图像大小，导致很多问题，所以使用 Cuda 重写这些方法，也方便后期根据实际需求修改。</p>
<h4 id="需要重写的方法介绍"><a href="#需要重写的方法介绍" class="headerlink" title="需要重写的方法介绍"></a>需要重写的方法介绍</h4><p><a href="https://docs.opencv.org/3.4/d4/d86/group__imgproc__filter.html#gaabe8c836e97159a9193fb0b11ac52cf1">cv.GaussianBlur</a> 使用高斯滤波模糊图像，在下采样时保留重要信息，并且在上采样时还原信息。<br><a href="https://docs.opencv.org/3.4/d4/d86/group__imgproc__filter.html#gaf9bba239dfca11654cb7f50f889fc2ff">cv::pyrDown</a> 使用高斯滤波模糊图像后再删除偶数行偶数列，输出的图像大小为：Size((src.cols+1)/2, (src.rows+1)/2)。<br><a href="https://docs.opencv.org/3.4/d4/d86/group__imgproc__filter.html#gada75b59bdaaca411ed6fee10085eb784">cv::pyrUp</a> 对图像上采样，然后使用四倍高斯模糊图像，默认输出的图像大小为：Size(src.cols<em>2, src.rows</em>2)，通常使用下采样前的图像大小作为输出图像大小。<br><a href="https://docs.opencv.org/4.x/d2/de8/group__core__array.html#gaa0f00d98b4b5edeaeb7b8333b2de353b">cv.subtract</a> 计算两个数组或数组与标量之间的每元素差，图像大小相等时，方法等同于 img1 - img2。<br><a href="https://docs.opencv.org/4.x/d2/de8/group__core__array.html#ga10ac1bfb180e2cfda1701d06c24fdbd6">cv.add</a> 计算两个数组或一个数组和一个标量的每元素和，图像大小相等时，方法等同于 img1 + img2。</p>
<h4 id="加载原始图像"><a href="#加载原始图像" class="headerlink" title="加载原始图像"></a>加载原始图像</h4><p>左上角加的两条红线用于测试下采样删除偶数行前的高斯滤波验证。<br><img src="https://sadness96.github.io/images/blog/cpp-PyramidCuda/0.apple.jpg"/></p>
<h4 id="重写代码"><a href="#重写代码" class="headerlink" title="重写代码"></a>重写代码</h4><h5 id="GaussianBlur"><a href="#GaussianBlur" class="headerlink" title="GaussianBlur"></a>GaussianBlur</h5><p>对图像使用 OpenCV 官方推荐的卷积核进行卷积操作模糊图像。<br><img src="https://sadness96.github.io/images/blog/cpp-PyramidCuda/Gaussian kernel.jpg"/></p>
<p>GaussianBlurGpu 高斯滤波函数用于下采样时使用。<br>GaussianBlurFourfoldGpu 四倍高斯滤波函数用于上采样时使用。</p>
<h6 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h6><p><img src="https://sadness96.github.io/images/blog/cpp-PyramidCuda/1.apple_gb_gpu.jpg"/></p>
<h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">GaussianBlurCore</span><span class="params">(PtrStepSz&lt;uchar3&gt; inputMat, PtrStepSz&lt;uchar3&gt; outputMat)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> tidx = threadIdx.x + blockDim.x * blockIdx.x;</span><br><span class="line">	<span class="keyword">int</span> tidy = threadIdx.y + blockDim.y * blockIdx.y;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">float</span> blur[<span class="number">5</span>][<span class="number">5</span>] = &#123;</span><br><span class="line">		&#123;<span class="number">0.00390625</span>, <span class="number">0.015625</span>, <span class="number">0.0234375</span>, <span class="number">0.015625</span>, <span class="number">0.00390625</span>&#125;,</span><br><span class="line">		&#123;<span class="number">0.015625</span>,   <span class="number">0.0625</span>,   <span class="number">0.09375</span>,   <span class="number">0.0625</span>,   <span class="number">0.015625</span>  &#125;,</span><br><span class="line">		&#123;<span class="number">0.0234375</span>,  <span class="number">0.09375</span>,  <span class="number">0.140625</span>,  <span class="number">0.09375</span>,  <span class="number">0.0234375</span> &#125;,</span><br><span class="line">		&#123;<span class="number">0.015625</span>,   <span class="number">0.0625</span>,   <span class="number">0.09375</span>,   <span class="number">0.0625</span>,   <span class="number">0.015625</span>  &#125;,</span><br><span class="line">		&#123;<span class="number">0.00390625</span>, <span class="number">0.015625</span>, <span class="number">0.0234375</span>, <span class="number">0.015625</span>, <span class="number">0.00390625</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> img_cols_max_index = inputMat.cols - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> img_rows_max_index = inputMat.rows - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (tidx &lt; outputMat.cols &amp;&amp; tidy &lt; outputMat.rows)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">float</span> b, g, r;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">-2</span>; x &lt;= <span class="number">2</span>; x++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">-2</span>; y &lt;= <span class="number">2</span>; y++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> image_x = tidx + x;</span><br><span class="line">				<span class="keyword">if</span> (image_x &lt; <span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					image_x = <span class="built_in">abs</span>(image_x);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (image_x &gt;= inputMat.cols)</span><br><span class="line">				&#123;</span><br><span class="line">					image_x = img_cols_max_index - (x - (img_cols_max_index - tidx));</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">int</span> image_y = tidy + y;</span><br><span class="line">				<span class="keyword">if</span> (image_y &lt; <span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					image_y = <span class="built_in">abs</span>(image_y);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (image_y &gt;= inputMat.rows)</span><br><span class="line">				&#123;</span><br><span class="line">					image_y = img_rows_max_index - (y - (img_rows_max_index - tidy));</span><br><span class="line">				&#125;</span><br><span class="line">				b += (<span class="keyword">float</span>)<span class="built_in">inputMat</span>(image_y, image_x).x * (<span class="keyword">float</span>)blur[y + <span class="number">2</span>][x + <span class="number">2</span>];</span><br><span class="line">				g += (<span class="keyword">float</span>)<span class="built_in">inputMat</span>(image_y, image_x).y * (<span class="keyword">float</span>)blur[y + <span class="number">2</span>][x + <span class="number">2</span>];</span><br><span class="line">				r += (<span class="keyword">float</span>)<span class="built_in">inputMat</span>(image_y, image_x).z * (<span class="keyword">float</span>)blur[y + <span class="number">2</span>][x + <span class="number">2</span>];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">outputMat</span>(tidy, tidx).x = (<span class="keyword">int</span>)b;</span><br><span class="line">		<span class="built_in">outputMat</span>(tidy, tidx).y = (<span class="keyword">int</span>)g;</span><br><span class="line">		<span class="built_in">outputMat</span>(tidy, tidx).z = (<span class="keyword">int</span>)r;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 高斯滤波</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;img&quot;&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">Mat <span class="title">GaussianBlurGpu</span><span class="params">(Mat img)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">GpuMat <span class="title">inputMat</span><span class="params">(img)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> width = img.cols;</span><br><span class="line">	<span class="keyword">int</span> height = img.rows;</span><br><span class="line">	<span class="keyword">auto</span> outputMat = <span class="built_in">GpuMat</span>(height, width, CV_8UC3);</span><br><span class="line"></span><br><span class="line">	<span class="function">dim3 <span class="title">block</span><span class="params">(<span class="number">32</span>, <span class="number">32</span>)</span></span>;</span><br><span class="line">	<span class="function">dim3 <span class="title">grid</span><span class="params">((width + block.x - <span class="number">1</span>) / block.x, (height + block.y - <span class="number">1</span>) / block.y)</span></span>;</span><br><span class="line">	GaussianBlurCore &lt;&lt; &lt;grid, block &gt;&gt; &gt; (inputMat, outputMat);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cudaThreadSynchronize</span>();</span><br><span class="line"></span><br><span class="line">	Mat dstImg;</span><br><span class="line">	outputMat.<span class="built_in">download</span>(dstImg);</span><br><span class="line">	<span class="keyword">return</span> dstImg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">GaussianBlurFourfoldCore</span><span class="params">(PtrStepSz&lt;uchar3&gt; inputMat, PtrStepSz&lt;uchar3&gt; outputMat)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> tidx = threadIdx.x + blockDim.x * blockIdx.x;</span><br><span class="line">	<span class="keyword">int</span> tidy = threadIdx.y + blockDim.y * blockIdx.y;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">float</span> blur[<span class="number">5</span>][<span class="number">5</span>] = &#123;</span><br><span class="line">		&#123;<span class="number">0.00390625</span>, <span class="number">0.015625</span>, <span class="number">0.0234375</span>, <span class="number">0.015625</span>, <span class="number">0.00390625</span>&#125;,</span><br><span class="line">		&#123;<span class="number">0.015625</span>,   <span class="number">0.0625</span>,   <span class="number">0.09375</span>,   <span class="number">0.0625</span>,   <span class="number">0.015625</span>  &#125;,</span><br><span class="line">		&#123;<span class="number">0.0234375</span>,  <span class="number">0.09375</span>,  <span class="number">0.140625</span>,  <span class="number">0.09375</span>,  <span class="number">0.0234375</span> &#125;,</span><br><span class="line">		&#123;<span class="number">0.015625</span>,   <span class="number">0.0625</span>,   <span class="number">0.09375</span>,   <span class="number">0.0625</span>,   <span class="number">0.015625</span>  &#125;,</span><br><span class="line">		&#123;<span class="number">0.00390625</span>, <span class="number">0.015625</span>, <span class="number">0.0234375</span>, <span class="number">0.015625</span>, <span class="number">0.00390625</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> img_cols_max_index = inputMat.cols - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> img_rows_max_index = inputMat.rows - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (tidx &lt; outputMat.cols &amp;&amp; tidy &lt; outputMat.rows)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">float</span> b, g, r;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">-2</span>; x &lt;= <span class="number">2</span>; x++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">-2</span>; y &lt;= <span class="number">2</span>; y++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> image_x = tidx + x;</span><br><span class="line">				<span class="keyword">if</span> (image_x &lt; <span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					image_x = <span class="built_in">abs</span>(image_x);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (image_x &gt;= inputMat.cols)</span><br><span class="line">				&#123;</span><br><span class="line">					image_x = img_cols_max_index - (x - (img_cols_max_index - tidx));</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">int</span> image_y = tidy + y;</span><br><span class="line">				<span class="keyword">if</span> (image_y &lt; <span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					image_y = <span class="built_in">abs</span>(image_y);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (image_y &gt;= inputMat.rows)</span><br><span class="line">				&#123;</span><br><span class="line">					image_y = img_rows_max_index - (y - (img_rows_max_index - tidy));</span><br><span class="line">				&#125;</span><br><span class="line">				b += (<span class="keyword">float</span>)<span class="built_in">inputMat</span>(image_y, image_x).x * ((<span class="keyword">float</span>)blur[y + <span class="number">2</span>][x + <span class="number">2</span>] * <span class="number">4</span>);</span><br><span class="line">				g += (<span class="keyword">float</span>)<span class="built_in">inputMat</span>(image_y, image_x).y * ((<span class="keyword">float</span>)blur[y + <span class="number">2</span>][x + <span class="number">2</span>] * <span class="number">4</span>);</span><br><span class="line">				r += (<span class="keyword">float</span>)<span class="built_in">inputMat</span>(image_y, image_x).z * ((<span class="keyword">float</span>)blur[y + <span class="number">2</span>][x + <span class="number">2</span>] * <span class="number">4</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">outputMat</span>(tidy, tidx).x = (<span class="keyword">int</span>)b;</span><br><span class="line">		<span class="built_in">outputMat</span>(tidy, tidx).y = (<span class="keyword">int</span>)g;</span><br><span class="line">		<span class="built_in">outputMat</span>(tidy, tidx).z = (<span class="keyword">int</span>)r;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 四倍高斯滤波</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;img&quot;&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">Mat <span class="title">GaussianBlurFourfoldGpu</span><span class="params">(Mat img)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">GpuMat <span class="title">inputMat</span><span class="params">(img)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> width = img.cols;</span><br><span class="line">	<span class="keyword">int</span> height = img.rows;</span><br><span class="line">	<span class="keyword">auto</span> outputMat = <span class="built_in">GpuMat</span>(height, width, CV_8UC3);</span><br><span class="line"></span><br><span class="line">	<span class="function">dim3 <span class="title">block</span><span class="params">(<span class="number">32</span>, <span class="number">32</span>)</span></span>;</span><br><span class="line">	<span class="function">dim3 <span class="title">grid</span><span class="params">((width + block.x - <span class="number">1</span>) / block.x, (height + block.y - <span class="number">1</span>) / block.y)</span></span>;</span><br><span class="line">	GaussianBlurFourfoldCore &lt;&lt; &lt;grid, block &gt;&gt; &gt; (inputMat, outputMat);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cudaThreadSynchronize</span>();</span><br><span class="line"></span><br><span class="line">	Mat dstImg;</span><br><span class="line">	outputMat.<span class="built_in">download</span>(dstImg);</span><br><span class="line">	<span class="keyword">return</span> dstImg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="pyrDown"><a href="#pyrDown" class="headerlink" title="pyrDown"></a>pyrDown</h5><p>调用高斯滤波函数模糊图像，设定图像大小为 Size((src.cols+1)/2, (src.rows+1)/2)，删除偶数行和偶数列。</p>
<h6 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h6><p><img src="https://sadness96.github.io/images/blog/cpp-PyramidCuda/2.apple_gb_down_gpu.jpg"/></p>
<h6 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h6><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">PyrDownCore</span><span class="params">(PtrStepSz&lt;uchar3&gt; inputMat, PtrStepSz&lt;uchar3&gt; outputMat)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> tidx = threadIdx.x + blockDim.x * blockIdx.x;</span><br><span class="line">	<span class="keyword">int</span> tidy = threadIdx.y + blockDim.y * blockIdx.y;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (tidx &lt; outputMat.cols &amp;&amp; tidy &lt; outputMat.rows)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">outputMat</span>(tidy, tidx) = <span class="built_in">inputMat</span>(tidy * <span class="number">2</span>, tidx * <span class="number">2</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 金字塔下采样</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;img&quot;&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">Mat <span class="title">PyrDownGpu</span><span class="params">(Mat img)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 1. 高斯滤波</span></span><br><span class="line">	<span class="function">GpuMat <span class="title">inputMat</span><span class="params">(img)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> gb_width = img.cols;</span><br><span class="line">	<span class="keyword">int</span> gb_height = img.rows;</span><br><span class="line">	<span class="keyword">auto</span> output_gb_mat = <span class="built_in">GpuMat</span>(gb_height, gb_width, CV_8UC3);</span><br><span class="line"></span><br><span class="line">	<span class="function">dim3 <span class="title">block_gb</span><span class="params">(<span class="number">32</span>, <span class="number">32</span>)</span></span>;</span><br><span class="line">	<span class="function">dim3 <span class="title">grid_gb</span><span class="params">((gb_width + block_gb.x - <span class="number">1</span>) / block_gb.x, (gb_height + block_gb.y - <span class="number">1</span>) / block_gb.y)</span></span>;</span><br><span class="line">	GaussianBlurCore &lt;&lt; &lt;grid_gb, block_gb &gt;&gt; &gt; (inputMat, output_gb_mat);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 2. 对高斯滤波后的图像删除偶数行列</span></span><br><span class="line">	<span class="keyword">int</span> down_width = (img.cols + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">int</span> down_height = (img.rows + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">auto</span> output_down_mat = <span class="built_in">GpuMat</span>(down_height, down_width, CV_8UC3);</span><br><span class="line"></span><br><span class="line">	<span class="function">dim3 <span class="title">block_down</span><span class="params">(<span class="number">32</span>, <span class="number">32</span>)</span></span>;</span><br><span class="line">	<span class="function">dim3 <span class="title">grid_down</span><span class="params">((down_width + block_down.x - <span class="number">1</span>) / block_down.x, (down_height + block_down.y - <span class="number">1</span>) / block_down.y)</span></span>;</span><br><span class="line">	PyrDownCore &lt;&lt; &lt;grid_down, block_down &gt;&gt; &gt; (output_gb_mat, output_down_mat);</span><br><span class="line"></span><br><span class="line">	Mat dstImg;</span><br><span class="line">	output_down_mat.<span class="built_in">download</span>(dstImg);</span><br><span class="line">	<span class="keyword">return</span> dstImg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="pyrUp"><a href="#pyrUp" class="headerlink" title="pyrUp"></a>pyrUp</h5><p>设定图像大小为下采样前大小，偶数行偶数列填充为0，在使用四倍高斯滤波模糊图像。</p>
<h6 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h6><p><img src="https://sadness96.github.io/images/blog/cpp-PyramidCuda/3.apple_gb_up_gpu.jpg"/></p>
<p><img src="https://sadness96.github.io/images/blog/cpp-PyramidCuda/4.apple_gb_four_gpu.jpg"/></p>
<h6 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h6><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">PyrUpCore</span><span class="params">(PtrStepSz&lt;uchar3&gt; inputMat, PtrStepSz&lt;uchar3&gt; outputMat)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> tidx = threadIdx.x + blockDim.x * blockIdx.x;</span><br><span class="line">	<span class="keyword">int</span> tidy = threadIdx.y + blockDim.y * blockIdx.y;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (tidx &lt; outputMat.cols &amp;&amp; tidy &lt; outputMat.rows)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (tidy % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; tidx % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">outputMat</span>(tidy, tidx) = <span class="built_in">inputMat</span>(tidy / <span class="number">2</span>, tidx / <span class="number">2</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">outputMat</span>(tidy, tidx) = <span class="built_in">uchar3</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 金字塔上采样</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;img&quot;&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;img_size&quot;&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">Mat <span class="title">PyrUpGpu</span><span class="params">(Mat img, Size img_size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 1. 扩大范围填充0</span></span><br><span class="line">	<span class="function">GpuMat <span class="title">inputMat</span><span class="params">(img)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> up_width = img_size.width;</span><br><span class="line">	<span class="keyword">int</span> up_height = img_size.height;</span><br><span class="line">	<span class="keyword">auto</span> output_up_mat = <span class="built_in">GpuMat</span>(up_height, up_width, CV_8UC3);</span><br><span class="line"></span><br><span class="line">	<span class="function">dim3 <span class="title">block_up</span><span class="params">(<span class="number">32</span>, <span class="number">32</span>)</span></span>;</span><br><span class="line">	<span class="function">dim3 <span class="title">grid_up</span><span class="params">((up_width + block_up.x - <span class="number">1</span>) / block_up.x, (up_height + block_up.y - <span class="number">1</span>) / block_up.y)</span></span>;</span><br><span class="line">	PyrUpCore &lt;&lt; &lt;grid_up, block_up &gt;&gt; &gt; (inputMat, output_up_mat);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 2. 四倍高斯滤波</span></span><br><span class="line">	<span class="keyword">int</span> gb4_width = img_size.width;</span><br><span class="line">	<span class="keyword">int</span> gb4_height = img_size.height;</span><br><span class="line">	<span class="keyword">auto</span> output_gb4_mat = <span class="built_in">GpuMat</span>(up_height, up_width, CV_8UC3);</span><br><span class="line"></span><br><span class="line">	<span class="function">dim3 <span class="title">block_gb4</span><span class="params">(<span class="number">32</span>, <span class="number">32</span>)</span></span>;</span><br><span class="line">	<span class="function">dim3 <span class="title">grid_gb4</span><span class="params">((gb4_width + block_gb4.x - <span class="number">1</span>) / block_gb4.x, (gb4_height + block_gb4.y - <span class="number">1</span>) / block_gb4.y)</span></span>;</span><br><span class="line">	GaussianBlurFourfoldCore &lt;&lt; &lt;grid_gb4, block_gb4 &gt;&gt; &gt; (output_up_mat, output_gb4_mat);</span><br><span class="line"></span><br><span class="line">	Mat dstImg;</span><br><span class="line">	output_gb4_mat.<span class="built_in">download</span>(dstImg);</span><br><span class="line">	<span class="keyword">return</span> dstImg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="subtract"><a href="#subtract" class="headerlink" title="subtract"></a>subtract</h5><p>计算两个数组或数组与标量之间的每元素差，生成拉普拉斯金字塔所需图像。</p>
<h6 id="效果-3"><a href="#效果-3" class="headerlink" title="效果"></a>效果</h6><p><img src="https://sadness96.github.io/images/blog/cpp-PyramidCuda/5.apple_lb_gpu.jpg"/></p>
<h6 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h6><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">SubtractCore</span><span class="params">(PtrStepSz&lt;uchar3&gt; inputMat1, PtrStepSz&lt;uchar3&gt; inputMat2, PtrStepSz&lt;uchar3&gt; outputMat)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> tidx = threadIdx.x + blockDim.x * blockIdx.x;</span><br><span class="line">	<span class="keyword">int</span> tidy = threadIdx.y + blockDim.y * blockIdx.y;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (tidx &lt; outputMat.cols &amp;&amp; tidy &lt; outputMat.rows)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">outputMat</span>(tidy, tidx).x = <span class="built_in">inputMat1</span>(tidy, tidx).x - <span class="built_in">inputMat2</span>(tidy, tidx).x;</span><br><span class="line">		<span class="built_in">outputMat</span>(tidy, tidx).y = <span class="built_in">inputMat1</span>(tidy, tidx).y - <span class="built_in">inputMat2</span>(tidy, tidx).y;</span><br><span class="line">		<span class="built_in">outputMat</span>(tidy, tidx).z = <span class="built_in">inputMat1</span>(tidy, tidx).z - <span class="built_in">inputMat2</span>(tidy, tidx).z;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 图像减除</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;img1&quot;&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;img2&quot;&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">Mat <span class="title">SubtractGpu</span><span class="params">(Mat img1, Mat img2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">GpuMat <span class="title">inputMat1</span><span class="params">(img1)</span></span>;</span><br><span class="line">	<span class="function">GpuMat <span class="title">inputMat2</span><span class="params">(img2)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> width = img1.cols;</span><br><span class="line">	<span class="keyword">int</span> height = img1.rows;</span><br><span class="line">	<span class="keyword">auto</span> outputMat = <span class="built_in">GpuMat</span>(height, width, CV_8UC3);</span><br><span class="line"></span><br><span class="line">	<span class="function">dim3 <span class="title">block</span><span class="params">(<span class="number">32</span>, <span class="number">32</span>)</span></span>;</span><br><span class="line">	<span class="function">dim3 <span class="title">grid</span><span class="params">((width + block.x - <span class="number">1</span>) / block.x, (height + block.y - <span class="number">1</span>) / block.y)</span></span>;</span><br><span class="line">	SubtractCore &lt;&lt; &lt;grid, block &gt;&gt; &gt; (inputMat1, inputMat2, outputMat);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cudaThreadSynchronize</span>();</span><br><span class="line"></span><br><span class="line">	Mat dstImg;</span><br><span class="line">	outputMat.<span class="built_in">download</span>(dstImg);</span><br><span class="line">	<span class="keyword">return</span> dstImg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="add"><a href="#add" class="headerlink" title="add"></a>add</h5><p>计算两个数组或一个数组和一个标量的每元素和，使用上采样图像与拉普拉斯金字塔图像相加可还原图像</p>
<h6 id="效果-4"><a href="#效果-4" class="headerlink" title="效果"></a>效果</h6><p><img src="https://sadness96.github.io/images/blog/cpp-PyramidCuda/6.apple_add_gpu.jpg"/></p>
<h6 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h6><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">AddCore</span><span class="params">(PtrStepSz&lt;uchar3&gt; inputMat1, PtrStepSz&lt;uchar3&gt; inputMat2, PtrStepSz&lt;uchar3&gt; outputMat)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> tidx = threadIdx.x + blockDim.x * blockIdx.x;</span><br><span class="line">	<span class="keyword">int</span> tidy = threadIdx.y + blockDim.y * blockIdx.y;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (tidx &lt; outputMat.cols &amp;&amp; tidy &lt; outputMat.rows)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">outputMat</span>(tidy, tidx).x = <span class="built_in">inputMat1</span>(tidy, tidx).x + <span class="built_in">inputMat2</span>(tidy, tidx).x;</span><br><span class="line">		<span class="built_in">outputMat</span>(tidy, tidx).y = <span class="built_in">inputMat1</span>(tidy, tidx).y + <span class="built_in">inputMat2</span>(tidy, tidx).y;</span><br><span class="line">		<span class="built_in">outputMat</span>(tidy, tidx).z = <span class="built_in">inputMat1</span>(tidy, tidx).z + <span class="built_in">inputMat2</span>(tidy, tidx).z;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 图像增加</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;img1&quot;&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;img2&quot;&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">Mat <span class="title">AddGpu</span><span class="params">(Mat img1, Mat img2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">GpuMat <span class="title">inputMat1</span><span class="params">(img1)</span></span>;</span><br><span class="line">	<span class="function">GpuMat <span class="title">inputMat2</span><span class="params">(img2)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> width = img1.cols;</span><br><span class="line">	<span class="keyword">int</span> height = img1.rows;</span><br><span class="line">	<span class="keyword">auto</span> outputMat = <span class="built_in">GpuMat</span>(height, width, CV_8UC3);</span><br><span class="line"></span><br><span class="line">	<span class="function">dim3 <span class="title">block</span><span class="params">(<span class="number">32</span>, <span class="number">32</span>)</span></span>;</span><br><span class="line">	<span class="function">dim3 <span class="title">grid</span><span class="params">((width + block.x - <span class="number">1</span>) / block.x, (height + block.y - <span class="number">1</span>) / block.y)</span></span>;</span><br><span class="line">	AddCore &lt;&lt; &lt;grid, block &gt;&gt; &gt; (inputMat1, inputMat2, outputMat);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cudaThreadSynchronize</span>();</span><br><span class="line"></span><br><span class="line">	Mat dstImg;</span><br><span class="line">	outputMat.<span class="built_in">download</span>(dstImg);</span><br><span class="line">	<span class="keyword">return</span> dstImg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>cuda</tag>
        <tag>pyramid</tag>
      </tags>
  </entry>
  <entry>
    <title>RGB 与 YUV 互相转换计算</title>
    <url>/blog/2022/09/12/cpp-RgbAndYuvConvert/</url>
    <content><![CDATA[<h3 id="单一像素-RGB-与-YUV-转换计算公式"><a href="#单一像素-RGB-与-YUV-转换计算公式" class="headerlink" title="单一像素 RGB 与 YUV 转换计算公式"></a>单一像素 RGB 与 YUV 转换计算公式</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>从 FFmpeg 读取视频帧，无论是 RGB 格式或 YUV(YUV420、NV12) 转换到另一种格式都可以通过 <a href="https://www.ffmpeg.org/doxygen/2.2/structSwsContext.html">SwsContext</a> 系列方法转换，但是使用 CUDA 处理图像时需要单独处理每一像素，在 YUV 与 RBG 间互相转换。</p>
<h4 id="转换代码"><a href="#转换代码" class="headerlink" title="转换代码"></a>转换代码</h4><h5 id="YUV-转-RBG"><a href="#YUV-转-RBG" class="headerlink" title="YUV 转 RBG"></a>YUV 转 RBG</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">YuvToRgb</span><span class="params">(<span class="keyword">int</span> Y, <span class="keyword">int</span> U, <span class="keyword">int</span> V)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> B, G, R;</span><br><span class="line">    R = Y + <span class="number">1.402</span> * (V - <span class="number">128</span>);</span><br><span class="line">    G = Y - <span class="number">0.34414</span> * (U - <span class="number">128</span>) - <span class="number">0.71414</span> * (V - <span class="number">128</span>);</span><br><span class="line">    B = Y + <span class="number">1.772</span> * (U - <span class="number">128</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;R:&quot;</span> &lt;&lt; R &lt;&lt; <span class="string">&quot; - G:&quot;</span> &lt;&lt; G &lt;&lt; <span class="string">&quot; - B:&quot;</span> &lt;&lt; B &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="RBG-转-YUV"><a href="#RBG-转-YUV" class="headerlink" title="RBG 转 YUV"></a>RBG 转 YUV</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RgbToYuv</span><span class="params">(<span class="keyword">int</span> R, <span class="keyword">int</span> G, <span class="keyword">int</span> B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> Y, U, V;</span><br><span class="line">    Y = <span class="number">0.299</span> * R + <span class="number">0.587</span> * G + <span class="number">0.114</span> * B;</span><br><span class="line">    U = <span class="number">-0.1687</span> * R - <span class="number">0.3313</span> * G + <span class="number">0.5</span> * B + <span class="number">128</span>;</span><br><span class="line">    V = <span class="number">0.5</span> * R - <span class="number">0.4187</span> * G - <span class="number">0.0813</span> * B + <span class="number">128</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Y:&quot;</span> &lt;&lt; Y &lt;&lt; <span class="string">&quot; - U:&quot;</span> &lt;&lt; U &lt;&lt; <span class="string">&quot; - V:&quot;</span> &lt;&lt; V &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h4><h5 id="YUV-默认都是-0-时显示绿色"><a href="#YUV-默认都是-0-时显示绿色" class="headerlink" title="YUV 默认都是 0 时显示绿色"></a>YUV 默认都是 0 时显示绿色</h5><p>调用方法 YuvToRgb(0, 0, 0) 获取到值：<br>R:-179.456 - G:135.45984 - B:-226.816<br>RGB 取值范围为正整数 0 ~ 255，所以显示为:<br>R:0 - G:135 - B:0</p>
<div style="background: #008700;width: 120px;height: 30px;text-align: center;color: white;">#008700</div>

<h5 id="设置-YUV-为黑色"><a href="#设置-YUV-为黑色" class="headerlink" title="设置 YUV 为黑色"></a>设置 YUV 为黑色</h5><p>设置 Y = 0; U = 128; V = 128;</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>ffmpeg</tag>
        <tag>cuda</tag>
      </tags>
  </entry>
  <entry>
    <title>调用神思二代身份证读卡器</title>
    <url>/blog/2019/04/06/cpp-Sdses/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/cpp-Sdses/s100-1.jpg"/></p>
<span id="more"></span>
<h3 id="基于神思二代身份证读卡器做二次开发"><a href="#基于神思二代身份证读卡器做二次开发" class="headerlink" title="基于神思二代身份证读卡器做二次开发"></a>基于神思二代身份证读卡器做二次开发</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>公司中项目<a href="https://baike.baidu.com/item/%E4%BA%BA%E8%AF%81%E5%90%88%E4%B8%80/19776127?fr=aladdin">人证合一核查系统</a>需要，使用<a href="http://www.sdses.com/">神思二代身份证读卡器</a>二次开发集成。<br>由于神思二代证<a href="https://baike.baidu.com/item/sdk/7815680?fr=aladdin">SKD</a>只提供了C++/Java接口，项目还是采用C#作为主要开发语言，使用WPF开发界面，所以采用 <a href="/blog/2018/08/01/cpp-HybridCSharp/">C#/C++ 混合编程</a> 的方式开发。</p>
<h4 id="封装代码"><a href="#封装代码" class="headerlink" title="封装代码"></a>封装代码</h4><p>由官方提供的C++SDK二次封装为非托管动态链接库暴露接口给C#端调用<br>读卡器读取身份证照片存为 RdCard.dll 库目录下 zp.bmp 文件<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;2ndCardReader.h&quot;</span></span></span><br><span class="line"><span class="comment">// 主符号</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;resource.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Ucmd.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atlimage.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> BYTE;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">short</span> WORD;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span>  DWORD;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> LONG;</span><br><span class="line"></span><br><span class="line"><span class="comment">//位图文件头文件定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	DWORD bfSize;		<span class="comment">//文件大小</span></span><br><span class="line">	WORD bfReserved1;	<span class="comment">//保留字</span></span><br><span class="line">	WORD bfReserved2;	<span class="comment">//保留字</span></span><br><span class="line">	DWORD bfOffBits;	<span class="comment">//实际位图数据偏移字节数=前三个部分长度之和</span></span><br><span class="line">&#125;ClBITMAPHEADER;</span><br><span class="line"></span><br><span class="line"><span class="comment">//信息头BITMAPINFOHEADER</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	DWORD	biSize;				<span class="comment">//指定此结构体长度40</span></span><br><span class="line">	LONG	biWidth;</span><br><span class="line">	LONG	biHeight;</span><br><span class="line">	WORD	biPlanes;			<span class="comment">//平面数 为1</span></span><br><span class="line">	WORD	biBitCount;			<span class="comment">//采用颜色位数</span></span><br><span class="line">	DWORD	biCompression;		<span class="comment">//压缩方式</span></span><br><span class="line">	DWORD	biSizeImage;		<span class="comment">//实际位图占用字节数</span></span><br><span class="line">	LONG	biXPelsPerMeter;	<span class="comment">//x方向分辨率</span></span><br><span class="line">	LONG	biYPelsPerMeter;	<span class="comment">//y方向分辨率</span></span><br><span class="line">	DWORD	biClrUsed;			<span class="comment">//使用的颜色数</span></span><br><span class="line">	DWORD	biClrImportant;		<span class="comment">//重要的颜色数</span></span><br><span class="line">&#125;ClBITMAPINFOHEADER;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> rgbBlue;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> rgbGreen;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> rgbRed;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> rgbReserved;</span><br><span class="line">&#125;ClRGBQUAD;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(__stdcall *_UCommand1)</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* pCmd, <span class="keyword">int</span>* parg0, <span class="keyword">int</span>* parg1, <span class="keyword">int</span>* parg2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(__stdcall *_GetAddr)</span><span class="params">(<span class="keyword">char</span>* pbuf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(__stdcall *_GetBegin)</span><span class="params">(<span class="keyword">char</span>* pbuf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(__stdcall *_GetName)</span><span class="params">(<span class="keyword">char</span>* pbuf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(__stdcall *_GetSex)</span><span class="params">(<span class="keyword">char</span>* pbuf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(__stdcall *_GetSexGB)</span><span class="params">(<span class="keyword">char</span>* pbuf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(__stdcall *_GetFolk)</span><span class="params">(<span class="keyword">char</span>* pbuf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(__stdcall *_GetFolkGB)</span><span class="params">(<span class="keyword">char</span>* pbuf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(__stdcall *_GetIDNum)</span><span class="params">(<span class="keyword">char</span>* pbuf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(__stdcall *_GetDep)</span><span class="params">(<span class="keyword">char</span>* pbuf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(__stdcall *_GetBirth)</span><span class="params">(<span class="keyword">char</span>* pbuf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(__stdcall *_GetEnd)</span><span class="params">(<span class="keyword">char</span>* pbuf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(__stdcall *_GetNewAddr)</span><span class="params">(<span class="keyword">char</span>* pbuf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(__stdcall *_FID_GetEnName)</span><span class="params">(<span class="keyword">char</span>* pbuf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(__stdcall *_FID_GetSex)</span><span class="params">(<span class="keyword">char</span>* pbuf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(__stdcall *_FID_GetSexGB)</span><span class="params">(<span class="keyword">char</span>* pbuf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(__stdcall *_FID_GetIDNum)</span><span class="params">(<span class="keyword">char</span>* pbuf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(__stdcall *_FID_GetNationality)</span><span class="params">(<span class="keyword">char</span>* pbuf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(__stdcall *_FID_GetChNationality)</span><span class="params">(<span class="keyword">char</span>* pbuf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(__stdcall *_FID_GetChName)</span><span class="params">(<span class="keyword">char</span>* pbuf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(__stdcall *_FID_GetBegin)</span><span class="params">(<span class="keyword">char</span>* pbuf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(__stdcall *_FID_GetEnd)</span><span class="params">(<span class="keyword">char</span>* pbuf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(__stdcall *_FID_GetBirth)</span><span class="params">(<span class="keyword">char</span>* pbuf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(__stdcall *_FID_GetVersion)</span><span class="params">(<span class="keyword">char</span>* pbuf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(__stdcall *_FID_GetDep)</span><span class="params">(<span class="keyword">char</span>* pbuf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(__stdcall *_GetSAMIDToStr)</span><span class="params">(<span class="keyword">char</span>* id)</span></span>;</span><br><span class="line"></span><br><span class="line">_UCommand1				UCommand1;</span><br><span class="line">_GetAddr				GetAddr;</span><br><span class="line">_GetBegin				GetBegin;</span><br><span class="line">_GetName				GetName;</span><br><span class="line">_GetSex					GetSex;</span><br><span class="line">_GetSexGB				GetSexGB;</span><br><span class="line">_GetFolk				GetFolk;</span><br><span class="line">_GetFolkGB				GetFolkGB;</span><br><span class="line">_GetIDNum				GetIDNum;</span><br><span class="line">_GetDep					GetDep;</span><br><span class="line">_GetBirth				GetBirth;</span><br><span class="line">_GetEnd					GetEnd;</span><br><span class="line">_GetNewAddr				GetNewAddr;</span><br><span class="line">_FID_GetEnName			FID_GetEnName;</span><br><span class="line">_FID_GetSex				FID_GetSex;</span><br><span class="line">_FID_GetSexGB			FID_GetSexGB;</span><br><span class="line">_FID_GetIDNum			FID_GetIDNum;</span><br><span class="line">_FID_GetNationality		FID_GetNationality;</span><br><span class="line">_FID_GetChNationality	FID_GetChNationality;</span><br><span class="line">_FID_GetChName			FID_GetChName;</span><br><span class="line">_FID_GetBegin			FID_GetBegin;</span><br><span class="line">_FID_GetEnd				FID_GetEnd;</span><br><span class="line">_FID_GetBirth			FID_GetBirth;</span><br><span class="line">_FID_GetVersion			FID_GetVersion;</span><br><span class="line">_FID_GetDep				FID_GetDep;</span><br><span class="line">_GetSAMIDToStr			GetSAMIDToStr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="keyword">char</span>* <span class="title">TrimStr</span><span class="params">(<span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> *head = str;</span><br><span class="line">	<span class="keyword">while</span> (*head == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		++head;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> *end = head + <span class="built_in">strlen</span>(head) - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (*end == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		--end;</span><br><span class="line">	&#125;</span><br><span class="line">	*(end + <span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">strcpy</span>(str, head);</span><br><span class="line">	<span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">MY2NDCARDREADER_API <span class="keyword">int</span> <span class="title">fn2ndCardReaderInfo</span><span class="params">(IDInfo* pIDInfo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="built_in">LoadDll</span>();</span><br><span class="line">	<span class="keyword">if</span> (i != <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	HINSTANCE hDll = <span class="built_in">LoadLibraryEx</span>(<span class="string">L&quot;RdCard.dll&quot;</span>, <span class="number">0</span>, LOAD_WITH_ALTERED_SEARCH_PATH);</span><br><span class="line">	<span class="keyword">if</span> (hDll == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-10</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	UCommand1 = (_UCommand1)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;UCommand1&quot;</span>);</span><br><span class="line">	GetAddr = (_GetAddr)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;GetAddr&quot;</span>);</span><br><span class="line">	GetBegin = (_GetBegin)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;GetBegin&quot;</span>);</span><br><span class="line">	GetName = (_GetName)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;GetName&quot;</span>);</span><br><span class="line">	GetSex = (_GetSex)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;GetSex&quot;</span>);</span><br><span class="line">	GetSexGB = (_GetSexGB)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;GetSexGB&quot;</span>);</span><br><span class="line">	GetFolk = (_GetFolk)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;GetFolk&quot;</span>);</span><br><span class="line">	GetFolkGB = (_GetFolkGB)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;GetFolkGB&quot;</span>);</span><br><span class="line">	GetIDNum = (_GetIDNum)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;GetIDNum&quot;</span>);</span><br><span class="line">	GetDep = (_GetDep)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;GetDep&quot;</span>);</span><br><span class="line">	GetBirth = (_GetBirth)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;GetBirth&quot;</span>);</span><br><span class="line">	GetEnd = (_GetEnd)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;GetEnd&quot;</span>);</span><br><span class="line">	GetNewAddr = (_GetNewAddr)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;GetNewAddr&quot;</span>);</span><br><span class="line">	FID_GetEnName = (_FID_GetEnName)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;FID_GetEnName&quot;</span>);</span><br><span class="line">	FID_GetSex = (_FID_GetSex)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;FID_GetSex&quot;</span>);</span><br><span class="line">	FID_GetSexGB = (_FID_GetSexGB)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;FID_GetSexGB&quot;</span>);</span><br><span class="line">	FID_GetIDNum = (_FID_GetIDNum)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;FID_GetIDNum&quot;</span>);</span><br><span class="line">	FID_GetNationality = (_FID_GetNationality)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;FID_GetNationality&quot;</span>);</span><br><span class="line">	FID_GetChNationality = (_FID_GetChNationality)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;FID_GetChNationality&quot;</span>);</span><br><span class="line">	FID_GetChName = (_FID_GetChName)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;FID_GetChName&quot;</span>);</span><br><span class="line">	FID_GetBegin = (_FID_GetBegin)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;FID_GetBegin&quot;</span>);</span><br><span class="line">	FID_GetEnd = (_FID_GetEnd)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;FID_GetEnd&quot;</span>);</span><br><span class="line">	FID_GetBirth = (_FID_GetBirth)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;FID_GetBirth&quot;</span>);</span><br><span class="line">	FID_GetVersion = (_FID_GetVersion)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;FID_GetVersion&quot;</span>);</span><br><span class="line">	FID_GetDep = (_FID_GetDep)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;FID_GetDep&quot;</span>);</span><br><span class="line">	GetSAMIDToStr = (_GetSAMIDToStr)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;GetSAMIDToStr&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (UCommand1 == <span class="literal">NULL</span> || GetAddr == <span class="literal">NULL</span> || GetBegin == <span class="literal">NULL</span> || GetName == <span class="literal">NULL</span> || GetSex == <span class="literal">NULL</span> || GetSexGB == <span class="literal">NULL</span> || GetFolk == <span class="literal">NULL</span> || GetFolkGB == <span class="literal">NULL</span> || GetIDNum == <span class="literal">NULL</span> || GetDep == <span class="literal">NULL</span> || GetBirth == <span class="literal">NULL</span> || GetEnd == <span class="literal">NULL</span> || GetNewAddr == <span class="literal">NULL</span> || FID_GetEnName == <span class="literal">NULL</span> || FID_GetSex == <span class="literal">NULL</span> || FID_GetSexGB == <span class="literal">NULL</span> || FID_GetIDNum == <span class="literal">NULL</span> || FID_GetNationality == <span class="literal">NULL</span> || FID_GetChNationality == <span class="literal">NULL</span> || FID_GetChName == <span class="literal">NULL</span> || FID_GetBegin == <span class="literal">NULL</span> || FID_GetEnd == <span class="literal">NULL</span> || FID_GetBirth == <span class="literal">NULL</span> || FID_GetVersion == <span class="literal">NULL</span> || FID_GetDep == <span class="literal">NULL</span> || GetSAMIDToStr == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//连接设备</span></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> cmd = <span class="number">0x41</span>;</span><br><span class="line">	<span class="keyword">int</span> para0 = <span class="number">0</span>, para1 = <span class="number">8811</span>, para2 = <span class="number">9986</span>;</span><br><span class="line">	<span class="keyword">int</span> ret = <span class="built_in">UCommand1</span>(&amp;cmd, &amp;para0, &amp;para1, &amp;para2);</span><br><span class="line">	<span class="keyword">if</span> (ret != <span class="number">62171</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//MessageBox(&quot;设备连接失败，请检查设备是否插好！&quot;);</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">-11</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//验证卡（寻卡）</span></span><br><span class="line">	cmd = <span class="number">0x43</span>;</span><br><span class="line">	ret = <span class="built_in">UCommand1</span>(&amp;cmd, &amp;para0, &amp;para1, &amp;para2);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//读卡</span></span><br><span class="line">	cmd = <span class="number">0x49</span>;</span><br><span class="line">	ret = <span class="built_in">UCommand1</span>(&amp;cmd, &amp;para0, &amp;para1, &amp;para2);</span><br><span class="line">	<span class="keyword">if</span> (ret != <span class="number">62171</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//MessageBox(&quot;读卡失败！&quot;);</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">-12</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	GetAddr = (_GetAddr)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;GetAddr&quot;</span>);</span><br><span class="line">	GetName = (_GetName)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;GetName&quot;</span>);</span><br><span class="line">	GetSex = (_GetSex)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;GetSex&quot;</span>);</span><br><span class="line">	GetFolk = (_GetFolkGB)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;GetFolkGB&quot;</span>);</span><br><span class="line">	GetIDNum = (_GetIDNum)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;GetIDNum&quot;</span>);</span><br><span class="line">	GetBegin = (_GetBegin)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;GetBegin&quot;</span>);</span><br><span class="line">	GetEnd = (_GetEnd)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;GetEnd&quot;</span>);</span><br><span class="line">	GetDep = (_GetDep)<span class="built_in">GetProcAddress</span>(hDll, <span class="string">&quot;GetDep&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (GetAddr == <span class="literal">NULL</span> || GetName == <span class="literal">NULL</span> || GetSex == <span class="literal">NULL</span> || GetFolk == <span class="literal">NULL</span> || GetIDNum == <span class="literal">NULL</span> || GetBegin == <span class="literal">NULL</span> || GetDep == <span class="literal">NULL</span> || GetEnd == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-22</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">GetName</span>(pIDInfo-&gt;Name);</span><br><span class="line">	<span class="built_in">TrimStr</span>(pIDInfo-&gt;Name);</span><br><span class="line">	<span class="built_in">GetSexGB</span>(pIDInfo-&gt;Gender);</span><br><span class="line">	<span class="built_in">GetBirth</span>(pIDInfo-&gt;BirthDate);</span><br><span class="line">	<span class="built_in">GetAddr</span>(pIDInfo-&gt;Address);</span><br><span class="line">	<span class="built_in">TrimStr</span>(pIDInfo-&gt;Address);</span><br><span class="line">	<span class="built_in">GetIDNum</span>(pIDInfo-&gt;IDNumber);</span><br><span class="line">	<span class="built_in">GetBegin</span>(pIDInfo-&gt;Begin);</span><br><span class="line">	<span class="built_in">GetEnd</span>(pIDInfo-&gt;End);</span><br><span class="line">	<span class="built_in">GetFolk</span>(pIDInfo-&gt;Folk);</span><br><span class="line">	<span class="built_in">GetDep</span>(pIDInfo-&gt;IssuanceAuthority);</span><br><span class="line">	pIDInfo-&gt;Nation = <span class="string">&quot;中国&quot;</span>;</span><br><span class="line">	<span class="comment">//关闭读卡器</span></span><br><span class="line">	cmd = <span class="number">0x42</span>;</span><br><span class="line">	<span class="built_in">UCommand1</span>(&amp;cmd, &amp;para0, &amp;para1, &amp;para2);</span><br><span class="line">	<span class="built_in">FreeDll</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="调用代码"><a href="#调用代码" class="headerlink" title="调用代码"></a>调用代码</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">DllImport(@<span class="meta-string">&quot;2ndCardReader.dll&quot;</span>, EntryPoint = <span class="meta-string">&quot;fn2ndCardReaderInfo&quot;</span>, CallingConvention = CallingConvention.Cdecl)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">int</span> <span class="title">fn2ndCardReaderInfo</span>(<span class="params"><span class="keyword">ref</span> IDInfo pIDInfo</span>)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"> [<span class="meta">StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi, Pack = 1)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> IDInfo</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//二代证信息</span></span><br><span class="line">    <span class="keyword">public</span> IntPtr Name;</span><br><span class="line">    <span class="keyword">public</span> IntPtr Gender;</span><br><span class="line">    <span class="keyword">public</span> IntPtr Folk;</span><br><span class="line">    <span class="keyword">public</span> IntPtr Nation;</span><br><span class="line">    <span class="keyword">public</span> IntPtr BirthDate;</span><br><span class="line">    <span class="keyword">public</span> IntPtr Address;</span><br><span class="line">    <span class="keyword">public</span> IntPtr IDNumber;</span><br><span class="line">    <span class="keyword">public</span> IntPtr IssuanceAuthority;</span><br><span class="line">    <span class="keyword">public</span> IntPtr Begin;</span><br><span class="line">    <span class="keyword">public</span> IntPtr End;</span><br><span class="line">    <span class="keyword">public</span> IntPtr Image;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">IDInfo pIDInfo = <span class="keyword">new</span> IDInfo();</span><br><span class="line"></span><br><span class="line">pIDInfo.Name = Marshal.StringToHGlobalAnsi(<span class="string">&quot; &quot;</span>);</span><br><span class="line">pIDInfo.Gender = Marshal.StringToHGlobalAnsi(<span class="string">&quot;&quot;</span>);</span><br><span class="line">pIDInfo.Nation = Marshal.StringToHGlobalAnsi(<span class="string">&quot; &quot;</span>);</span><br><span class="line">pIDInfo.BirthDate = Marshal.StringToHGlobalAnsi(<span class="string">&quot; &quot;</span>);</span><br><span class="line">pIDInfo.Address = Marshal.StringToHGlobalAnsi(<span class="string">&quot; &quot;</span>);</span><br><span class="line">pIDInfo.IDNumber = Marshal.StringToHGlobalAnsi(<span class="string">&quot; &quot;</span>);</span><br><span class="line">pIDInfo.Image = Marshal.StringToHGlobalAnsi(<span class="string">&quot; &quot;</span>);</span><br><span class="line">pIDInfo.Begin= Marshal.StringToHGlobalAnsi(<span class="string">&quot; &quot;</span>);</span><br><span class="line">pIDInfo.End = Marshal.StringToHGlobalAnsi(<span class="string">&quot; &quot;</span>);</span><br><span class="line">pIDInfo.Folk = Marshal.StringToHGlobalAnsi(<span class="string">&quot; &quot;</span>);</span><br><span class="line">pIDInfo.IssuanceAuthority = Marshal.StringToHGlobalAnsi(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="built_in">int</span> i = fn2ndCardReaderInfo(<span class="keyword">ref</span> pIDInfo);</span><br><span class="line"><span class="built_in">string</span> Name = Marshal.PtrToStringAnsi(pIDInfo.Name);</span><br><span class="line"><span class="built_in">string</span> Gender = Marshal.PtrToStringAnsi(pIDInfo.Gender);</span><br><span class="line"><span class="built_in">string</span> Nation = Marshal.PtrToStringAnsi(pIDInfo.Nation);</span><br><span class="line"><span class="built_in">string</span> BirthDate = Marshal.PtrToStringAnsi(pIDInfo.BirthDate);</span><br><span class="line"><span class="built_in">string</span> Address = Marshal.PtrToStringAnsi(pIDInfo.Address);</span><br><span class="line"><span class="built_in">string</span> IDNumber = Marshal.PtrToStringAnsi(pIDInfo.IDNumber);</span><br><span class="line"><span class="built_in">string</span> IssuanceAuthority = Marshal.PtrToStringAnsi(pIDInfo.IssuanceAuthority);</span><br><span class="line"><span class="built_in">string</span> Begin = Marshal.PtrToStringAnsi(pIDInfo.Begin);</span><br><span class="line"><span class="built_in">string</span> End = Marshal.PtrToStringAnsi(pIDInfo.End);</span><br><span class="line"><span class="built_in">string</span> Folk = Marshal.PtrToStringAnsi(pIDInfo.Folk);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>c++</tag>
        <tag>sdses</tag>
      </tags>
  </entry>
  <entry>
    <title>ADO.NET 帮助类</title>
    <url>/blog/2016/12/21/csharp-ADOHelper/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/csharp-DevFramework/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BD%AC%E6%8D%A2%E5%B7%A5%E5%85%B7.png"/></p>
<span id="more"></span>
<h3 id="使用-ADO-NET-二次封装ORM框架的数据库操作帮助类"><a href="#使用-ADO-NET-二次封装ORM框架的数据库操作帮助类" class="headerlink" title="使用 ADO.NET 二次封装ORM框架的数据库操作帮助类"></a>使用 ADO.NET 二次封装ORM框架的数据库操作帮助类</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>工作中大量需要多种不同数据格式互相转换，通过ADO.NET实现可视化数据转换工具，目前支持关系型数据库SqlServer、Oracle、MySql、Access、SQLite。</p>
<h4 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h4><p>简易的ORM框架，多种数据库操作封装为一套帮助类中，后期使用不需要过多考虑数据库类型，以及减少在代码中拼写SQL语句。近乎通用的连接方式以及增删改查，支持事务处理。</p>
<h4 id="帮助类、官方文档及其调用方式"><a href="#帮助类、官方文档及其调用方式" class="headerlink" title="帮助类、官方文档及其调用方式"></a>帮助类、官方文档及其调用方式</h4><h5 id="SQLServer："><a href="#SQLServer：" class="headerlink" title="SQLServer："></a>SQLServer：</h5><p><a href="https://github.com/Sadness96/Sadness/blob/master/Code/Helper/ADO.Helper/SqlServer/SqlServerHelper.cs">SqlServerHelper</a> 引用 <a href="https://technet.microsoft.com/zh-cn/system.data.sqlclient">System.Data.SqlClient</a> 库<br>调用方式：<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">SqlServerHelper sqlHelper = <span class="keyword">new</span> SqlServerHelper();</span><br><span class="line">sqlHelper.SqlServerConnectionString(<span class="built_in">string</span> server, <span class="built_in">string</span> database, <span class="built_in">string</span> uid, <span class="built_in">string</span> pwd);</span><br><span class="line">sqlHelper.Open();</span><br><span class="line">sqlHelper.Close();</span><br></pre></td></tr></table></figure></p>
<h5 id="Oracle："><a href="#Oracle：" class="headerlink" title="Oracle："></a>Oracle：</h5><p><a href="https://github.com/Sadness96/Sadness/blob/master/Code/Helper/ADO.Helper/Oracle/OracleHelper.cs">OracleHelper</a> 引用 <a href="https://technet.microsoft.com/zh-cn/system.data.oracleclient">System.Data.OracleClient</a> 库<br>调用方式：<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">OracleHelper sqlHelper = <span class="keyword">new</span> OracleHelper();</span><br><span class="line">sqlHelper.OracleConnectionString(<span class="built_in">string</span> Source, <span class="built_in">string</span> Id, <span class="built_in">string</span> Password);</span><br><span class="line">sqlHelper.Open();</span><br><span class="line">sqlHelper.Close();</span><br></pre></td></tr></table></figure></p>
<h5 id="MySQL："><a href="#MySQL：" class="headerlink" title="MySQL："></a>MySQL：</h5><p><a href="https://github.com/Sadness96/Sadness/blob/master/Code/Helper/ADO.Helper/MySql/MySqlHelper.cs">MySqlHelper</a> 引用 <a href="https://dev.mysql.com/doc/dev/connector-net/8.0/html/N_MySql_Data_MySqlClient.htm">MySql.Data.MySqlClient</a> 库<br>调用方式：<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">MySqlHelper sqlHelper = <span class="keyword">new</span> MySqlHelper();</span><br><span class="line">sqlHelper.MySqlConnectionString(<span class="built_in">string</span> server, <span class="built_in">string</span> id, <span class="built_in">string</span> password, <span class="built_in">string</span> database);</span><br><span class="line">sqlHelper.Open();</span><br><span class="line">sqlHelper.Close();</span><br></pre></td></tr></table></figure></p>
<h5 id="Access："><a href="#Access：" class="headerlink" title="Access："></a>Access：</h5><p><a href="https://github.com/Sadness96/Sadness/blob/master/Code/Helper/ADO.Helper/Access/AccessHelper.cs">AccessHelper</a> 引用 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.data.oledb?redirectedfrom=MSDN&amp;view=netframework-4.8">System.Data.OleDb</a> 库<br>调用方式：<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">AccessHelper sqlHelper = <span class="keyword">new</span> AccessHelper();</span><br><span class="line">sqlHelper.AccessConnectionPath_Office2003(<span class="built_in">string</span> source);</span><br><span class="line">sqlHelper.AccessConnectionPath_Office2007(<span class="built_in">string</span> source);</span><br><span class="line">sqlHelper.Open();</span><br><span class="line">sqlHelper.Close();</span><br></pre></td></tr></table></figure></p>
<h5 id="SQLite："><a href="#SQLite：" class="headerlink" title="SQLite："></a>SQLite：</h5><p><a href="https://github.com/Sadness96/Sadness/blob/master/Code/Helper/ADO.Helper/SQLite/SQLiteHelper.cs">SQLiteHelper</a> 引用 <a href="http://system.data.sqlite.org/">System.Data.SQLite</a> 库<br>调用方式：<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">SQLiteHelper sqlHelper = <span class="keyword">new</span> SQLiteHelper();</span><br><span class="line">sqlHelper.SQLiteConnectionPath(<span class="built_in">string</span> source);</span><br><span class="line">sqlHelper.Open();</span><br><span class="line">sqlHelper.Close();</span><br></pre></td></tr></table></figure></p>
<h4 id="数据转换帮助类"><a href="#数据转换帮助类" class="headerlink" title="数据转换帮助类"></a>数据转换帮助类</h4><p>由于每种数据库的字段类型、字符格式长度等不一致，所以专门写了一个用于互相兼容的帮助类，用于自动识别源数据库与目标数据库差异，自动修改。<br><a href="https://github.com/Sadness96/Sadness/tree/master/Code/Helper/ADO.Helper/DatabaseConversion">数据转换帮助类</a></p>
<h5 id="删除DataTable中的空行"><a href="#删除DataTable中的空行" class="headerlink" title="删除DataTable中的空行"></a>删除DataTable中的空行</h5><p>数据源以C#基础类型DataTable传递，在实际使用中存在空行导致异常<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 删除DataTable中的空行</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 弱引用,可直接修改参数</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;dtDataSource&quot;&gt;</span>源数据(DataTable)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>删除空行后的DataTable<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataTable <span class="title">RemoveEmpty</span>(<span class="params">DataTable dtDataSource</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;DataRow&gt; listRemove = <span class="keyword">new</span> List&lt;DataRow&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; dtDataSource.Rows.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">bool</span> IsNull = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; dtDataSource.Columns.Count; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(dtDataSource.Rows[i][j].ToString().Trim()))</span><br><span class="line">                &#123;</span><br><span class="line">                    IsNull = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (IsNull)</span><br><span class="line">            &#123;</span><br><span class="line">                listRemove.Add(dtDataSource.Rows[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; listRemove.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            dtDataSource.Rows.Remove(listRemove[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dtDataSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="DataTable与List互相转换"><a href="#DataTable与List互相转换" class="headerlink" title="DataTable与List互相转换"></a>DataTable与List<T>互相转换</h5><p>实际使用中List<T>比DataTable更方便使用，提供互相转换方法方便开发<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> DataTable转换为List<span class="doctag">&lt;T&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>数据模型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;dtDataSource&quot;&gt;</span>源数据(DataTable)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回List<span class="doctag">&lt;T&gt;</span>,失败返回null<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt; <span class="title">ConvertToList</span>&lt;<span class="title">T</span>&gt;(<span class="params">DataTable dtDataSource</span>) <span class="keyword">where</span> T : <span class="keyword">class</span>,<span class="keyword">new</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;T&gt; listT = <span class="keyword">new</span> List&lt;T&gt;();</span><br><span class="line">        <span class="keyword">foreach</span> (DataRow drDataSource <span class="keyword">in</span> dtDataSource.Rows)</span><br><span class="line">        &#123;</span><br><span class="line">            T t = <span class="keyword">new</span> T();</span><br><span class="line">            PropertyInfo[] propertyInfos = t.GetType().GetProperties();</span><br><span class="line">            <span class="keyword">foreach</span> (PropertyInfo propertyInfo <span class="keyword">in</span> propertyInfos)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> tempName = propertyInfo.Name;</span><br><span class="line">                <span class="keyword">if</span> (dtDataSource.Columns.Contains(tempName))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!propertyInfo.CanWrite) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="built_in">object</span> <span class="keyword">value</span> = drDataSource[tempName];</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">value</span> != DBNull.Value)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (propertyInfo.GetMethod.ReturnParameter.ParameterType.Name == <span class="string">&quot;Int32&quot;</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">value</span> = Convert.ToInt32(<span class="keyword">value</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        propertyInfo.SetValue(t, <span class="keyword">value</span>, <span class="literal">null</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            listT.Add(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> listT;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> List<span class="doctag">&lt;T&gt;</span>转换为DataTable</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;listDataSource&quot;&gt;</span>源数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回DataTable,失败返回null<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataTable <span class="title">ConvertDataTable</span>(<span class="params">IList listDataSource</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        DataTable dataTable = <span class="keyword">new</span> DataTable();</span><br><span class="line">        <span class="keyword">if</span> (listDataSource.Count &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            PropertyInfo[] propertyInfos = listDataSource[<span class="number">0</span>].GetType().GetProperties();</span><br><span class="line">            <span class="keyword">foreach</span> (PropertyInfo propertyInfo <span class="keyword">in</span> propertyInfos)</span><br><span class="line">            &#123;</span><br><span class="line">                dataTable.Columns.Add(propertyInfo.Name, propertyInfo.PropertyType);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> vDataSource <span class="keyword">in</span> listDataSource)</span><br><span class="line">            &#123;</span><br><span class="line">                ArrayList arrayList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">                <span class="keyword">foreach</span> (PropertyInfo propertyInfo <span class="keyword">in</span> propertyInfos)</span><br><span class="line">                &#123;</span><br><span class="line">                    arrayList.Add(propertyInfo.GetValue(vDataSource, <span class="literal">null</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                dataTable.LoadDataRow(arrayList.ToArray(), <span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dataTable;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="String转Unicode-并去除’-ufeff’非法字符"><a href="#String转Unicode-并去除’-ufeff’非法字符" class="headerlink" title="String转Unicode,并去除’\ufeff’非法字符"></a>String转Unicode,并去除’\ufeff’非法字符</h5><p>个别数据中存在有非法字符，避免异常，转换时批量处理<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 去除非法字符&#x27;\\ufeff&#x27;</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strSource&quot;&gt;</span>数据源<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>修正后的字符<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">RemoveIllegal</span>(<span class="params"><span class="built_in">string</span> strSource</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> UnicodeToString(StringToUnicode(strSource));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> String转Unicode,并去除&#x27;\\ufeff&#x27;非法字符</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strSource&quot;&gt;</span>数据源<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>Unicode编码字符<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">StringToUnicode</span>(<span class="params"><span class="built_in">string</span> strSource</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="comment">//先把字符串转换成 UTF-16 的Btye数组</span></span><br><span class="line">    <span class="built_in">byte</span>[] bytes = Encoding.Unicode.GetBytes(strSource);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; bytes.Length; i += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//根据Unicode规则，每两个byte表示一个汉字，并且后前顺序，英文前面补00</span></span><br><span class="line">        stringBuilder.AppendFormat(<span class="string">&quot;\\u&#123;0&#125;&#123;1&#125;&quot;</span>, bytes[i + <span class="number">1</span>].ToString(<span class="string">&quot;x&quot;</span>).PadLeft(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>), bytes[i].ToString(<span class="string">&quot;x&quot;</span>).PadLeft(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//去掉&#x27;?&#x27;的Unicode码,?=003f,Unicode以\u开头,\\为转义\</span></span><br><span class="line">    <span class="keyword">return</span> stringBuilder.Replace(<span class="string">&quot;\\ufeff&quot;</span>, <span class="built_in">string</span>.Empty).ToString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Unicode转String</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strSource&quot;&gt;</span>数据源<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>String类型编码字符<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">UnicodeToString</span>(<span class="params"><span class="built_in">string</span> strSource</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Regex(<span class="string">@&quot;\\u([0-9A-F]&#123;4&#125;)&quot;</span>, RegexOptions.IgnoreCase | RegexOptions.Compiled).Replace(strSource, x =&gt; <span class="built_in">string</span>.Empty + Convert.ToChar(Convert.ToUInt16(x.Result(<span class="string">&quot;$1&quot;</span>), <span class="number">16</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="字段类型转换"><a href="#字段类型转换" class="headerlink" title="字段类型转换"></a>字段类型转换</h5><p>由于每种数据库字段类型及字段长度和主键不一致，根据每种目标数据库做单独修改<br>代码过长，请查阅目录下方法 <a href="https://github.com/Sadness96/Sadness/blob/master/Code/Helper/ADO.Helper/DatabaseConversion/TypeProcessing.cs">TypeProcessing</a></p>
]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>sqlite</tag>
        <tag>mysql</tag>
        <tag>helper</tag>
        <tag>ado.net</tag>
        <tag>sql server</tag>
        <tag>oracle</tag>
        <tag>access</tag>
      </tags>
  </entry>
  <entry>
    <title>ActiveMQ Demo</title>
    <url>/blog/2019/12/31/csharp-ActiveMQ/</url>
    <content><![CDATA[<h3 id="ActiveMQ-消息队列使用介绍"><a href="#ActiveMQ-消息队列使用介绍" class="headerlink" title="ActiveMQ 消息队列使用介绍"></a>ActiveMQ 消息队列使用介绍</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><a href="https://activemq.apache.org/">Apache ActiveMQ</a> 是一个开放源代码的消息中间件。</p>
<h4 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h4><p>请参阅<a href="https://activemq.apache.org/components/classic/documentation">官方文档</a></p>
<h5 id="Docker-部署"><a href="#Docker-部署" class="headerlink" title="Docker 部署"></a>Docker 部署</h5><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">安装官方镜像</span><br><span class="line">docker pull webcenter/activemq</span><br><span class="line">启动 RabbitMQ 默认账户密码为 admin/admin</span><br><span class="line">docker run -d --name myactivemq -p <span class="number">61617</span>:<span class="number">61616</span> -p <span class="number">8162</span>:<span class="number">8161</span> webcenter/activemq</span><br><span class="line">WEB 端登录</span><br><span class="line"><span class="function">http://<span class="title">localhost</span>:8162/</span></span><br></pre></td></tr></table></figure>
<h4 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h4><h5 id="未找到-61616-端口"><a href="#未找到-61616-端口" class="headerlink" title="未找到 61616 端口"></a>未找到 61616 端口</h5><p>错误信息：<br><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">Apache.NMS.NMSConnectionException: <span class="title">Error</span> <span class="title">connecting</span> <span class="title">to</span> <span class="title">localhost</span>:61616. ---&gt; <span class="title">System.Net.Sockets.SocketException</span>: <span class="title">Unknown</span> <span class="title">error</span> (0<span class="title">xfffffffe</span>)</span></span><br></pre></td></tr></table></figure><br>使用命令查询端口号占用进程<br><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">netstat -ano|<span class="built_in">findstr</span> &quot;PORT&quot;</span><br><span class="line">tasklist|<span class="built_in">findstr</span> &quot;PID&quot;</span><br></pre></td></tr></table></figure><br>未查到 61616 端口使用，但是开启了 61617 端口</p>
<h4 id="C-代码调用"><a href="#C-代码调用" class="headerlink" title="C#代码调用"></a>C#代码调用</h4><p>引用 <a href="https://cwiki.apache.org/confluence/display/NMS/Apache.NMS.ActiveMQ">Apache.NMS.ActiveMQ</a> 库</p>
<h5 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Apache.NMS;</span><br><span class="line"><span class="keyword">using</span> Apache.NMS.ActiveMQ;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//Create the Connection Factory</span></span><br><span class="line">            IConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory(<span class="string">&quot;tcp://localhost:61617/&quot;</span>);</span><br><span class="line">            <span class="keyword">using</span> (IConnection connection = factory.CreateConnection())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//Create the Session</span></span><br><span class="line">                <span class="keyword">using</span> (ISession session = connection.CreateSession())</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//Create the Producer for the topic/queue</span></span><br><span class="line">                    IMessageProducer prod = session.CreateProducer(<span class="keyword">new</span> Apache.NMS.ActiveMQ.Commands.ActiveMQTopic(<span class="string">&quot;testing&quot;</span>));</span><br><span class="line">                    <span class="comment">//Send Messages</span></span><br><span class="line">                    <span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">while</span> (!Console.KeyAvailable)</span><br><span class="line">                    &#123;</span><br><span class="line">                        ITextMessage msg = prod.CreateTextMessage();</span><br><span class="line">                        msg.Text = i.ToString();</span><br><span class="line">                        Console.WriteLine(<span class="string">&quot;Sending: &quot;</span> + i.ToString());</span><br><span class="line">                        prod.Send(msg, Apache.NMS.MsgDeliveryMode.NonPersistent, Apache.NMS.MsgPriority.Normal, TimeSpan.MinValue);</span><br><span class="line">                        System.Threading.Thread.Sleep(<span class="number">5000</span>);</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">        catch (System.Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125;&quot;</span>, e.Message);</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Apache.NMS;</span><br><span class="line"><span class="keyword">using</span> Apache.NMS.ActiveMQ;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//Create the Connection factory</span></span><br><span class="line">            IConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory(<span class="string">&quot;tcp://localhost:61617/&quot;</span>);</span><br><span class="line">            <span class="comment">//Create the connection</span></span><br><span class="line">            <span class="keyword">using</span> (IConnection connection = factory.CreateConnection())</span><br><span class="line">            &#123;</span><br><span class="line">                connection.ClientId = <span class="string">&quot;testing listener&quot;</span>;</span><br><span class="line">                connection.Start();</span><br><span class="line">                <span class="comment">//Create the Session</span></span><br><span class="line">                <span class="keyword">using</span> (ISession session = connection.CreateSession())</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//Create the Consumer</span></span><br><span class="line">                    IMessageConsumer consumer = session.CreateDurableConsumer(<span class="keyword">new</span> Apache.NMS.ActiveMQ.Commands.ActiveMQTopic(<span class="string">&quot;testing&quot;</span>), <span class="string">&quot;testing listener&quot;</span>, <span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">                    consumer.Listener += <span class="keyword">new</span> MessageListener(consumer_Listener);</span><br><span class="line">                    Console.ReadLine();</span><br><span class="line">                &#125;</span><br><span class="line">                connection.Stop();</span><br><span class="line">                connection.Close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (System.Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(e.Message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">consumer_Listener</span>(<span class="params">IMessage message</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            ITextMessage msg = (ITextMessage)message;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Receive: &quot;</span> + msg.Text);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (System.Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(e.Message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>activemq</tag>
      </tags>
  </entry>
  <entry>
    <title>ANSI 转义码</title>
    <url>/blog/2022/04/27/csharp-AnsiEscapeCode/</url>
    <content><![CDATA[<h3 id="WPF-文本框仿控制台做一个五彩斑斓的黑"><a href="#WPF-文本框仿控制台做一个五彩斑斓的黑" class="headerlink" title="WPF 文本框仿控制台做一个五彩斑斓的黑"></a>WPF 文本框仿控制台做一个五彩斑斓的黑</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>参考 <a href="https://en.wikipedia.org/wiki/ANSI_escape_code">维基百科 ANSI escape code</a> 控制台程序使用 ANSI 转义来体现文字颜色，在控制台中显示出一个五彩斑斓的黑，也有很多控制台程序用这些带文字的颜色显示自家 LOGO。<br>WPF 想要在一行中加载不同颜色的文字，使用富文本控件 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.controls.richtextbox">RichTextBox</a> 即可，但是需要先解析文本中的 Ansi 字符。<br>完整参考代码在开源项目 <a href="https://github.com/iceelves/EasyDeploy">EasyDeploy</a> 中有重写富文本控件。</p>
<h4 id="控制台-Logo"><a href="#控制台-Logo" class="headerlink" title="控制台 Logo"></a>控制台 Logo</h4><p>图片来源于网络<br><img src="https://sadness96.github.io/images/blog/csharp-AnsiEscapeCode/LinuxTerminal.jpg"/></p>
<h4 id="打印颜色板"><a href="#打印颜色板" class="headerlink" title="打印颜色板"></a>打印颜色板</h4><p><img src="https://sadness96.github.io/images/blog/csharp-AnsiEscapeCode/ControlColor.jpg"/></p>
<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; dicForeground = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;()</span><br><span class="line">    &#123;</span><br><span class="line">        &#123; <span class="string">&quot;Black&quot;</span>, <span class="number">30</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;Red&quot;</span>, <span class="number">31</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;Green&quot;</span>, <span class="number">32</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;Yellow&quot;</span>, <span class="number">33</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;Blue&quot;</span>, <span class="number">34</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;Magenta&quot;</span>, <span class="number">35</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;Cyan&quot;</span>, <span class="number">36</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;White&quot;</span>, <span class="number">37</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;Gray&quot;</span>, <span class="number">90</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;Bright Red&quot;</span>, <span class="number">91</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;Bright Green&quot;</span>, <span class="number">92</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;Bright Yellow&quot;</span>, <span class="number">93</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;Bright Blue&quot;</span>, <span class="number">94</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;Bright Magenta&quot;</span>, <span class="number">95</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;Bright Cyan&quot;</span>, <span class="number">96</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;Bright White&quot;</span>, <span class="number">97</span> &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; dicBackground = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;()</span><br><span class="line">    &#123;</span><br><span class="line">        &#123; <span class="string">&quot;Black&quot;</span>, <span class="number">40</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;Red&quot;</span>, <span class="number">41</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;Green&quot;</span>, <span class="number">42</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;Yellow&quot;</span>, <span class="number">43</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;Blue&quot;</span>, <span class="number">44</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;Magenta&quot;</span>, <span class="number">45</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;Cyan&quot;</span>, <span class="number">46</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;White&quot;</span>, <span class="number">47</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;Gray&quot;</span>, <span class="number">100</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;Bright Red&quot;</span>, <span class="number">101</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;Bright Green&quot;</span>, <span class="number">102</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;Bright Yellow&quot;</span>, <span class="number">103</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;Bright Blue&quot;</span>, <span class="number">104</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;Bright Magenta&quot;</span>, <span class="number">105</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;Bright Cyan&quot;</span>, <span class="number">106</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;Bright White&quot;</span>, <span class="number">107</span> &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> itemForeground <span class="keyword">in</span> dicForeground)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(<span class="string">$&quot;<span class="subst">&#123;itemForeground.Key&#125;</span><span class="subst">&#123;(itemForeground.Key.Length &gt; <span class="number">8</span> ? <span class="string">&quot;\t&quot;</span> : <span class="string">&quot;\t\t&quot;</span>)&#125;</span>&quot;</span>);</span><br><span class="line">        Console.Write(<span class="string">$&quot;\u001b[<span class="subst">&#123;itemForeground.Value&#125;</span>m<span class="subst">&#123;itemForeground.Value&#125;</span>&quot;</span>);</span><br><span class="line">        Console.Write(<span class="string">$&quot;\u001b[0m &quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> itemBackground <span class="keyword">in</span> dicBackground)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.Write(<span class="string">$&quot;\u001b[<span class="subst">&#123;itemForeground.Value&#125;</span>;<span class="subst">&#123;itemBackground.Value&#125;</span>m<span class="subst">&#123;itemForeground.Value&#125;</span>;<span class="subst">&#123;itemBackground.Value&#125;</span>&quot;</span>);</span><br><span class="line">            Console.Write(<span class="string">$&quot;\u001b[0m &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Console.Write(<span class="string">$&quot;\r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="解析字符"><a href="#解析字符" class="headerlink" title="解析字符"></a>解析字符</h4><p>Ansi 编码由 \u001b[ 开头，加数值编码，由 m 结尾。<br>数值 0 为默认值。<br>数值 30-37;90-97 为文字颜色。<br>数值 40-47;100-107 为背景颜色。<br>通过正则表达式 \u001b[(.*?)m 匹配文本，后续的文本即为设定颜色。</p>
<h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> ANSI 转义序列相关帮助类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">AnsiHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 匹配 Ansi 头</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">char</span> AnsiStart = <span class="string">&#x27;\u001b&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 匹配 Ansi 正则</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> AnsiRegex = <span class="string">@&quot;\u001b\[(.*?)m&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 去除字符串中的 ANSI 序列</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;text&quot;&gt;</span>包含 Ansi 的文本<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">RemoveAnsi</span>(<span class="params"><span class="built_in">string</span> text</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> Regex.Replace(text, AnsiRegex, <span class="built_in">string</span>.Empty);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取通过正则 Ansi 拆分的数据集</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;text&quot;&gt;</span>包含 Ansi 的文本<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;<span class="built_in">string</span>&gt; <span class="title">GetAnsiSplit</span>(<span class="params"><span class="built_in">string</span> text</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        List&lt;<span class="built_in">string</span>&gt; listAnsiSplit = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        <span class="comment">// 获取匹配 Ansi 数据</span></span><br><span class="line">        <span class="keyword">var</span> vMatches = Regex.Matches(text, AnsiRegex);</span><br><span class="line">        <span class="comment">// 获取 Ansi 下标</span></span><br><span class="line">        List&lt;<span class="built_in">int</span>&gt; indexs = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; text.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (text[i].Equals(AnsiStart))</span><br><span class="line">            &#123;</span><br><span class="line">                indexs.Add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历拆分数据</span></span><br><span class="line">        <span class="keyword">if</span> (indexs.Count == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 无颜色数据</span></span><br><span class="line">            listAnsiSplit.Add(text);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 解析颜色数据</span></span><br><span class="line">            <span class="built_in">int</span> iSubscript = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; indexs.Count; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; indexs[i] &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 如果大于起始位置，先把起始数据赋值</span></span><br><span class="line">                    listAnsiSplit.Add(text.Substring(<span class="number">0</span>, indexs[i]));</span><br><span class="line">                    iSubscript += indexs[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 添加 Ansi 数据</span></span><br><span class="line">                listAnsiSplit.Add(vMatches[i].Value);</span><br><span class="line">                iSubscript += vMatches[i].Value.Length;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 添加其他数据</span></span><br><span class="line">                <span class="built_in">int</span> iSubCount = (indexs.Count &gt; i + <span class="number">1</span> ? indexs[i + <span class="number">1</span>] : text.Length) - iSubscript;</span><br><span class="line">                <span class="keyword">if</span> (iSubCount &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    listAnsiSplit.Add(text.Substring(iSubscript, iSubCount));</span><br><span class="line">                    iSubscript += iSubCount;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> listAnsiSplit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="把-Ansi-字符串解析为富文本所需的控件"><a href="#把-Ansi-字符串解析为富文本所需的控件" class="headerlink" title="把 Ansi 字符串解析为富文本所需的控件"></a>把 Ansi 字符串解析为富文本所需的控件</h4><p>通过正则表达式拆分，后创建 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.documents.run.-ctor">Run</a> 控件来创建前景色和背景色。</p>
<h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 添加文本</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;Text&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetText</span>(<span class="params"><span class="built_in">string</span> Text</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 根据最大显示行数删除</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.Document.Blocks.Count &gt;= MaxRows)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> iRempveNumber = <span class="keyword">this</span>.Document.Blocks.Count - MaxRows;</span><br><span class="line">        List&lt;Paragraph&gt; listRemoveTemp = <span class="keyword">new</span> List&lt;Paragraph&gt;();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> <span class="keyword">this</span>.Document.Blocks)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (iRempveNumber &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                iRempveNumber--;</span><br><span class="line">                listRemoveTemp.Add(item <span class="keyword">as</span> Paragraph);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (listRemoveTemp != <span class="literal">null</span> &amp;&amp; listRemoveTemp.Count &gt;= <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> listRemoveTemp)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.Document.Blocks.Remove(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加文本</span></span><br><span class="line">    <span class="built_in">string</span> ansiColor = <span class="literal">null</span>;</span><br><span class="line">    Paragraph paragraph = <span class="keyword">new</span> Paragraph();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> AnsiHelper.GetAnsiSplit(Text))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.Contains(AnsiHelper.AnsiStart))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 设置颜色</span></span><br><span class="line">            ansiColor = item;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            paragraph.Inlines.Add(SetColorFromAnsi(<span class="keyword">new</span> Run() &#123; Text = item &#125;, ansiColor));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.Document.Blocks.Add(paragraph);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 滚动条超过 80% 或滚动条小于一倍控件高度 滚动到底部</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.VerticalOffset / (<span class="keyword">this</span>.ExtentHeight - <span class="keyword">this</span>.ActualHeight) &gt;= <span class="number">0.8</span> || (<span class="keyword">this</span>.ExtentHeight - <span class="keyword">this</span>.ActualHeight) &lt;= <span class="keyword">this</span>.ActualHeight)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.ScrollToEnd();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 根据 Ansi 设置文本颜色</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;run&quot;&gt;</span>文本<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;ansiColor&quot;&gt;</span>ansi 颜色<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Run <span class="title">SetColorFromAnsi</span>(<span class="params">Run run, <span class="built_in">string</span> ansiColor</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(ansiColor))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> run;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> vMatches = Regex.Matches(ansiColor, AnsiHelper.AnsiRegex);</span><br><span class="line">    <span class="keyword">if</span> (vMatches != <span class="literal">null</span> &amp;&amp; vMatches.Count &gt;= <span class="number">1</span> &amp;&amp; vMatches[<span class="number">0</span>].Groups != <span class="literal">null</span> &amp;&amp; vMatches[<span class="number">0</span>].Groups.Count &gt;= <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> vSplit = vMatches[<span class="number">0</span>].Groups[<span class="number">1</span>].Value.Split(<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> vSplit)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span> (item)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Black</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;30&quot;</span>: run.Foreground = <span class="keyword">new</span> SolidColorBrush(Color.FromRgb(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;40&quot;</span>: run.Background = <span class="keyword">new</span> SolidColorBrush(Color.FromRgb(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)); <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Red</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;31&quot;</span>: run.Foreground = <span class="keyword">new</span> SolidColorBrush(Color.FromRgb(<span class="number">128</span>, <span class="number">0</span>, <span class="number">0</span>)); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;41&quot;</span>: run.Background = <span class="keyword">new</span> SolidColorBrush(Color.FromRgb(<span class="number">128</span>, <span class="number">0</span>, <span class="number">0</span>)); <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Green</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;32&quot;</span>: run.Foreground = <span class="keyword">new</span> SolidColorBrush(Color.FromRgb(<span class="number">0</span>, <span class="number">128</span>, <span class="number">0</span>)); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;42&quot;</span>: run.Background = <span class="keyword">new</span> SolidColorBrush(Color.FromRgb(<span class="number">0</span>, <span class="number">128</span>, <span class="number">0</span>)); <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Yellow</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;33&quot;</span>: run.Foreground = <span class="keyword">new</span> SolidColorBrush(Color.FromRgb(<span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>)); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;43&quot;</span>: run.Background = <span class="keyword">new</span> SolidColorBrush(Color.FromRgb(<span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>)); <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Blue</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;34&quot;</span>: run.Foreground = <span class="keyword">new</span> SolidColorBrush(Color.FromRgb(<span class="number">0</span>, <span class="number">0</span>, <span class="number">128</span>)); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;44&quot;</span>: run.Background = <span class="keyword">new</span> SolidColorBrush(Color.FromRgb(<span class="number">0</span>, <span class="number">0</span>, <span class="number">128</span>)); <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Magenta</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;35&quot;</span>: run.Foreground = <span class="keyword">new</span> SolidColorBrush(Color.FromRgb(<span class="number">128</span>, <span class="number">0</span>, <span class="number">128</span>)); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;45&quot;</span>: run.Background = <span class="keyword">new</span> SolidColorBrush(Color.FromRgb(<span class="number">128</span>, <span class="number">0</span>, <span class="number">128</span>)); <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Cyan</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;36&quot;</span>: run.Foreground = <span class="keyword">new</span> SolidColorBrush(Color.FromRgb(<span class="number">0</span>, <span class="number">128</span>, <span class="number">128</span>)); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;46&quot;</span>: run.Background = <span class="keyword">new</span> SolidColorBrush(Color.FromRgb(<span class="number">0</span>, <span class="number">128</span>, <span class="number">128</span>)); <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// White</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;37&quot;</span>: run.Foreground = <span class="keyword">new</span> SolidColorBrush(Color.FromRgb(<span class="number">192</span>, <span class="number">192</span>, <span class="number">192</span>)); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;47&quot;</span>: run.Background = <span class="keyword">new</span> SolidColorBrush(Color.FromRgb(<span class="number">192</span>, <span class="number">192</span>, <span class="number">192</span>)); <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Bright Black (Gray)</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;90&quot;</span>: run.Foreground = <span class="keyword">new</span> SolidColorBrush(Color.FromRgb(<span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>)); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;100&quot;</span>: run.Background = <span class="keyword">new</span> SolidColorBrush(Color.FromRgb(<span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>)); <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Bright Red</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;91&quot;</span>: run.Foreground = <span class="keyword">new</span> SolidColorBrush(Color.FromRgb(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>)); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;101&quot;</span>: run.Background = <span class="keyword">new</span> SolidColorBrush(Color.FromRgb(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>)); <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Bright Green</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;92&quot;</span>: run.Foreground = <span class="keyword">new</span> SolidColorBrush(Color.FromRgb(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>)); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;102&quot;</span>: run.Background = <span class="keyword">new</span> SolidColorBrush(Color.FromRgb(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>)); <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Bright Yellow</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;93&quot;</span>: run.Foreground = <span class="keyword">new</span> SolidColorBrush(Color.FromRgb(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>)); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;103&quot;</span>: run.Background = <span class="keyword">new</span> SolidColorBrush(Color.FromRgb(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>)); <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Bright Blue</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;94&quot;</span>: run.Foreground = <span class="keyword">new</span> SolidColorBrush(Color.FromRgb(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;104&quot;</span>: run.Background = <span class="keyword">new</span> SolidColorBrush(Color.FromRgb(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)); <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Bright Magenta</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;95&quot;</span>: run.Foreground = <span class="keyword">new</span> SolidColorBrush(Color.FromRgb(<span class="number">255</span>, <span class="number">0</span>, <span class="number">255</span>)); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;105&quot;</span>: run.Background = <span class="keyword">new</span> SolidColorBrush(Color.FromRgb(<span class="number">255</span>, <span class="number">0</span>, <span class="number">255</span>)); <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Bright Cyan</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;96&quot;</span>: run.Foreground = <span class="keyword">new</span> SolidColorBrush(Color.FromRgb(<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>)); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;106&quot;</span>: run.Background = <span class="keyword">new</span> SolidColorBrush(Color.FromRgb(<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>)); <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Bright White</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;97&quot;</span>: run.Foreground = <span class="keyword">new</span> SolidColorBrush(Color.FromRgb(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>)); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;107&quot;</span>: run.Background = <span class="keyword">new</span> SolidColorBrush(Color.FromRgb(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>)); <span class="keyword">break</span>;</span><br><span class="line">                <span class="literal">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> run;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="生成自己的艺术字-LOGO"><a href="#生成自己的艺术字-LOGO" class="headerlink" title="生成自己的艺术字 LOGO"></a>生成自己的艺术字 LOGO</h4><p>使用网站 <a href="http://www.patorjk.com/software/taag/">patorjk.com/software/taag/</a> 生成用于控制台的艺术字</p>
<h5 id="生成我注册公司的域名：Ice-Elves"><a href="#生成我注册公司的域名：Ice-Elves" class="headerlink" title="生成我注册公司的域名：Ice Elves"></a>生成我注册公司的域名：Ice Elves</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$$$$$$\                        $$$$$$$$\ $$\                                </span><br><span class="line">\_$$  _|                       $$  _____|$$ |                               </span><br><span class="line">  $$ |  $$$$$$$\  $$$$$$\      $$ |      $$ |$$\    $$\  $$$$$$\   $$$$$$$\ </span><br><span class="line">  $$ | $$  _____|$$  __$$\     $$$$$\    $$ |\$$\  $$  |$$  __$$\ $$  _____|</span><br><span class="line">  $$ | $$ /      $$$$$$$$ |    $$  __|   $$ | \$$\$$  / $$$$$$$$ |\$$$$$$\  </span><br><span class="line">  $$ | $$ |      $$   ____|    $$ |      $$ |  \$$$  /  $$   ____| \____$$\ </span><br><span class="line">$$$$$$\\$$$$$$$\ \$$$$$$$\     $$$$$$$$\ $$ |   \$  /   \$$$$$$$\ $$$$$$$  |</span><br><span class="line">\______|\_______| \_______|    \________|\__|    \_/     \_______|\_______/ </span><br></pre></td></tr></table></figure>
<h5 id="每个字母前加上-Ansi-字符即可生成彩色艺术字-LOGO"><a href="#每个字母前加上-Ansi-字符即可生成彩色艺术字-LOGO" class="headerlink" title="每个字母前加上 Ansi 字符即可生成彩色艺术字 LOGO"></a>每个字母前加上 Ansi 字符即可生成彩色艺术字 LOGO</h5><p><img src="https://sadness96.github.io/images/blog/csharp-AnsiEscapeCode/IceElves.jpg"/></p>
]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>helper</tag>
        <tag>wpf</tag>
      </tags>
  </entry>
  <entry>
    <title>类库项目中新增 WPF 窗口</title>
    <url>/blog/2018/05/27/csharp-CSProjGUID/</url>
    <content><![CDATA[<h3 id="新创建类库只能添加-WPF-用户控件，无法添加-WPF-窗体"><a href="#新创建类库只能添加-WPF-用户控件，无法添加-WPF-窗体" class="headerlink" title="新创建类库只能添加 WPF 用户控件，无法添加 WPF 窗体"></a>新创建类库只能添加 WPF 用户控件，无法添加 WPF 窗体</h3><span id="more"></span>
<p>通过修改 .csproj 配置文件使类库可以创建 WPF 窗体</p>
<h3 id="修改方法"><a href="#修改方法" class="headerlink" title="修改方法"></a>修改方法</h3><p>组合使用 GUID，新增 ProjectTypeGuids 节点描述一个类库为 C# WPF 类型<br>新增节点 ProjectTypeGuids 至 .csproj 配置文件 Project.PropertyGroup 下<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ProjectTypeGuids</span>&gt;</span>&#123;60dc8134-eba5-43b8-bcc9-bb4bc16c2548&#125;;&#123;FAE04EC0-301F-11D3-BF4B-00C04F79EFBC&#125;<span class="tag">&lt;/<span class="name">ProjectTypeGuids</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="https://sadness96.github.io/images/blog/csharp-CSProjGUID/csproj.png"/></p>
<h3 id="完整的-csproj-文件中的-GUID-列表及其说明"><a href="#完整的-csproj-文件中的-GUID-列表及其说明" class="headerlink" title="完整的 .csproj 文件中的 GUID 列表及其说明"></a>完整的 .csproj 文件中的 GUID 列表及其说明</h3><p><a href="https://www.codeproject.com/Reference/720512/List-of-Visual-Studio-Project-Type-GUIDs">参考资料</a><br>创建项目后，没有一种简单的方法可以在 Visual Studio 项目中更改项目类型。例如，将C＃类库更改为可移植类库（PCL）。了解这些GUID将允许您编辑项目文件 .csproj，.vbproj 以便在 Visual Studio 不允许使用 GUI 的情况下轻松更改项目类型。</p>
<h4 id="By-Description"><a href="#By-Description" class="headerlink" title="By Description"></a>By Description</h4><table>
<thead>
<tr>
<th>Name</th>
<th>Guid</th>
</tr>
</thead>
<tbody>
<tr>
<td>ASP.NET 5</td>
<td>{8BB2217D-0F2D-49D1-97BC-3654ED321F3B}</td>
</tr>
<tr>
<td>ASP.NET MVC 1</td>
<td>{603C0E0B-DB56-11DC-BE95-000D561079B0}</td>
</tr>
<tr>
<td>ASP.NET MVC 2</td>
<td>{F85E285D-A4E0-4152-9332-AB1D724D3325}</td>
</tr>
<tr>
<td>ASP.NET MVC 3</td>
<td>{E53F8FEA-EAE0-44A6-8774-FFD645390401}</td>
</tr>
<tr>
<td>ASP.NET MVC 4</td>
<td>{E3E379DF-F4C6-4180-9B81-6769533ABE47}</td>
</tr>
<tr>
<td>ASP.NET MVC 5</td>
<td>{349C5851-65DF-11DA-9384-00065B846F21}</td>
</tr>
<tr>
<td>C#</td>
<td>{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</td>
</tr>
<tr>
<td>C++</td>
<td>{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}</td>
</tr>
<tr>
<td>Database</td>
<td>{A9ACE9BB-CECE-4E62-9AA4-C7E7C5BD2124}</td>
</tr>
<tr>
<td>Database (other project types)</td>
<td>{4F174C21-8C12-11D0-8340-0000F80270F8}</td>
</tr>
<tr>
<td>Deployment Cab</td>
<td>{3EA9E505-35AC-4774-B492-AD1749C4943A}</td>
</tr>
<tr>
<td>Deployment Merge Module</td>
<td>{06A35CCD-C46D-44D5-987B-CF40FF872267}</td>
</tr>
<tr>
<td>Deployment Setup</td>
<td>{978C614F-708E-4E1A-B201-565925725DBA}</td>
</tr>
<tr>
<td>Deployment Smart Device Cab</td>
<td>{AB322303-2255-48EF-A496-5904EB18DA55}</td>
</tr>
<tr>
<td>Distributed System</td>
<td>{F135691A-BF7E-435D-8960-F99683D2D49C}</td>
</tr>
<tr>
<td>Dynamics 2012 AX C# in AOT</td>
<td>{BF6F8E12-879D-49E7-ADF0-5503146B24B8}</td>
</tr>
<tr>
<td>F#</td>
<td>{F2A71F9B-5D33-465A-A702-920D77279786}</td>
</tr>
<tr>
<td>J#</td>
<td>{E6FDF86B-F3D1-11D4-8576-0002A516ECE8}</td>
</tr>
<tr>
<td>Legacy (2003) Smart Device (C#)</td>
<td>{20D4826A-C6FA-45DB-90F4-C717570B9F32}</td>
</tr>
<tr>
<td>Legacy (2003) Smart Device (VB.NET)</td>
<td>{CB4CE8C6-1BDB-4DC7-A4D3-65A1999772F8}</td>
</tr>
<tr>
<td>Micro Framework</td>
<td>{b69e3092-b931-443c-abe7-7e7b65f2a37f}</td>
</tr>
<tr>
<td>Model-View-Controller v2 (MVC 2)</td>
<td>{F85E285D-A4E0-4152-9332-AB1D724D3325}</td>
</tr>
<tr>
<td>Model-View-Controller v3 (MVC 3)</td>
<td>{E53F8FEA-EAE0-44A6-8774-FFD645390401}</td>
</tr>
<tr>
<td>Model-View-Controller v4 (MVC 4)</td>
<td>{E3E379DF-F4C6-4180-9B81-6769533ABE47}</td>
</tr>
<tr>
<td>Model-View-Controller v5 (MVC 5)</td>
<td>{349C5851-65DF-11DA-9384-00065B846F21}</td>
</tr>
<tr>
<td>Mono for Android</td>
<td>{EFBA0AD7-5A72-4C68-AF49-83D382785DCF}</td>
</tr>
<tr>
<td>MonoTouch</td>
<td>{6BC8ED88-2882-458C-8E55-DFD12B67127B}</td>
</tr>
<tr>
<td>MonoTouch Binding</td>
<td>{F5B4F3BC-B597-4E2B-B552-EF5D8A32436F}</td>
</tr>
<tr>
<td>Portable Class Library</td>
<td>{786C830F-07A1-408B-BD7F-6EE04809D6DB}</td>
</tr>
<tr>
<td>Project Folders</td>
<td>{66A26720-8FB5-11D2-AA7E-00C04F688DDE}</td>
</tr>
<tr>
<td>SharePoint (C#)</td>
<td>{593B0543-81F6-4436-BA1E-4747859CAAE2}</td>
</tr>
<tr>
<td>SharePoint (VB.NET)</td>
<td>{EC05E597-79D4-47f3-ADA0-324C4F7C7484}</td>
</tr>
<tr>
<td>SharePoint Workflow</td>
<td>{F8810EC1-6754-47FC-A15F-DFABD2E3FA90}</td>
</tr>
<tr>
<td>Silverlight</td>
<td>{A1591282-1198-4647-A2B1-27E5FF5F6F3B}</td>
</tr>
<tr>
<td>Smart Device (C#)</td>
<td>{4D628B5B-2FBC-4AA6-8C16-197242AEB884}</td>
</tr>
<tr>
<td>Smart Device (VB.NET)</td>
<td>{68B1623D-7FB9-47D8-8664-7ECEA3297D4F}</td>
</tr>
<tr>
<td>Solution Folder</td>
<td>{2150E333-8FDC-42A3-9474-1A3956D46DE8}</td>
</tr>
<tr>
<td>Test</td>
<td>{3AC096D0-A1C2-E12C-1390-A8335801FDAB}</td>
</tr>
<tr>
<td>Universal Windows Class Library</td>
<td>{A5A43C5B-DE2A-4C0C-9213-0A381AF9435A}</td>
</tr>
<tr>
<td>VB.NET</td>
<td>{F184B08F-C81C-45F6-A57F-5ABD9991F28F}</td>
</tr>
<tr>
<td>Visual Database Tools</td>
<td>{C252FEB5-A946-4202-B1D4-9916A0590387}</td>
</tr>
<tr>
<td>Visual Studio 2015 Installer Project Extension</td>
<td>{54435603-DBB4-11D2-8724-00A0C9A8B90C}</td>
</tr>
<tr>
<td>Visual Studio Tools for Applications (VSTA)</td>
<td>{A860303F-1F3F-4691-B57E-529FC101A107}</td>
</tr>
<tr>
<td>Visual Studio Tools for Office (VSTO)</td>
<td>{BAA0C2D2-18E2-41B9-852F-F413020CAA33}</td>
</tr>
<tr>
<td>Web Application</td>
<td>{349C5851-65DF-11DA-9384-00065B846F21}</td>
</tr>
<tr>
<td>Web Site</td>
<td>{E24C65DC-7377-472B-9ABA-BC803B73C61A}</td>
</tr>
<tr>
<td>Windows (C#)</td>
<td>{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</td>
</tr>
<tr>
<td>Windows (VB.NET)</td>
<td>{F184B08F-C81C-45F6-A57F-5ABD9991F28F}</td>
</tr>
<tr>
<td>Windows (Visual C++)</td>
<td>{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}</td>
</tr>
<tr>
<td>Windows Communication Foundation (WCF)</td>
<td>{3D9AD99F-2412-4246-B90B-4EAA41C64699}</td>
</tr>
<tr>
<td>Windows Phone 8/8.1 Blank/Hub/Webview App</td>
<td>{76F1466A-8B6D-4E39-A767-685A06062A39}</td>
</tr>
<tr>
<td>Windows Phone 8/8.1 App (C#)</td>
<td>{C089C8C0-30E0-4E22-80C0-CE093F111A43}</td>
</tr>
<tr>
<td>Windows Phone 8/8.1 App (VB.NET)</td>
<td>{DB03555F-0C8B-43BE-9FF9-57896B3C5E56}</td>
</tr>
<tr>
<td>Windows Presentation Foundation (WPF)</td>
<td>{60DC8134-EBA5-43B8-BCC9-BB4BC16C2548}</td>
</tr>
<tr>
<td>Windows Store (Metro) Apps &amp; Components</td>
<td>{BC8A1FFA-BEE3-4634-8014-F334798102B3}</td>
</tr>
<tr>
<td>Workflow (C#)</td>
<td>{14822709-B5A1-4724-98CA-57A101D1B079}</td>
</tr>
<tr>
<td>Workflow (VB.NET)</td>
<td>{D59BE175-2ED0-4C54-BE3D-CDAA9F3214C8}</td>
</tr>
<tr>
<td>Workflow Foundation</td>
<td>{32F31D43-81CC-4C15-9DE6-3FC5453562B6}</td>
</tr>
<tr>
<td>Xamarin.Android</td>
<td>{EFBA0AD7-5A72-4C68-AF49-83D382785DCF}</td>
</tr>
<tr>
<td>Xamarin.iOS</td>
<td>{6BC8ED88-2882-458C-8E55-DFD12B67127B}</td>
</tr>
<tr>
<td>XNA (Windows)</td>
<td>{6D335F3A-9D43-41b4-9D22-F6F17C4BE596}</td>
</tr>
<tr>
<td>XNA (XBox)</td>
<td>{2DF5C3F4-5A5F-47a9-8E94-23B4456F55E2}</td>
</tr>
<tr>
<td>XNA (Zune)</td>
<td>{D399B71A-8929-442a-A9AC-8BEC78BB2433}</td>
</tr>
</tbody>
</table>
<h4 id="By-GUID"><a href="#By-GUID" class="headerlink" title="By GUID"></a>By GUID</h4><table>
<thead>
<tr>
<th>Name</th>
<th>Guid</th>
</tr>
</thead>
<tbody>
<tr>
<td>Deployment Merge Module</td>
<td>{06A35CCD-C46D-44D5-987B-CF40FF872267}</td>
</tr>
<tr>
<td>Workflow (C#)</td>
<td>{14822709-B5A1-4724-98CA-57A101D1B079}</td>
</tr>
<tr>
<td>Legacy (2003) Smart Device (C#)</td>
<td>{20D4826A-C6FA-45DB-90F4-C717570B9F32}</td>
</tr>
<tr>
<td>Solution Folder</td>
<td>{2150E333-8FDC-42A3-9474-1A3956D46DE8}</td>
</tr>
<tr>
<td>XNA (XBox)</td>
<td>{2DF5C3F4-5A5F-47a9-8E94-23B4456F55E2}</td>
</tr>
<tr>
<td>Workflow Foundation</td>
<td>{32F31D43-81CC-4C15-9DE6-3FC5453562B6}</td>
</tr>
<tr>
<td>Web Application (incl. MVC 5)</td>
<td>{349C5851-65DF-11DA-9384-00065B846F21}</td>
</tr>
<tr>
<td>Test</td>
<td>{3AC096D0-A1C2-E12C-1390-A8335801FDAB}</td>
</tr>
<tr>
<td>Windows Communication Foundation (WCF)</td>
<td>{3D9AD99F-2412-4246-B90B-4EAA41C64699}</td>
</tr>
<tr>
<td>Deployment Cab</td>
<td>{3EA9E505-35AC-4774-B492-AD1749C4943A}</td>
</tr>
<tr>
<td>Smart Device (C#)</td>
<td>{4D628B5B-2FBC-4AA6-8C16-197242AEB884}</td>
</tr>
<tr>
<td>Database (other project types)</td>
<td>{4F174C21-8C12-11D0-8340-0000F80270F8}</td>
</tr>
<tr>
<td>Visual Studio 2015 Installer Project Extension</td>
<td>{54435603-DBB4-11D2-8724-00A0C9A8B90C}</td>
</tr>
<tr>
<td>SharePoint (C#)</td>
<td>{593B0543-81F6-4436-BA1E-4747859CAAE2}</td>
</tr>
<tr>
<td>ASP.NET MVC 1.0</td>
<td>{603C0E0B-DB56-11DC-BE95-000D561079B0}</td>
</tr>
<tr>
<td>Windows Presentation Foundation (WPF)</td>
<td>{60DC8134-EBA5-43B8-BCC9-BB4BC16C2548}</td>
</tr>
<tr>
<td>Smart Device (VB.NET)</td>
<td>{68B1623D-7FB9-47D8-8664-7ECEA3297D4F}</td>
</tr>
<tr>
<td>Project Folders</td>
<td>{66A26720-8FB5-11D2-AA7E-00C04F688DDE}</td>
</tr>
<tr>
<td>MonoTouch</td>
<td>{6BC8ED88-2882-458C-8E55-DFD12B67127B}</td>
</tr>
<tr>
<td>XNA (Windows)</td>
<td>{6D335F3A-9D43-41b4-9D22-F6F17C4BE596}</td>
</tr>
<tr>
<td>Windows Phone 8/8.1 Blank/Hub/Webview App</td>
<td>{76F1466A-8B6D-4E39-A767-685A06062A39}</td>
</tr>
<tr>
<td>Portable Class Library</td>
<td>{786C830F-07A1-408B-BD7F-6EE04809D6DB}</td>
</tr>
<tr>
<td>ASP.NET 5</td>
<td>{8BB2217D-0F2D-49D1-97BC-3654ED321F3B}</td>
</tr>
<tr>
<td>C++</td>
<td>{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}</td>
</tr>
<tr>
<td>Deployment Setup</td>
<td>{978C614F-708E-4E1A-B201-565925725DBA}</td>
</tr>
<tr>
<td>Silverlight</td>
<td>{A1591282-1198-4647-A2B1-27E5FF5F6F3B}</td>
</tr>
<tr>
<td>Universal Windows Class Library</td>
<td>{A5A43C5B-DE2A-4C0C-9213-0A381AF9435A}</td>
</tr>
<tr>
<td>Visual Studio Tools for Applications (VSTA)</td>
<td>{A860303F-1F3F-4691-B57E-529FC101A107}</td>
</tr>
<tr>
<td>Database</td>
<td>{A9ACE9BB-CECE-4E62-9AA4-C7E7C5BD2124}</td>
</tr>
<tr>
<td>Deployment Smart Device Cab</td>
<td>{AB322303-2255-48EF-A496-5904EB18DA55}</td>
</tr>
<tr>
<td>Micro Frmeworkv</td>
<td>{B69E3092-B931-443C-ABE7-7E7B65F2A37F}</td>
</tr>
<tr>
<td>Visual Studio Tools for Office (VSTO)</td>
<td>{BAA0C2D2-18E2-41B9-852F-F413020CAA33}</td>
</tr>
<tr>
<td>Windows Store Apps (Metro Apps)</td>
<td>{BC8A1FFA-BEE3-4634-8014-F334798102B3}</td>
</tr>
<tr>
<td>C# in Dynamics 2012 AX AOT</td>
<td>{BF6F8E12-879D-49E7-ADF0-5503146B24B8}</td>
</tr>
<tr>
<td>Windows Phone 8/8.1 App (C#)</td>
<td>{C089C8C0-30E0-4E22-80C0-CE093F111A43}</td>
</tr>
<tr>
<td>Visual Database Tools</td>
<td>{C252FEB5-A946-4202-B1D4-9916A0590387}</td>
</tr>
<tr>
<td>Legacy (2003) Smart Device (VB.NET)</td>
<td>{CB4CE8C6-1BDB-4DC7-A4D3-65A1999772F8}</td>
</tr>
<tr>
<td>XNA (Zune)</td>
<td>{D399B71A-8929-442a-A9AC-8BEC78BB2433}</td>
</tr>
<tr>
<td>Workflow (VB.NET)</td>
<td>{D59BE175-2ED0-4C54-BE3D-CDAA9F3214C8}</td>
</tr>
<tr>
<td>Windows Phone 8/8.1 App (VB.NET)</td>
<td>{DB03555F-0C8B-43BE-9FF9-57896B3C5E56}</td>
</tr>
<tr>
<td>Web Site</td>
<td>{E24C65DC-7377-472B-9ABA-BC803B73C61A}</td>
</tr>
<tr>
<td>ASP.NET MVC 4.0</td>
<td>{E3E379DF-F4C6-4180-9B81-6769533ABE47}</td>
</tr>
<tr>
<td>ASP.NET MVC 3.0</td>
<td>{E53F8FEA-EAE0-44A6-8774-FFD645390401}</td>
</tr>
<tr>
<td>J#</td>
<td>{E6FDF86B-F3D1-11D4-8576-0002A516ECE8}</td>
</tr>
<tr>
<td>SharePoint (VB.NET)</td>
<td>{EC05E597-79D4-47f3-ADA0-324C4F7C7484}</td>
</tr>
<tr>
<td>Xamarin.Android / Mono for Android</td>
<td>{EFBA0AD7-5A72-4C68-AF49-83D382785DCF}</td>
</tr>
<tr>
<td>Distributed System</td>
<td>{F135691A-BF7E-435D-8960-F99683D2D49C}</td>
</tr>
<tr>
<td>VB.NET</td>
<td>{F184B08F-C81C-45F6-A57F-5ABD9991F28F}</td>
</tr>
<tr>
<td>F#</td>
<td>{F2A71F9B-5D33-465A-A702-920D77279786}</td>
</tr>
<tr>
<td>MonoTouch Binding</td>
<td>{F5B4F3BC-B597-4E2B-B552-EF5D8A32436F}</td>
</tr>
<tr>
<td>ASP.NET MVC 2.0</td>
<td>{F85E285D-A4E0-4152-9332-AB1D724D3325}</td>
</tr>
<tr>
<td>SharePoint Workflow</td>
<td>{F8810EC1-6754-47FC-A15F-DFABD2E3FA90}</td>
</tr>
<tr>
<td>C#</td>
<td>{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>wpf</tag>
      </tags>
  </entry>
  <entry>
    <title>CSV文件帮助类</title>
    <url>/blog/2017/06/21/csharp-CSVHelper/</url>
    <content><![CDATA[<h3 id="操作-CSV-文件帮助类"><a href="#操作-CSV-文件帮助类" class="headerlink" title="操作 CSV 文件帮助类"></a>操作 CSV 文件帮助类</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>工作中用户提供 CSV 文件作为参考数据使用，需要读取到系统中进行相关计算<br><a href="https://baike.baidu.com/item/CSV/10739?fr=aladdin">CSV</a>（逗号分隔值文件格式）其文件以纯文本形式存储表格数据，分隔字符也可以不是逗号，可用Excel编辑的表格文件。<br><a href="https://github.com/Sadness96/Sadness/blob/master/Code/Helper/FileIO.Helper/CSV/CSVHelper.cs">CSVHelper</a> 帮助类主要提供内存表格DataTable互相转换，以正则表达式与截取拼接。</p>
<h4 id="CSV文件操作"><a href="#CSV文件操作" class="headerlink" title="CSV文件操作"></a>CSV文件操作</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> DataTable转换为CSV</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strSource&quot;&gt;</span>CSV文件路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;dtSourceData&quot;&gt;</span>DataTable数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">DataTableConversionCSV</span>(<span class="params"><span class="built_in">string</span> strSource, DataTable dtSourceData</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strSource) || dtSourceData.Rows.Count &lt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        FileStream fileStream = <span class="keyword">new</span> FileStream(Path.ChangeExtension(strSource, <span class="string">&quot;csv&quot;</span>), FileMode.Create);</span><br><span class="line">        StreamWriter streamWriter = <span class="keyword">new</span> StreamWriter(fileStream);</span><br><span class="line">        <span class="comment">//记录当前读取到的一行数据</span></span><br><span class="line">        <span class="built_in">string</span> strRowOfData = <span class="built_in">string</span>.Empty;</span><br><span class="line">        <span class="comment">//循环保存列名</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> iColumnsName = <span class="number">0</span>; iColumnsName &lt; dtSourceData.Columns.Count; iColumnsName++)</span><br><span class="line">        &#123;</span><br><span class="line">            strRowOfData += <span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&#123;0&#125;&quot;</span>, <span class="string">&quot;\&quot;&quot;</span>, dtSourceData.Columns[iColumnsName].ColumnName.ToString());</span><br><span class="line">            <span class="keyword">if</span> (iColumnsName &lt; dtSourceData.Columns.Count - <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                strRowOfData += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        streamWriter.WriteLine(strRowOfData);</span><br><span class="line">        <span class="comment">//循环保存数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> iRow = <span class="number">0</span>; iRow &lt; dtSourceData.Rows.Count; iRow++)</span><br><span class="line">        &#123;</span><br><span class="line">            strRowOfData = <span class="built_in">string</span>.Empty;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> iColumns = <span class="number">0</span>; iColumns &lt; dtSourceData.Columns.Count; iColumns++)</span><br><span class="line">            &#123;</span><br><span class="line">                strRowOfData += <span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&#123;0&#125;&quot;</span>, <span class="string">&quot;\&quot;&quot;</span>, dtSourceData.Rows[iRow][iColumns].ToString());</span><br><span class="line">                <span class="keyword">if</span> (iColumns &lt; dtSourceData.Columns.Count - <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    strRowOfData += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            streamWriter.WriteLine(strRowOfData);</span><br><span class="line">        &#125;</span><br><span class="line">        streamWriter.Close();</span><br><span class="line">        fileStream.Close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> CSV转换为DataTable(默认 UTF8 编码)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strSource&quot;&gt;</span>CSV文件路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回CSV的DataTable,失败返回NULL<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataTable <span class="title">CSVConversionDataTable</span>(<span class="params"><span class="built_in">string</span> strSource</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strSource) || !File.Exists(strSource))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        DataTable dtTargetData = <span class="keyword">new</span> DataTable();</span><br><span class="line">        <span class="comment">//初始化 System.IO.FileStream 类的新实例</span></span><br><span class="line">        FileStream fileStreamOpen = <span class="keyword">new</span> FileStream(strSource, FileMode.Open, FileAccess.Read);</span><br><span class="line">        <span class="comment">//从当前流中读取一行字符并将数据作为字符串返回</span></span><br><span class="line">        StreamReader streamReader = <span class="keyword">new</span> StreamReader(fileStreamOpen, Encoding.UTF8);</span><br><span class="line">        <span class="comment">//记录当前读取到的一行数据</span></span><br><span class="line">        <span class="built_in">string</span> strRowOfData;</span><br><span class="line">        <span class="comment">//记录当前是否为标题行</span></span><br><span class="line">        <span class="built_in">bool</span> boolIsFirst = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//循环获得CSV文件数据</span></span><br><span class="line">        <span class="keyword">while</span> ((strRowOfData = streamReader.ReadLine()) != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//从当前 System.String 对象中移除所有前导和尾随空白字符</span></span><br><span class="line">            strRowOfData.Trim();</span><br><span class="line">            <span class="comment">//替换两遍连续两个 ,, 为 ,&quot;&quot;,(希望数据里不存在两个逗号相连的情况)</span></span><br><span class="line">            strRowOfData = strRowOfData.Replace(<span class="string">&quot;,,&quot;</span>, <span class="string">&quot;,\&quot;\&quot;,&quot;</span>);</span><br><span class="line">            strRowOfData = strRowOfData.Replace(<span class="string">&quot;,,&quot;</span>, <span class="string">&quot;,\&quot;\&quot;,&quot;</span>);</span><br><span class="line">            <span class="comment">//如果截取第一个字符是 &#x27;,&#x27; 则在最前面加双引号</span></span><br><span class="line">            <span class="keyword">if</span> (strRowOfData.Substring(<span class="number">0</span>, <span class="number">1</span>) == <span class="string">&quot;,&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                strRowOfData = <span class="built_in">string</span>.Format(<span class="string">&quot;\&quot;\&quot;&#123;0&#125;&quot;</span>, strRowOfData);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//根据CSV规则分割字符串</span></span><br><span class="line">            <span class="built_in">string</span> strRegexCSV = <span class="built_in">string</span>.Format(<span class="string">&quot;[^\&quot;,]+|\&quot;(?:[^\&quot;]|\&quot;\&quot;)*\&quot;&quot;</span>);</span><br><span class="line">            Regex regexCSV = <span class="keyword">new</span> Regex(strRegexCSV);</span><br><span class="line">            MatchCollection matchCollection = regexCSV.Matches(strRowOfData);</span><br><span class="line">            <span class="comment">//判断是否为标题行</span></span><br><span class="line">            <span class="keyword">if</span> (boolIsFirst)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">foreach</span> (Match mColumnValue <span class="keyword">in</span> matchCollection)</span><br><span class="line">                &#123;</span><br><span class="line">                    dtTargetData.Columns.Add(InterceptionQuotes(mColumnValue.Value));</span><br><span class="line">                &#125;</span><br><span class="line">                boolIsFirst = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                DataRow drTargetData = dtTargetData.NewRow();</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> iColumn = <span class="number">0</span>; iColumn &lt; dtTargetData.Columns.Count &amp;&amp; iColumn &lt; matchCollection.Count; iColumn++)</span><br><span class="line">                &#123;</span><br><span class="line">                    drTargetData[iColumn] = InterceptionQuotes(matchCollection[iColumn].Value);</span><br><span class="line">                &#125;</span><br><span class="line">                dtTargetData.Rows.Add(drTargetData);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        streamReader.Close();</span><br><span class="line">        fileStreamOpen.Close();</span><br><span class="line">        <span class="keyword">return</span> dtTargetData;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> CSV转换为DataTable</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strSource&quot;&gt;</span>CSV文件路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;encoding&quot;&gt;</span>The character encoding to use.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回CSV的DataTable,失败返回NULL<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataTable <span class="title">CSVConversionDataTable</span>(<span class="params"><span class="built_in">string</span> strSource, Encoding encoding</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strSource) || !File.Exists(strSource))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        DataTable dtTargetData = <span class="keyword">new</span> DataTable();</span><br><span class="line">        <span class="comment">//初始化 System.IO.FileStream 类的新实例</span></span><br><span class="line">        FileStream fileStreamOpen = <span class="keyword">new</span> FileStream(strSource, FileMode.Open, FileAccess.Read);</span><br><span class="line">        <span class="comment">//从当前流中读取一行字符并将数据作为字符串返回</span></span><br><span class="line">        StreamReader streamReader = <span class="keyword">new</span> StreamReader(fileStreamOpen, encoding);</span><br><span class="line">        <span class="comment">//记录当前读取到的一行数据</span></span><br><span class="line">        <span class="built_in">string</span> strRowOfData;</span><br><span class="line">        <span class="comment">//记录当前是否为标题行</span></span><br><span class="line">        <span class="built_in">bool</span> boolIsFirst = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//循环获得CSV文件数据</span></span><br><span class="line">        <span class="keyword">while</span> ((strRowOfData = streamReader.ReadLine()) != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//从当前 System.String 对象中移除所有前导和尾随空白字符</span></span><br><span class="line">            strRowOfData.Trim();</span><br><span class="line">            <span class="comment">//替换两遍连续两个 ,, 为 ,&quot;&quot;,(希望数据里不存在两个逗号相连的情况)</span></span><br><span class="line">            strRowOfData = strRowOfData.Replace(<span class="string">&quot;,,&quot;</span>, <span class="string">&quot;,\&quot;\&quot;,&quot;</span>);</span><br><span class="line">            strRowOfData = strRowOfData.Replace(<span class="string">&quot;,,&quot;</span>, <span class="string">&quot;,\&quot;\&quot;,&quot;</span>);</span><br><span class="line">            <span class="comment">//如果截取第一个字符是 &#x27;,&#x27; 则在最前面加双引号</span></span><br><span class="line">            <span class="keyword">if</span> (strRowOfData.Substring(<span class="number">0</span>, <span class="number">1</span>) == <span class="string">&quot;,&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                strRowOfData = <span class="built_in">string</span>.Format(<span class="string">&quot;\&quot;\&quot;&#123;0&#125;&quot;</span>, strRowOfData);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//根据CSV规则分割字符串</span></span><br><span class="line">            <span class="built_in">string</span> strRegexCSV = <span class="built_in">string</span>.Format(<span class="string">&quot;[^\&quot;,]+|\&quot;(?:[^\&quot;]|\&quot;\&quot;)*\&quot;&quot;</span>);</span><br><span class="line">            Regex regexCSV = <span class="keyword">new</span> Regex(strRegexCSV);</span><br><span class="line">            MatchCollection matchCollection = regexCSV.Matches(strRowOfData);</span><br><span class="line">            <span class="comment">//判断是否为标题行</span></span><br><span class="line">            <span class="keyword">if</span> (boolIsFirst)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">foreach</span> (Match mColumnValue <span class="keyword">in</span> matchCollection)</span><br><span class="line">                &#123;</span><br><span class="line">                    dtTargetData.Columns.Add(InterceptionQuotes(mColumnValue.Value));</span><br><span class="line">                &#125;</span><br><span class="line">                boolIsFirst = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                DataRow drTargetData = dtTargetData.NewRow();</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> iColumn = <span class="number">0</span>; iColumn &lt; dtTargetData.Columns.Count &amp;&amp; iColumn &lt; matchCollection.Count; iColumn++)</span><br><span class="line">                &#123;</span><br><span class="line">                    drTargetData[iColumn] = InterceptionQuotes(matchCollection[iColumn].Value);</span><br><span class="line">                &#125;</span><br><span class="line">                dtTargetData.Rows.Add(drTargetData);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        streamReader.Close();</span><br><span class="line">        fileStreamOpen.Close();</span><br><span class="line">        <span class="keyword">return</span> dtTargetData;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 截取字符串前后双引号</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strSource&quot;&gt;</span>源字符串<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>截取后字符串<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">InterceptionQuotes</span>(<span class="params"><span class="built_in">string</span> strSource</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (strSource[<span class="number">0</span>] == <span class="string">&#x27;\&quot;&#x27;</span> &amp;&amp; strSource[strSource.Length - <span class="number">1</span>] == <span class="string">&#x27;\&quot;&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> strSource.Substring(<span class="number">1</span>, strSource.Length - <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> strSource;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>helper</tag>
        <tag>csv</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Release 下输出堆栈信息</title>
    <url>/blog/2020/11/25/csharp-CallerMemberName/</url>
    <content><![CDATA[<h3 id="使用-CallerMemberNameAttribute-类获取堆栈信息"><a href="#使用-CallerMemberNameAttribute-类获取堆栈信息" class="headerlink" title="使用 CallerMemberNameAttribute 类获取堆栈信息"></a>使用 CallerMemberNameAttribute 类获取堆栈信息</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>在项目中需要在打印日志同时打印堆栈信息，通常使用 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.diagnostics.stacktrace">StackTrace</a> 来捕获堆栈信息，并跟随日志一同打印，但是生产环境部署通常使用 Release 方式打包，这会导致 StackTrace 方法失效。测试改用 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/System.Runtime.CompilerServices.CallerMemberNameAttribute">CallerMemberNameAttribute</a> 方式可以解决。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><h5 id="StackTrace-方式获取堆栈信息"><a href="#StackTrace-方式获取堆栈信息" class="headerlink" title="StackTrace 方式获取堆栈信息"></a>StackTrace 方式获取堆栈信息</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SaveError</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> stackTrace = <span class="keyword">new</span> StackTrace(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">var</span> stackFrame = stackTrace.GetFrame(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (stackFrame != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        logger.Error(<span class="string">$&quot;[<span class="subst">&#123;stackFrame?.GetMethod()?.DeclaringType?.Name&#125;</span>][<span class="subst">&#123;stackFrame?.GetMethod()?.Name&#125;</span>] <span class="subst">&#123;message&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="CallerMemberNameAttribute-改用方式获取堆栈信息"><a href="#CallerMemberNameAttribute-改用方式获取堆栈信息" class="headerlink" title="CallerMemberNameAttribute 改用方式获取堆栈信息"></a>CallerMemberNameAttribute 改用方式获取堆栈信息</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SaveError</span>(<span class="params"><span class="built_in">string</span> message,</span></span></span><br><span class="line"><span class="function"><span class="params">[System.Runtime.CompilerServices.CallerMemberName] <span class="built_in">string</span> memberName = <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">[System.Runtime.CompilerServices.CallerFilePath] <span class="built_in">string</span> sourceFilePath = <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">[System.Runtime.CompilerServices.CallerLineNumber] <span class="built_in">int</span> sourceLineNumber = <span class="number">0</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    logger.Error(<span class="string">$&quot;[<span class="subst">&#123;System.IO.Path.GetFileName(sourceFilePath)&#125;</span>][<span class="subst">&#123;memberName&#125;</span>] <span class="subst">&#123;message&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>.net core</tag>
        <tag>stack</tag>
      </tags>
  </entry>
  <entry>
    <title>Cat020 报文解析</title>
    <url>/blog/2019/09/09/csharp-Cat020015/</url>
    <content><![CDATA[<h3 id="MLAT-CAT020-0-15-报文协议解析"><a href="#MLAT-CAT020-0-15-报文协议解析" class="headerlink" title="MLAT CAT020 0.15 报文协议解析"></a>MLAT CAT020 0.15 报文协议解析</h3><span id="more"></span>
<h3 id="简介-声明"><a href="#简介-声明" class="headerlink" title="简介/声明"></a>简介/声明</h3><p>多点定位(MLAT) 全称是 Multilateration，多点定位技术利用多个地面接收机接收到机载应答机信号的时间差，计算得出飞机位置。</p>
<p>解析文档均为<a href="https://www.eurocontrol.int/">欧洲航空交通管理</a>官方提供。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><h3 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h3><p><a href="https://www.eurocontrol.int">EuroControl</a>：<a href="https://www.eurocontrol.int/sites/default/files/2019-06/cat020-asterix-mlt-messages-part-14.pdf">cat020p14ed15.pdf</a></p>
<h2 id="测试数据解析"><a href="#测试数据解析" class="headerlink" title="测试数据解析"></a>测试数据解析</h2><p>14 00 46 FF 0F 01 84 16 07 41 10 A1 A0 BB 00 57 8B 48 01 44 DC F6 00 17 06 00 1F AD 0E F2 02 78 10 45 80 0C 54 F2 DB 3C 60 00 02 20 40 19 98 D0 00 00 00 00 00 01 00 0C 00 0C 00 03 00 06 00 05 00 05 A1 A0 C2 00</p>
<h3 id="解析步骤"><a href="#解析步骤" class="headerlink" title="解析步骤"></a>解析步骤</h3><h4 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h4><table>
<thead>
<tr>
<th>CAT = 020</th>
<th>LEN</th>
<th>FSPEC</th>
<th>Items of the first record</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<h4 id="解析报文区域数据"><a href="#解析报文区域数据" class="headerlink" title="解析报文区域数据"></a>解析报文区域数据</h4><table>
<thead>
<tr>
<th>16进制代码</th>
<th>解析值（二进制或十进制）</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>0x14</td>
<td>20</td>
<td>报文头，转换十进制为20</td>
</tr>
<tr>
<td>0x00</td>
<td>00</td>
<td>报文长度起始位</td>
</tr>
<tr>
<td>0x46</td>
<td>70</td>
<td>报文长度 LEN，为报文数据字节数，两个字节表示，该报文长度为0x00*256+0x46=0x46=70字节</td>
</tr>
<tr>
<td>FF</td>
<td>1111 1111</td>
<td>I020/010、I020/020、I020/140、I020/041、I020/042、I020/161、I020/170</td>
</tr>
<tr>
<td>0F</td>
<td>0000 1111</td>
<td>I020/220、I020/245、I020/110</td>
</tr>
<tr>
<td>01</td>
<td>0000 0001</td>
<td></td>
</tr>
<tr>
<td>84</td>
<td>1000 0100</td>
<td>I020/230、RE</td>
</tr>
<tr>
<td>16</td>
<td>22</td>
<td></td>
</tr>
<tr>
<td>07</td>
<td>7</td>
<td>I020/010 数据源的标识符</td>
</tr>
<tr>
<td>41</td>
<td>65</td>
<td></td>
</tr>
<tr>
<td>10</td>
<td>16</td>
<td>I020/020 目标报告描述符</td>
</tr>
<tr>
<td>A1</td>
<td>161</td>
<td></td>
</tr>
<tr>
<td>A0</td>
<td>160</td>
<td></td>
</tr>
<tr>
<td>BB</td>
<td>187</td>
<td><a href="#1020140">I020/140</a> 日时间项</td>
</tr>
<tr>
<td>00</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td>57</td>
<td>87</td>
<td></td>
</tr>
<tr>
<td>8B</td>
<td>139</td>
<td></td>
</tr>
<tr>
<td>48</td>
<td>72</td>
<td></td>
</tr>
<tr>
<td>01</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>44</td>
<td>68</td>
<td></td>
</tr>
<tr>
<td>DC</td>
<td>220</td>
<td></td>
</tr>
<tr>
<td>F6</td>
<td>246</td>
<td><a href="#1020041">I020/041</a> 位置坐标（WGS-84）项</td>
</tr>
<tr>
<td>00</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td>17</td>
<td>23</td>
<td></td>
</tr>
<tr>
<td>06</td>
<td>6</td>
<td></td>
</tr>
<tr>
<td>00</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td>1F</td>
<td>31</td>
<td></td>
</tr>
<tr>
<td>AD</td>
<td>173</td>
<td><a href="#1020042">I020/042</a> 在笛卡尔坐标中的位置</td>
</tr>
<tr>
<td>0E</td>
<td>14</td>
<td></td>
</tr>
<tr>
<td>F2</td>
<td>242</td>
<td><a href="#1020161">I020/161</a> 跟踪号码</td>
</tr>
<tr>
<td>02</td>
<td>2</td>
<td>I020/170 追踪发送状态</td>
</tr>
<tr>
<td>78</td>
<td>120</td>
<td></td>
</tr>
<tr>
<td>10</td>
<td>16</td>
<td></td>
</tr>
<tr>
<td>45</td>
<td>69</td>
<td>I020/220 目标地址</td>
</tr>
<tr>
<td>80</td>
<td>128</td>
<td></td>
</tr>
<tr>
<td>0C</td>
<td>12</td>
<td></td>
</tr>
<tr>
<td>54</td>
<td>84</td>
<td></td>
</tr>
<tr>
<td>F2</td>
<td>242</td>
<td></td>
</tr>
<tr>
<td>DB</td>
<td>219</td>
<td></td>
</tr>
<tr>
<td>3C</td>
<td>60</td>
<td></td>
</tr>
<tr>
<td>60</td>
<td>96</td>
<td><a href="#1020245">I020/245</a> 目标识别 航班号</td>
</tr>
<tr>
<td>00</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td>02</td>
<td>2</td>
<td><a href="#1020110">I020/110</a> 测量高度(笛卡尔坐标)</td>
</tr>
<tr>
<td>20</td>
<td>32</td>
<td></td>
</tr>
<tr>
<td>40</td>
<td>64</td>
<td>I020/230 通讯/自动识别系统的能力和飞行状态</td>
</tr>
<tr>
<td>19</td>
<td></td>
<td></td>
</tr>
<tr>
<td>98</td>
<td></td>
<td></td>
</tr>
<tr>
<td>D0</td>
<td></td>
<td></td>
</tr>
<tr>
<td>00</td>
<td></td>
<td></td>
</tr>
<tr>
<td>00</td>
<td></td>
<td></td>
</tr>
<tr>
<td>00</td>
<td></td>
<td></td>
</tr>
<tr>
<td>00</td>
<td></td>
<td></td>
</tr>
<tr>
<td>00</td>
<td></td>
<td></td>
</tr>
<tr>
<td>01</td>
<td></td>
<td></td>
</tr>
<tr>
<td>00</td>
<td></td>
<td></td>
</tr>
<tr>
<td>0C</td>
<td></td>
<td></td>
</tr>
<tr>
<td>00</td>
<td></td>
<td></td>
</tr>
<tr>
<td>0C</td>
<td></td>
<td></td>
</tr>
<tr>
<td>00</td>
<td></td>
<td></td>
</tr>
<tr>
<td>03</td>
<td></td>
<td></td>
</tr>
<tr>
<td>00</td>
<td></td>
<td></td>
</tr>
<tr>
<td>06</td>
<td></td>
<td></td>
</tr>
<tr>
<td>00</td>
<td></td>
<td></td>
</tr>
<tr>
<td>05</td>
<td></td>
<td></td>
</tr>
<tr>
<td>00</td>
<td></td>
<td></td>
</tr>
<tr>
<td>05</td>
<td></td>
<td></td>
</tr>
<tr>
<td>A1</td>
<td></td>
<td></td>
</tr>
<tr>
<td>A0</td>
<td></td>
<td></td>
</tr>
<tr>
<td>C2</td>
<td></td>
<td></td>
</tr>
<tr>
<td>00</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><span id="1020140"><span/></p>
<h4 id="I020-140"><a href="#I020-140" class="headerlink" title="I020/140"></a>I020/140</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 解析I020_140日时间</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;byteData&quot;&gt;</span>二进制数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">I020_140</span>(<span class="params"><span class="built_in">byte</span>[] byteData</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 16进制转成10进制</span></span><br><span class="line">    <span class="built_in">string</span> timeDec = (((<span class="built_in">uint</span>)byteData[<span class="number">0</span>] &lt;&lt; <span class="number">16</span>) + ((<span class="built_in">uint</span>)byteData[<span class="number">1</span>] &lt;&lt; <span class="number">8</span>) + byteData[<span class="number">2</span>]).ToString();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字符串转数值/128 * 1000 总毫秒数</span></span><br><span class="line">    <span class="built_in">long</span> ms = (<span class="built_in">long</span>)((<span class="built_in">double</span>.Parse(timeDec) / <span class="number">128</span>) * <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> ss = <span class="number">1000</span>;</span><br><span class="line">    <span class="built_in">int</span> mi = ss * <span class="number">60</span>;</span><br><span class="line">    <span class="built_in">int</span> hh = mi * <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">long</span> hour = ms / hh;</span><br><span class="line">    <span class="built_in">long</span> minute = (ms - hour * hh) / mi;</span><br><span class="line">    <span class="built_in">long</span> second = (ms - hour * hh - minute * mi) / ss;</span><br><span class="line">    <span class="built_in">long</span> milliSecond = ms - hour * hh - minute * mi - second * ss;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 小时</span></span><br><span class="line">    <span class="built_in">string</span> strHour = hour &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + hour : <span class="string">&quot;&quot;</span> + hour;</span><br><span class="line">    <span class="comment">// 分钟</span></span><br><span class="line">    <span class="built_in">string</span> strMinute = minute &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + minute : <span class="string">&quot;&quot;</span> + minute;</span><br><span class="line">    <span class="comment">// 秒</span></span><br><span class="line">    <span class="built_in">string</span> strSecond = second &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + second : <span class="string">&quot;&quot;</span> + second;</span><br><span class="line">    <span class="comment">// 毫秒</span></span><br><span class="line">    <span class="built_in">string</span> strMilliSecond = milliSecond &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> + milliSecond : <span class="string">&quot;&quot;</span> + milliSecond;</span><br><span class="line">    strMilliSecond = milliSecond &lt; <span class="number">100</span> ? <span class="string">&quot;0&quot;</span> + strMilliSecond : <span class="string">&quot;&quot;</span> + strMilliSecond;</span><br><span class="line">    <span class="comment">//增加UTC时间</span></span><br><span class="line">    strHour = <span class="built_in">int</span>.Parse(strHour) + <span class="number">8</span> &gt; <span class="number">24</span> ? (<span class="built_in">int</span>.Parse(strHour) + <span class="number">8</span> - <span class="number">24</span>).ToString() : (<span class="built_in">int</span>.Parse(strHour) + <span class="number">8</span>).ToString();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">$&quot;<span class="subst">&#123;DateTime.Now.ToShortDateString()&#125;</span> <span class="subst">&#123;strHour&#125;</span>:<span class="subst">&#123;strMinute&#125;</span>:<span class="subst">&#123;strSecond&#125;</span>.<span class="subst">&#123;strMilliSecond&#125;</span>&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span id="1020245"><span/></p>
<h4 id="I020-245"><a href="#I020-245" class="headerlink" title="I020/245"></a>I020/245</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 解析I020/245目标识别</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;byteData&quot;&gt;</span>二进制数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">I020_245</span>(<span class="params"><span class="built_in">byte</span>[] byteData</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; byteData.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 把第一位去掉</span></span><br><span class="line">        str += Convert.ToString(byteData[i], <span class="number">2</span>).PadLeft(<span class="number">8</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">char</span>[] strCharArray = str.ToCharArray();</span><br><span class="line">    <span class="built_in">string</span> flno2BinaryStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; strCharArray.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        flno2BinaryStr += strCharArray[i] + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">6</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> flightNumberValue = flightNumberMap[flno2BinaryStr];</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(flightNumberValue))</span><br><span class="line">            &#123;</span><br><span class="line">                result += flightNumberValue;</span><br><span class="line">            &#125;</span><br><span class="line">            flno2BinaryStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>NOTE: See ICAO document Annex 10, Volume IV, section 3.1.2.9<br>for the coding rules.<br>每六字节代表一个字母或数字<br><img src="https://sadness96.github.io/images/blog/csharp-Cat020015/TheCodingRules.png"/></p>
<p><span id="1020041"><span/></p>
<h4 id="I020-041"><a href="#I020-041" class="headerlink" title="I020/041"></a>I020/041</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 解析I020_041在WGS-84中的坐标位置</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;byteData&quot;&gt;</span>二进制数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">double</span>[] <span class="title">I020_041</span>(<span class="params"><span class="built_in">byte</span>[] byteData</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">double</span>[] relDataArray = <span class="keyword">new</span> <span class="built_in">double</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">if</span> (byteData.Length == <span class="number">8</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 16进制转成10进制（4位一转）</span></span><br><span class="line">        <span class="built_in">string</span> xCoordinate10 = byteData[<span class="number">0</span>].ToString(<span class="string">&quot;X2&quot;</span>) + byteData[<span class="number">1</span>].ToString(<span class="string">&quot;X2&quot;</span>) + byteData[<span class="number">2</span>].ToString(<span class="string">&quot;X2&quot;</span>) + byteData[<span class="number">3</span>].ToString(<span class="string">&quot;X2&quot;</span>);</span><br><span class="line">        <span class="built_in">string</span> yCoordinate10 = byteData[<span class="number">4</span>].ToString(<span class="string">&quot;X2&quot;</span>) + byteData[<span class="number">5</span>].ToString(<span class="string">&quot;X2&quot;</span>) + byteData[<span class="number">6</span>].ToString(<span class="string">&quot;X2&quot;</span>) + byteData[<span class="number">7</span>].ToString(<span class="string">&quot;X2&quot;</span>);</span><br><span class="line">        <span class="comment">// 10进制计算规则（xCoordinate10 * 180 /2^25）</span></span><br><span class="line">        relDataArray[<span class="number">0</span>] = <span class="built_in">double</span>.Parse(Convert.ToInt32(xCoordinate10, <span class="number">16</span>).ToString()) * <span class="number">180</span> / Math.Pow(<span class="number">2</span>, <span class="number">25</span>);</span><br><span class="line">        relDataArray[<span class="number">1</span>] = <span class="built_in">double</span>.Parse(Convert.ToInt32(yCoordinate10, <span class="number">16</span>).ToString()) * <span class="number">180</span> / Math.Pow(<span class="number">2</span>, <span class="number">25</span>);</span><br><span class="line">        <span class="keyword">return</span> relDataArray;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span id="1020042"><span/></p>
<h4 id="I020-042"><a href="#I020-042" class="headerlink" title="I020/042"></a>I020/042</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 解析I020_042轨道位置(直角)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;byteData&quot;&gt;</span>二进制数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">double</span>[] <span class="title">I020_042</span>(<span class="params"><span class="built_in">byte</span>[] byteData</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">double</span>[] relDataArray = <span class="keyword">new</span> <span class="built_in">double</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">if</span> (byteData.Length == <span class="number">6</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 16进制转成10进制</span></span><br><span class="line">        <span class="built_in">string</span> xAngle16 = byteData[<span class="number">0</span>].ToString(<span class="string">&quot;X2&quot;</span>) + byteData[<span class="number">1</span>].ToString(<span class="string">&quot;X2&quot;</span>) + byteData[<span class="number">2</span>].ToString(<span class="string">&quot;X2&quot;</span>);</span><br><span class="line">        <span class="built_in">string</span> yAngle16 = byteData[<span class="number">3</span>].ToString(<span class="string">&quot;X2&quot;</span>) + byteData[<span class="number">4</span>].ToString(<span class="string">&quot;X2&quot;</span>) + byteData[<span class="number">5</span>].ToString(<span class="string">&quot;X2&quot;</span>);</span><br><span class="line">        <span class="built_in">string</span> xAngle10 = Convert.ToInt32(xAngle16, <span class="number">16</span>).ToString();</span><br><span class="line">        <span class="built_in">string</span> yAngle10 = Convert.ToInt32(yAngle16, <span class="number">16</span>).ToString();</span><br><span class="line">        <span class="comment">// 10进制计算规则（xAngle10 * 0.5）</span></span><br><span class="line">        relDataArray[<span class="number">0</span>] = <span class="built_in">double</span>.Parse(xAngle10) * <span class="number">0.5</span>;</span><br><span class="line">        relDataArray[<span class="number">1</span>] = <span class="built_in">double</span>.Parse(yAngle10) * <span class="number">0.5</span>;</span><br><span class="line">        <span class="keyword">return</span> relDataArray;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span id="1020161"><span/></p>
<h4 id="I020-161"><a href="#I020-161" class="headerlink" title="I020/161"></a>I020/161</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 解析I020_161</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;byteData&quot;&gt;</span>二进制数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">I020_161</span>(<span class="params"><span class="built_in">byte</span>[] byteData</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Convert.ToInt32(byteData[<span class="number">0</span>].ToString(<span class="string">&quot;X2&quot;</span>) + byteData[<span class="number">1</span>].ToString(<span class="string">&quot;X2&quot;</span>), <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span id="1020110"><span/></p>
<h4 id="I020-110"><a href="#I020-110" class="headerlink" title="I020/110"></a>I020/110</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 解析I020_110</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;byteData&quot;&gt;</span>二进制数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">double</span> <span class="title">I020_110</span>(<span class="params"><span class="built_in">byte</span>[] byteData</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> strByteData = byteData[<span class="number">0</span>].ToString(<span class="string">&quot;X2&quot;</span>) + byteData[<span class="number">1</span>].ToString(<span class="string">&quot;X2&quot;</span>);</span><br><span class="line">    <span class="built_in">double</span> dByteData = Convert.ToInt32(strByteData, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Convert.ToString(byteData[<span class="number">0</span>], <span class="number">2</span>).Substring(<span class="number">0</span>, <span class="number">1</span>).Equals(<span class="string">&quot;1&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果2进制长度为16，说明第16位一定为1，则为负数</span></span><br><span class="line">        <span class="keyword">return</span> -(Math.Pow(<span class="number">2</span>, <span class="number">16</span>) - dByteData) * <span class="number">6.25</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果2进制长度不为16，说明第16位一定为0，则为正数</span></span><br><span class="line">        <span class="keyword">return</span> dByteData * <span class="number">6.25</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
      </tags>
  </entry>
  <entry>
    <title>Cat021 报文解析</title>
    <url>/blog/2019/08/19/csharp-Cat021026/</url>
    <content><![CDATA[<h3 id="ADS-B-CAT021-0-26-报文协议解析"><a href="#ADS-B-CAT021-0-26-报文协议解析" class="headerlink" title="ADS-B CAT021 0.26 报文协议解析"></a>ADS-B CAT021 0.26 报文协议解析</h3><span id="more"></span>
<h3 id="简介-声明"><a href="#简介-声明" class="headerlink" title="简介/声明"></a>简介/声明</h3><p><a href="https://baike.baidu.com/item/ADS-B/9750451?fr=aladdin">ADS-B</a> 全称是Automatic Dependent Surveillance - Broadcast，中文是广播式自动相关监视，即无需人工操作或者询问，可以自动地从相关机载设备获取飞机或地面站广播飞机的位置、高度、速度、航向、识别号等参数信息，以供管制员对飞机状态进行监控。它衍生于ADS（自动相关监视），最初是为越洋飞行的航空器在无法进行雷达监视的情况下，希望利用卫星实施监视所提出的解决方案。</p>
<p>解析文档均为<a href="https://www.eurocontrol.int/">欧洲航空交通管理</a>官方提供。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><h3 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h3><p><a href="https://www.eurocontrol.int">EuroControl</a>：<a href="https://www.eurocontrol.int/sites/default/files/content/documents/nm/asterix/20150615-asterix-adsbtr-cat021-part12-v2.4.pdf">cat021p12ed026.pdf</a></p>
<h2 id="测试数据解析"><a href="#测试数据解析" class="headerlink" title="测试数据解析"></a>测试数据解析</h2><p>15002efba1df80000100302327660055a0b60144ae0a7802610006080388000a077e043e0d33b3c72de000800002</p>
<h3 id="解析步骤"><a href="#解析步骤" class="headerlink" title="解析步骤"></a>解析步骤</h3><h4 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h4><table>
<thead>
<tr>
<th>CAT = 021</th>
<th>LEN</th>
<th>FSPEC</th>
<th>Items of the first record</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<h4 id="解析报文区域数据"><a href="#解析报文区域数据" class="headerlink" title="解析报文区域数据"></a>解析报文区域数据</h4><table>
<thead>
<tr>
<th>16进制代码</th>
<th>解析值（二进制或十进制）</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>0x15</td>
<td>21</td>
<td>报文头，转换十进制为21</td>
</tr>
<tr>
<td>0x00</td>
<td>00</td>
<td>报文长度起始位</td>
</tr>
<tr>
<td>0x2e</td>
<td>46</td>
<td>报文长度 LEN，为报文数据字节数，两个字节表示，该报文长度为0x00*256+0x2e=0x2e=46字节</td>
</tr>
<tr>
<td>0xfb</td>
<td>1111 1011</td>
<td>1021/010，1021/040，1021/030，1021/130，1021/080，1021/090</td>
</tr>
<tr>
<td>0xa1</td>
<td>1010 0001</td>
<td>1021/210，1021/145</td>
</tr>
<tr>
<td>0xdf</td>
<td>1101 1111</td>
<td>1021/157，1021/160，1021/170，1021/095，1021/032，1021/200</td>
</tr>
<tr>
<td>0x80</td>
<td>1000 0000</td>
<td>1021/020（FSPEC 字段，该字段可变，(x&lt;&lt;=7;x&gt;&gt;=7)==0 下一条数据不为 FSPEC）</td>
</tr>
<tr>
<td>0x00</td>
<td></td>
<td></td>
</tr>
<tr>
<td>0x01</td>
<td></td>
<td>1021/010</td>
</tr>
<tr>
<td>0x00</td>
<td></td>
<td></td>
</tr>
<tr>
<td>0x30</td>
<td></td>
<td>1021/040</td>
</tr>
<tr>
<td>0x23</td>
<td>35</td>
<td></td>
</tr>
<tr>
<td>0x27</td>
<td>39</td>
<td></td>
</tr>
<tr>
<td>0x66</td>
<td>102</td>
<td><a href="#1021030">1021/030</a> 日时间项</td>
</tr>
<tr>
<td>0x00</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td>0x55</td>
<td>85</td>
<td></td>
</tr>
<tr>
<td>0xa0</td>
<td>160</td>
<td></td>
</tr>
<tr>
<td>0xb6</td>
<td>182</td>
<td></td>
</tr>
<tr>
<td>0x01</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>0x44</td>
<td>68</td>
<td></td>
</tr>
<tr>
<td>0xae</td>
<td>174</td>
<td></td>
</tr>
<tr>
<td>0x0a</td>
<td>10</td>
<td><a href="#1021130">1021/130</a> 位置坐标（WGS-84）项，前四位为纬度值，后四位为经度值</td>
</tr>
<tr>
<td>0x78</td>
<td>120</td>
<td></td>
</tr>
<tr>
<td>0x02</td>
<td>2</td>
<td></td>
</tr>
<tr>
<td>0x61</td>
<td>97</td>
<td><a href="#1021080">1021/080</a> 目标地址项</td>
</tr>
<tr>
<td>0x00</td>
<td></td>
<td></td>
</tr>
<tr>
<td>0x06</td>
<td></td>
<td>1021/090</td>
</tr>
<tr>
<td>0x08</td>
<td></td>
<td>1021/210</td>
</tr>
<tr>
<td>0x03</td>
<td></td>
<td></td>
</tr>
<tr>
<td>0x88</td>
<td></td>
<td>1021/145</td>
</tr>
<tr>
<td>0x00</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td>0x0a</td>
<td>10</td>
<td><a href="#1021157">1021/157</a></td>
</tr>
<tr>
<td>0x07</td>
<td></td>
<td></td>
</tr>
<tr>
<td>0x7e</td>
<td></td>
<td></td>
</tr>
<tr>
<td>0x04</td>
<td></td>
<td></td>
</tr>
<tr>
<td>0x3e</td>
<td></td>
<td>1021/160</td>
</tr>
<tr>
<td>0x0d</td>
<td>13</td>
<td></td>
</tr>
<tr>
<td>0x33</td>
<td>51</td>
<td></td>
</tr>
<tr>
<td>0xb3</td>
<td>179</td>
<td></td>
</tr>
<tr>
<td>0xc7</td>
<td>199</td>
<td></td>
</tr>
<tr>
<td>0x2d</td>
<td>45</td>
<td></td>
</tr>
<tr>
<td>0xe0</td>
<td>224</td>
<td><a href="#1021170">1021/170</a></td>
</tr>
<tr>
<td>0x00</td>
<td></td>
<td>1021/095</td>
</tr>
<tr>
<td>0x80</td>
<td></td>
<td>1021/032</td>
</tr>
<tr>
<td>0x00</td>
<td></td>
<td>1021/200</td>
</tr>
<tr>
<td>0x02</td>
<td></td>
<td>1021/020</td>
</tr>
</tbody>
</table>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><span id="1021030"><span/></p>
<h4 id="1021-030"><a href="#1021-030" class="headerlink" title="1021/030"></a>1021/030</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 计算日时间项(I021/030)对应的值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;byteData&quot;&gt;</span>二进制数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">I021_030</span>(<span class="params"><span class="built_in">byte</span>[] byteData</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//将几个独立字节合并为一个字节</span></span><br><span class="line">    <span class="built_in">uint</span> rhs = ((<span class="built_in">uint</span>)byteData[<span class="number">0</span>] &lt;&lt; <span class="number">16</span>) + ((<span class="built_in">uint</span>)byteData[<span class="number">1</span>] &lt;&lt; <span class="number">8</span>) + byteData[<span class="number">2</span>];</span><br><span class="line">    <span class="comment">//总秒数</span></span><br><span class="line">    <span class="built_in">uint</span> value0 = rhs / <span class="number">128</span>;</span><br><span class="line">    <span class="comment">//小时数</span></span><br><span class="line">    <span class="built_in">uint</span> value1 = value0 / <span class="number">3600</span>;</span><br><span class="line">    <span class="comment">//分钟数</span></span><br><span class="line">    <span class="built_in">uint</span> value2 = (value0 - value1 * <span class="number">3600</span>) / <span class="number">60</span>;</span><br><span class="line">    <span class="comment">//秒数</span></span><br><span class="line">    <span class="built_in">uint</span> value3 = (value0 - value1 * <span class="number">3600</span>) % <span class="number">60</span>;</span><br><span class="line">    <span class="comment">//毫秒数</span></span><br><span class="line">    <span class="built_in">uint</span> value4 = ((rhs % <span class="number">128</span>) * <span class="number">1000</span>) / <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">$&quot;<span class="subst">&#123;DateTime.Now.ToShortDateString()&#125;</span> <span class="subst">&#123;value1&#125;</span>:<span class="subst">&#123;value2&#125;</span>:<span class="subst">&#123;value3&#125;</span>.<span class="subst">&#123;value4&#125;</span>&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span id="1021130"><span/></p>
<h4 id="1021-130"><a href="#1021-130" class="headerlink" title="1021/130"></a>1021/130</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 计算位置坐标(WGS-84中)项(I021/130)对应的值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;byteData&quot;&gt;</span>二进制数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">double</span>[] <span class="title">I021_130</span>(<span class="params"><span class="built_in">byte</span>[] byteData</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">double</span>[] res = &#123; <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="built_in">int</span> value1;</span><br><span class="line">    <span class="comment">//将容器中前4个字节合并为一个字节，用以计算纬度。</span></span><br><span class="line">    value1 = (byteData[<span class="number">0</span>] &lt;&lt; <span class="number">24</span>) + (byteData[<span class="number">1</span>] &lt;&lt; <span class="number">16</span>) + (byteData[<span class="number">2</span>] &lt;&lt; <span class="number">8</span>) + byteData[<span class="number">3</span>];</span><br><span class="line">    <span class="built_in">double</span> temp1 = value1 * (<span class="number">5.364418e-6</span>);</span><br><span class="line">    <span class="comment">//Console.WriteLine($&quot;坐标值:纬度值&#123;temp1&#125;&quot;);</span></span><br><span class="line">    res[<span class="number">1</span>] = temp1;</span><br><span class="line">    <span class="built_in">int</span> value0;</span><br><span class="line">    <span class="comment">//将容器中后4个字节合并为一个字节，用以计算经度。</span></span><br><span class="line">    value0 = (byteData[<span class="number">4</span>] &lt;&lt; <span class="number">24</span>) + (byteData[<span class="number">5</span>] &lt;&lt; <span class="number">16</span>) + (byteData[<span class="number">6</span>] &lt;&lt; <span class="number">8</span>) + byteData[<span class="number">7</span>];</span><br><span class="line">    <span class="built_in">double</span> temp0 = value0 * (<span class="number">5.364418e-6</span>);</span><br><span class="line">    <span class="comment">//Console.WriteLine($&quot;经度值&#123;temp0&#125;&quot;);</span></span><br><span class="line">    res[<span class="number">0</span>] = temp0;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span id="1021080"><span/></p>
<h4 id="1021-080"><a href="#1021-080" class="headerlink" title="1021/080"></a>1021/080</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 计算目标地址项(I021/080)对应的值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;byteData&quot;&gt;</span>二进制数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">I021_080</span>(<span class="params"><span class="built_in">byte</span>[] byteData</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">uint</span> rhs = ((<span class="built_in">uint</span>)byteData[<span class="number">0</span>] &lt;&lt; <span class="number">16</span>) + ((<span class="built_in">uint</span>)byteData[<span class="number">1</span>] &lt;&lt; <span class="number">8</span>) + byteData[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0:X&#125;&quot;</span>, rhs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span id="1021157"><span/></p>
<h4 id="1021-157"><a href="#1021-157" class="headerlink" title="1021/157"></a>1021/157</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 计算几何垂直速率项(I021/157)对应的值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;byteData&quot;&gt;</span>二进制数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">double</span> <span class="title">I021_157</span>(<span class="params"><span class="built_in">byte</span>[] byteData</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">uint</span> rhs = byteData[<span class="number">0</span>] + (<span class="built_in">uint</span>)byteData[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> rhs * <span class="number">6.25</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span id="1021170"><span/></p>
<h4 id="1021-170"><a href="#1021-170" class="headerlink" title="1021/170"></a>1021/170</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 计算目标识别项(I021/170)对应的值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;byteData&quot;&gt;</span>二进制数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">I021_170</span>(<span class="params"><span class="built_in">byte</span>[] byteData</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">//将6个独立字节合并为一个字节</span></span><br><span class="line">    <span class="built_in">long</span> rhs = ((<span class="built_in">long</span>)byteData[<span class="number">0</span>] &lt;&lt; <span class="number">40</span>) + ((<span class="built_in">long</span>)byteData[<span class="number">1</span>] &lt;&lt; <span class="number">32</span>) + ((<span class="built_in">long</span>)byteData[<span class="number">2</span>] &lt;&lt; <span class="number">24</span>) + ((<span class="built_in">long</span>)byteData[<span class="number">3</span>] &lt;&lt; <span class="number">16</span>) + ((<span class="built_in">long</span>)byteData[<span class="number">4</span>] &lt;&lt; <span class="number">8</span>) + byteData[<span class="number">5</span>];</span><br><span class="line">    <span class="comment">//取出第42~47位</span></span><br><span class="line">    <span class="built_in">long</span> value0 = (rhs &gt;&gt; <span class="number">42</span>) &amp; <span class="number">63</span>;</span><br><span class="line">    <span class="comment">//取出新的二进制数的第5位，并判断为0还是1.</span></span><br><span class="line">    <span class="built_in">long</span> value01 = (value0 &gt;&gt; <span class="number">5</span>) &amp; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (value01 == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">char</span> value02 = (<span class="built_in">char</span>)value0;</span><br><span class="line">        res += value02;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//value0 = (value0^(1 &lt;&lt; 6));</span></span><br><span class="line">        <span class="comment">//如果第5位为1，则将第6位取反。</span></span><br><span class="line">        value0 ^= (<span class="number">1</span> &lt;&lt; <span class="number">6</span>);</span><br><span class="line">        <span class="built_in">char</span> value03 = (<span class="built_in">char</span>)value0;</span><br><span class="line">        res += value03;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取出第36~41位</span></span><br><span class="line">    <span class="built_in">long</span> value1 = (rhs &gt;&gt; <span class="number">36</span>) &amp; <span class="number">63</span>;</span><br><span class="line">    <span class="built_in">long</span> value11 = (value1 &gt;&gt; <span class="number">5</span>) &amp; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (value11 == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">char</span> value12 = (<span class="built_in">char</span>)value1;</span><br><span class="line">        res += value12;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        value1 ^= (<span class="number">1</span> &lt;&lt; <span class="number">6</span>);</span><br><span class="line">        <span class="built_in">char</span> value13 = (<span class="built_in">char</span>)value1;</span><br><span class="line">        res += value13;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取出第30~35位</span></span><br><span class="line">    <span class="built_in">long</span> value2 = (rhs &gt;&gt; <span class="number">30</span>) &amp; <span class="number">63</span>;</span><br><span class="line">    <span class="built_in">long</span> value21 = (value2 &gt;&gt; <span class="number">5</span>) &amp; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (value21 == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">char</span> value22 = (<span class="built_in">char</span>)value2;</span><br><span class="line">        res += value22;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        value2 ^= (<span class="number">1</span> &lt;&lt; <span class="number">6</span>);</span><br><span class="line">        <span class="built_in">char</span> value23 = (<span class="built_in">char</span>)value2;</span><br><span class="line">        res += value23;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取出第24~29位</span></span><br><span class="line">    <span class="built_in">long</span> value3 = (rhs &gt;&gt; <span class="number">24</span>) &amp; <span class="number">63</span>;</span><br><span class="line">    <span class="built_in">long</span> value31 = (value3 &gt;&gt; <span class="number">5</span>) &amp; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (value31 == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">char</span> value32 = (<span class="built_in">char</span>)value3;</span><br><span class="line">        res += value32;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        value3 ^= (<span class="number">1</span> &lt;&lt; <span class="number">6</span>);</span><br><span class="line">        <span class="built_in">char</span> value33 = (<span class="built_in">char</span>)value3;</span><br><span class="line">        res += value33;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取出第18~23位</span></span><br><span class="line">    <span class="built_in">long</span> value4 = (rhs &gt;&gt; <span class="number">18</span>) &amp; <span class="number">63</span>;</span><br><span class="line">    <span class="built_in">long</span> value41 = (value4 &gt;&gt; <span class="number">5</span>) &amp; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (value41 == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">char</span> value42 = (<span class="built_in">char</span>)value4;</span><br><span class="line">        res += value42; ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        value4 ^= (<span class="number">1</span> &lt;&lt; <span class="number">6</span>);</span><br><span class="line">        <span class="built_in">char</span> value43 = (<span class="built_in">char</span>)value4;</span><br><span class="line">        res += value43;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取出第12~17位</span></span><br><span class="line">    <span class="built_in">long</span> value5 = (rhs &gt;&gt; <span class="number">12</span>) &amp; <span class="number">63</span>;</span><br><span class="line">    <span class="built_in">long</span> value51 = (value5 &gt;&gt; <span class="number">5</span>) &amp; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (value51 == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">char</span> value52 = (<span class="built_in">char</span>)value5;</span><br><span class="line">        res += value52;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        value5 ^= (<span class="number">1</span> &lt;&lt; <span class="number">6</span>);</span><br><span class="line">        <span class="built_in">char</span> value53 = (<span class="built_in">char</span>)value5;</span><br><span class="line">        res += value53;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取出第6~11位</span></span><br><span class="line">    <span class="built_in">long</span> value6 = (rhs &gt;&gt; <span class="number">6</span>) &amp; <span class="number">63</span>;</span><br><span class="line">    <span class="built_in">long</span> value61 = (value6 &gt;&gt; <span class="number">5</span>) &amp; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (value61 == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">char</span> value62 = (<span class="built_in">char</span>)value6;</span><br><span class="line">        res += value62;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        value6 ^= (<span class="number">1</span> &lt;&lt; <span class="number">6</span>);</span><br><span class="line">        <span class="built_in">char</span> value63 = (<span class="built_in">char</span>)value6;</span><br><span class="line">        res += value63;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取出第0~5位</span></span><br><span class="line">    <span class="built_in">long</span> value7 = rhs &amp; <span class="number">63</span>;</span><br><span class="line">    <span class="built_in">long</span> value71 = (value7 &gt;&gt; <span class="number">5</span>) &amp; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (value71 == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">char</span> value72 = (<span class="built_in">char</span>)value7;</span><br><span class="line">        res += value72;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        value7 ^= (<span class="number">1</span> &lt;&lt; <span class="number">6</span>);</span><br><span class="line">        <span class="built_in">char</span> value73 = (<span class="built_in">char</span>)value7;</span><br><span class="line">        res += value73;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span id="1021140"><span/></p>
<h4 id="1021-140"><a href="#1021-140" class="headerlink" title="1021/140"></a>1021/140</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 计算几何高度项(I021/140)对应的值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;byteData&quot;&gt;</span>二进制数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">double</span> <span class="title">I021_140</span>(<span class="params"><span class="built_in">byte</span>[] byteData</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">uint</span> rhs = ((<span class="built_in">uint</span>)byteData[<span class="number">0</span>] &lt;&lt; <span class="number">8</span>) + byteData[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> rhs * <span class="number">6.25</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
      </tags>
  </entry>
  <entry>
    <title>Cat021 报文解析（兼容 2.1 版本）</title>
    <url>/blog/2021/07/29/csharp-Cat021210/</url>
    <content><![CDATA[<h3 id="ADS-B-CAT021-2-1-报文协议解析"><a href="#ADS-B-CAT021-2-1-报文协议解析" class="headerlink" title="ADS-B CAT021 2.1 报文协议解析"></a>ADS-B CAT021 2.1 报文协议解析</h3><span id="more"></span>
<h3 id="简介-声明"><a href="#简介-声明" class="headerlink" title="简介/声明"></a>简介/声明</h3><p>作为 2.1 版本的补充，前置内容 <a href="https://sadness96.github.io/blog/2019/08/19/csharp-Cat021026/">点此查看</a></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><span id="1021071"><span/></p>
<h4 id="1021-071"><a href="#1021-071" class="headerlink" title="1021/071"></a>1021/071</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 计算日时间项(I021/071)对应的值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;byteData&quot;&gt;</span>二进制数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">I021_071</span>(<span class="params"><span class="built_in">byte</span>[] byteData</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> I021_030(byteData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span id="1021130"><span/></p>
<h4 id="1021-130"><a href="#1021-130" class="headerlink" title="1021/130"></a>1021/130</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 计算位置坐标(WGS-84中)项(I021/130)对应的值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;byteData&quot;&gt;</span>二进制数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">double</span>[] <span class="title">I021_130</span>(<span class="params"><span class="built_in">byte</span>[] byteData</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (byteData.Length == <span class="number">6</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> I021_131(byteData);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (byteData.Length == <span class="number">8</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">double</span>[] res = &#123; <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line">        <span class="built_in">int</span> value1;</span><br><span class="line">        <span class="comment">//将容器中前4个字节合并为一个字节，用以计算纬度。</span></span><br><span class="line">        value1 = (byteData[<span class="number">0</span>] &lt;&lt; <span class="number">24</span>) + (byteData[<span class="number">1</span>] &lt;&lt; <span class="number">16</span>) + (byteData[<span class="number">2</span>] &lt;&lt; <span class="number">8</span>) + byteData[<span class="number">3</span>];</span><br><span class="line">        <span class="built_in">double</span> temp1 = value1 * (<span class="number">5.364418e-6</span>);</span><br><span class="line">        <span class="comment">//Console.WriteLine($&quot;坐标值:纬度值&#123;temp1&#125;&quot;);</span></span><br><span class="line">        res[<span class="number">1</span>] = temp1;</span><br><span class="line">        <span class="built_in">int</span> value0;</span><br><span class="line">        <span class="comment">//将容器中后4个字节合并为一个字节，用以计算经度。</span></span><br><span class="line">        value0 = (byteData[<span class="number">4</span>] &lt;&lt; <span class="number">24</span>) + (byteData[<span class="number">5</span>] &lt;&lt; <span class="number">16</span>) + (byteData[<span class="number">6</span>] &lt;&lt; <span class="number">8</span>) + byteData[<span class="number">7</span>];</span><br><span class="line">        <span class="built_in">double</span> temp0 = value0 * (<span class="number">5.364418e-6</span>);</span><br><span class="line">        <span class="comment">//Console.WriteLine($&quot;经度值&#123;temp0&#125;&quot;);</span></span><br><span class="line">        res[<span class="number">0</span>] = temp0;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span id="1021131"><span/></p>
<h4 id="1021-131"><a href="#1021-131" class="headerlink" title="1021/131"></a>1021/131</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 计算位置坐标(WGS-84中)项(I021/131)对应的值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;byteData&quot;&gt;</span>二进制数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">double</span>[] <span class="title">I021_131</span>(<span class="params"><span class="built_in">byte</span>[] byteData</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = byteData.Length;</span><br><span class="line">    <span class="keyword">var</span> startIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> Len6Ruler = <span class="number">180</span> / Math.Pow(<span class="number">2</span>, <span class="number">23</span>);</span><br><span class="line">    <span class="keyword">var</span> Len8Ruler = <span class="number">180</span> / Math.Pow(<span class="number">2</span>, <span class="number">30</span>);</span><br><span class="line">    <span class="comment">//根据长度确定转换标尺</span></span><br><span class="line">    <span class="keyword">var</span> ruler = len == <span class="number">6</span> ? Len6Ruler : Len8Ruler;</span><br><span class="line">    <span class="keyword">var</span> res = <span class="keyword">new</span> <span class="built_in">double</span>[] &#123; <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> startValue = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">byte</span> lshBit = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//将容器中前一半字节合并为一个字节，用以计算纬度。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = startIndex + len / <span class="number">2</span> - <span class="number">1</span>; i &gt;= startIndex; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        startValue += (<span class="built_in">int</span>)byteData[i] &lt;&lt; lshBit;</span><br><span class="line">        lshBit += <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    res[<span class="number">1</span>] = startValue * ruler;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> endValue = <span class="number">0</span>;</span><br><span class="line">    lshBit = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//将容器中后一半字节合并为一个字节，用以计算经度。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = startIndex + len - <span class="number">1</span>; i &gt;= startIndex + len / <span class="number">2</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        endValue += (<span class="built_in">int</span>)byteData[i] &lt;&lt; lshBit;</span><br><span class="line">        lshBit += <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res[<span class="number">0</span>] = endValue * ruler;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
      </tags>
  </entry>
  <entry>
    <title>Cat062 报文解析</title>
    <url>/blog/2019/10/15/csharp-Cat062118/</url>
    <content><![CDATA[<h3 id="Radar-CAT062-1-18-报文协议解析"><a href="#Radar-CAT062-1-18-报文协议解析" class="headerlink" title="Radar CAT062 1.18 报文协议解析"></a>Radar CAT062 1.18 报文协议解析</h3><span id="more"></span>
<h3 id="简介-声明"><a href="#简介-声明" class="headerlink" title="简介/声明"></a>简介/声明</h3><p><a href="https://baike.baidu.com/item/%E9%9B%B7%E8%BE%BE/10485?fr=aladdin">Radar</a> 雷达，源于radio detection and ranging的缩写，意思为”无线电探测和测距”，即用无线电的方法发现目标并测定它们的空间位置。因此，雷达也被称为“无线电定位”。雷达是利用电磁波探测目标的电子设备。雷达发射电磁波对目标进行照射并接收其回波，由此获得目标至电磁波发射点的距离、距离变化率（径向速度）、方位、高度等信息。</p>
<p>解析文档均为<a href="https://www.eurocontrol.int/">欧洲航空交通管理</a>官方提供。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><h3 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h3><p><a href="https://www.eurocontrol.int">EuroControl</a>：<a href="https://www.eurocontrol.int/sites/default/files/content/documents/nm/asterix/cat062p9ed118.pdf">cat062p9ed118.pdf</a></p>
<h2 id="测试数据解析"><a href="#测试数据解析" class="headerlink" title="测试数据解析"></a>测试数据解析</h2><p>3E0034BB7D25040203000E584F003806E501460641FD2601B70D4A000D33B3C37E2080780CCB000601000550000028002A003E04</p>
<h3 id="解析步骤"><a href="#解析步骤" class="headerlink" title="解析步骤"></a>解析步骤</h3><h4 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h4><table>
<thead>
<tr>
<th>CAT = 062</th>
<th>LEN</th>
<th>FSPEC</th>
<th>Items of the first record</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<h4 id="解析报文区域数据"><a href="#解析报文区域数据" class="headerlink" title="解析报文区域数据"></a>解析报文区域数据</h4><table>
<thead>
<tr>
<th>16进制代码</th>
<th>解析值（二进制或十进制）</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>0x3E</td>
<td>62</td>
<td>报文头，转换十进制为62</td>
</tr>
<tr>
<td>0x00</td>
<td>00</td>
<td>报文长度起始位</td>
</tr>
<tr>
<td>0x34</td>
<td>52</td>
<td>报文长度 LEN，为报文数据字节数</td>
</tr>
<tr>
<td>0xBB</td>
<td>10111011</td>
<td>I062/010、I062/015、I062/070、I062/105、I062/185</td>
</tr>
<tr>
<td>0x7D</td>
<td>01111101</td>
<td>I062/060、I062/245、I062/380、I062/040、I062/080</td>
</tr>
<tr>
<td>0x25</td>
<td>00100101</td>
<td>I062/136、I062/220、</td>
</tr>
<tr>
<td>0x04</td>
<td>00000100</td>
<td>I062/500</td>
</tr>
<tr>
<td>02</td>
<td>2</td>
<td></td>
</tr>
<tr>
<td>03</td>
<td>3</td>
<td>I062/010</td>
</tr>
<tr>
<td>00</td>
<td>0</td>
<td>I062/015</td>
</tr>
<tr>
<td>0E</td>
<td>14</td>
<td></td>
</tr>
<tr>
<td>58</td>
<td>88</td>
<td></td>
</tr>
<tr>
<td>4F</td>
<td>79</td>
<td><a href="#1062070">I062/070</a> 日时间项</td>
</tr>
<tr>
<td>00</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td>38</td>
<td>56</td>
<td></td>
</tr>
<tr>
<td>06</td>
<td>6</td>
<td></td>
</tr>
<tr>
<td>E5</td>
<td>229</td>
<td></td>
</tr>
<tr>
<td>01</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>46</td>
<td>70</td>
<td></td>
</tr>
<tr>
<td>06</td>
<td>6</td>
<td></td>
</tr>
<tr>
<td>41</td>
<td>65</td>
<td><a href="#1062105">I062/105</a> 经纬度坐标</td>
</tr>
<tr>
<td>FD</td>
<td>253</td>
<td></td>
</tr>
<tr>
<td>26</td>
<td>38</td>
<td></td>
</tr>
<tr>
<td>01</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>B7</td>
<td>183</td>
<td>I062/185</td>
</tr>
<tr>
<td>0D</td>
<td>13</td>
<td></td>
</tr>
<tr>
<td>4A</td>
<td>74</td>
<td>I062/060</td>
</tr>
<tr>
<td>00</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td>0D</td>
<td>13</td>
<td></td>
</tr>
<tr>
<td>33</td>
<td>51</td>
<td></td>
</tr>
<tr>
<td>B3</td>
<td>179</td>
<td></td>
</tr>
<tr>
<td>C3</td>
<td>195</td>
<td></td>
</tr>
<tr>
<td>7E</td>
<td>126</td>
<td></td>
</tr>
<tr>
<td>20</td>
<td>32</td>
<td><a href="#1062245">I062/245</a> 目标识别</td>
</tr>
<tr>
<td>80</td>
<td>128</td>
<td>I062/380</td>
</tr>
<tr>
<td>78</td>
<td>120</td>
<td></td>
</tr>
<tr>
<td>0C</td>
<td>12</td>
<td>I062/040</td>
</tr>
<tr>
<td>CB</td>
<td>203</td>
<td></td>
</tr>
<tr>
<td>00</td>
<td>0</td>
<td>I062/080</td>
</tr>
<tr>
<td>06</td>
<td>6</td>
<td></td>
</tr>
<tr>
<td>01</td>
<td>1</td>
<td>I062/136</td>
</tr>
<tr>
<td>00</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td>05</td>
<td>5</td>
<td>I062/220</td>
</tr>
<tr>
<td>50</td>
<td>80</td>
<td>I062/500</td>
</tr>
<tr>
<td>00</td>
<td></td>
<td></td>
</tr>
<tr>
<td>00</td>
<td></td>
<td></td>
</tr>
<tr>
<td>28</td>
<td></td>
<td></td>
</tr>
<tr>
<td>00</td>
<td></td>
<td></td>
</tr>
<tr>
<td>2A</td>
<td></td>
<td></td>
</tr>
<tr>
<td>00</td>
<td></td>
<td></td>
</tr>
<tr>
<td>3E</td>
<td></td>
<td></td>
</tr>
<tr>
<td>04</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="代码-部分解析可参考Cat020"><a href="#代码-部分解析可参考Cat020" class="headerlink" title="代码(部分解析可参考Cat020)"></a>代码(部分解析可参考Cat020)</h3><p><span id="1062070"><span/></p>
<h4 id="I062-070"><a href="#I062-070" class="headerlink" title="I062/070"></a>I062/070</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 计算日时间项(I062/070)对应的值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;byteData&quot;&gt;</span>二进制数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">I062_070</span>(<span class="params"><span class="built_in">byte</span>[] byteData</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//将几个独立字节合并为一个字节</span></span><br><span class="line">    <span class="built_in">uint</span> rhs = ((<span class="built_in">uint</span>)byteData[<span class="number">0</span>] &lt;&lt; <span class="number">16</span>) + ((<span class="built_in">uint</span>)byteData[<span class="number">1</span>] &lt;&lt; <span class="number">8</span>) + byteData[<span class="number">2</span>];</span><br><span class="line">    <span class="comment">//总秒数</span></span><br><span class="line">    <span class="built_in">uint</span> value0 = rhs / <span class="number">128</span>;</span><br><span class="line">    <span class="comment">//小时数</span></span><br><span class="line">    <span class="built_in">uint</span> value1 = value0 / <span class="number">3600</span>;</span><br><span class="line">    <span class="comment">//分钟数</span></span><br><span class="line">    <span class="built_in">uint</span> value2 = (value0 - value1 * <span class="number">3600</span>) / <span class="number">60</span>;</span><br><span class="line">    <span class="comment">//秒数</span></span><br><span class="line">    <span class="built_in">uint</span> value3 = (value0 - value1 * <span class="number">3600</span>) % <span class="number">60</span>;</span><br><span class="line">    <span class="comment">//毫秒数</span></span><br><span class="line">    <span class="built_in">uint</span> value4 = ((rhs % <span class="number">128</span>) * <span class="number">1000</span>) / <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">$&quot;<span class="subst">&#123;DateTime.Now.ToShortDateString()&#125;</span> <span class="subst">&#123;value1&#125;</span>:<span class="subst">&#123;value2&#125;</span>:<span class="subst">&#123;value3&#125;</span>.<span class="subst">&#123;value4&#125;</span>&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span id="1062245"><span/></p>
<h4 id="I062-245"><a href="#I062-245" class="headerlink" title="I062/245"></a>I062/245</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 解析(I062_245)目标识别</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;byteData&quot;&gt;</span>二进制数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">I062_245</span>(<span class="params"><span class="built_in">byte</span>[] byteData</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; byteData.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 把第一位去掉</span></span><br><span class="line">        str += Convert.ToString(byteData[i], <span class="number">2</span>).PadLeft(<span class="number">8</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">char</span>[] strCharArray = str.ToCharArray();</span><br><span class="line">    <span class="built_in">string</span> flno2BinaryStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; strCharArray.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        flno2BinaryStr += strCharArray[i] + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">6</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> flightNumberValue = Constants.flightNumberMap[flno2BinaryStr];</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(flightNumberValue))</span><br><span class="line">            &#123;</span><br><span class="line">                result += flightNumberValue;</span><br><span class="line">            &#125;</span><br><span class="line">            flno2BinaryStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span id="1062105"><span/></p>
<h4 id="I062-105"><a href="#I062-105" class="headerlink" title="I062/105"></a>I062/105</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 解析(I062_070)经纬度坐标</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;byteData&quot;&gt;</span>二进制数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">double</span>[] <span class="title">I062_105</span>(<span class="params"><span class="built_in">byte</span>[] byteData</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">double</span>[] relDataArray = <span class="keyword">new</span> <span class="built_in">double</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">if</span> (byteData.Length == <span class="number">8</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 16进制转成10进制（4位一转）</span></span><br><span class="line">        <span class="built_in">string</span> xCoordinate10 = byteData[<span class="number">0</span>].ToString(<span class="string">&quot;X2&quot;</span>) + byteData[<span class="number">1</span>].ToString(<span class="string">&quot;X2&quot;</span>) + byteData[<span class="number">2</span>].ToString(<span class="string">&quot;X2&quot;</span>) + byteData[<span class="number">3</span>].ToString(<span class="string">&quot;X2&quot;</span>);</span><br><span class="line">        <span class="built_in">string</span> yCoordinate10 = byteData[<span class="number">4</span>].ToString(<span class="string">&quot;X2&quot;</span>) + byteData[<span class="number">5</span>].ToString(<span class="string">&quot;X2&quot;</span>) + byteData[<span class="number">6</span>].ToString(<span class="string">&quot;X2&quot;</span>) + byteData[<span class="number">7</span>].ToString(<span class="string">&quot;X2&quot;</span>);</span><br><span class="line">        <span class="comment">// 10进制计算规则（xCoordinate10 * 180 /2^25）</span></span><br><span class="line">        relDataArray[<span class="number">0</span>] = <span class="built_in">double</span>.Parse(Convert.ToInt32(xCoordinate10, <span class="number">16</span>).ToString()) * <span class="number">180</span> / Math.Pow(<span class="number">2</span>, <span class="number">25</span>);</span><br><span class="line">        relDataArray[<span class="number">1</span>] = <span class="built_in">double</span>.Parse(Convert.ToInt32(yCoordinate10, <span class="number">16</span>).ToString()) * <span class="number">180</span> / Math.Pow(<span class="number">2</span>, <span class="number">25</span>);</span><br><span class="line">        <span class="keyword">return</span> relDataArray;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span id="1062100"><span/></p>
<h4 id="I062-100"><a href="#I062-100" class="headerlink" title="I062/100"></a>I062/100</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 解析(I062_100)卡迪尔坐标</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;byteData&quot;&gt;</span>二进制数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">double</span>[] <span class="title">I062_100</span>(<span class="params"><span class="built_in">byte</span>[] byteData</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">double</span>[] relDataArray = <span class="keyword">new</span> <span class="built_in">double</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">if</span> (byteData.Length == <span class="number">6</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> xAngle16 = byteData[<span class="number">0</span>].ToString(<span class="string">&quot;X2&quot;</span>) + byteData[<span class="number">1</span>].ToString(<span class="string">&quot;X2&quot;</span>) + byteData[<span class="number">2</span>].ToString(<span class="string">&quot;X2&quot;</span>);</span><br><span class="line">        <span class="built_in">string</span> yAngle16 = byteData[<span class="number">3</span>].ToString(<span class="string">&quot;X2&quot;</span>) + byteData[<span class="number">4</span>].ToString(<span class="string">&quot;X2&quot;</span>) + byteData[<span class="number">5</span>].ToString(<span class="string">&quot;X2&quot;</span>);</span><br><span class="line">        <span class="built_in">string</span> xAngle10 = Convert.ToInt32(xAngle16, <span class="number">16</span>).ToString();</span><br><span class="line">        <span class="built_in">string</span> yAngle10 = Convert.ToInt32(yAngle16, <span class="number">16</span>).ToString();</span><br><span class="line">        <span class="comment">// 10进制计算规则（xAngle10 * 0.5）</span></span><br><span class="line">        relDataArray[<span class="number">0</span>] = <span class="built_in">double</span>.Parse(xAngle10) * <span class="number">0.5</span>;</span><br><span class="line">        relDataArray[<span class="number">1</span>] = <span class="built_in">double</span>.Parse(yAngle10) * <span class="number">0.5</span>;</span><br><span class="line">        <span class="keyword">return</span> relDataArray;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 CEF 控件在桌面应用中加载百度地图</title>
    <url>/blog/2020/08/11/csharp-CefBaiduMap/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/csharp-CefBaiduMap/CefBaiduMapDemo.png"/></p>
<span id="more"></span>
<h3 id="在-WPF-中调用-CEF-加载百度地图"><a href="#在-WPF-中调用-CEF-加载百度地图" class="headerlink" title="在 WPF 中调用 CEF 加载百度地图"></a>在 WPF 中调用 CEF 加载百度地图</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>最近有需求需要把带定位的百度地图加载到桌面应用中</p>
<h4 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h4><p><a href="https://sadness96.github.io/blog/2020/08/11/csharp-CefSharp/">使用 CEF 在 PC 客户端中加载网页</a></p>
<h4 id="开发-BaiduMap-用户控件"><a href="#开发-BaiduMap-用户控件" class="headerlink" title="开发 BaiduMap 用户控件"></a>开发 BaiduMap 用户控件</h4><h5 id="创建带参数百度地图-WEB-页面"><a href="#创建带参数百度地图-WEB-页面" class="headerlink" title="创建带参数百度地图 WEB 页面"></a>创建带参数百度地图 WEB 页面</h5><p>map.baidu.html?Lon=116.4716&amp;Lat=40.01849<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://api.map.baidu.com/api?v=3.0&amp;您的ak&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        #allmap &#123;</span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;allmap&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//获取经纬度参数</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">getUrlParam</span>(<span class="params">name</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;(^|&amp;)&quot;</span> + name + <span class="string">&quot;=([^&amp;]*)(&amp;|$)&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> r = <span class="built_in">window</span>.location.search.substr(<span class="number">1</span>).match(reg);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (r != <span class="literal">null</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">unescape</span>(r[<span class="number">2</span>]);</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">null</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vLon = getUrlParam(<span class="string">&#x27;Lon&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vLat = getUrlParam(<span class="string">&#x27;Lat&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//加载百度地图</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//创建Map实例</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> map = <span class="keyword">new</span> BMap.Map(<span class="string">&quot;allmap&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//创建点坐标</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> point = <span class="keyword">new</span> BMap.Point(vLon, vLat);</span></span><br><span class="line">    map.centerAndZoom(point, 17);</span><br><span class="line"><span class="javascript">    <span class="comment">//启用滚轮放大缩小</span></span></span><br><span class="line">    map.enableScrollWheelZoom();</span><br><span class="line"><span class="javascript">    <span class="comment">//创建标注</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> marker = <span class="keyword">new</span> BMap.Marker(point);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//将标注添加到地图中</span></span></span><br><span class="line">    map.addOverlay(marker);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h5 id="BaiduMap-xaml-用户控件"><a href="#BaiduMap-xaml-用户控件" class="headerlink" title="BaiduMap.xaml 用户控件"></a>BaiduMap.xaml 用户控件</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">UserControl</span> <span class="attr">x:Class</span>=<span class="string">&quot;Ice.BaiduMap.Control.BaiduMap&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:mc</span>=<span class="string">&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span> </span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:d</span>=<span class="string">&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span> </span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:chrome</span>=<span class="string">&quot;clr-namespace:CefSharp.Wpf;assembly=CefSharp.Wpf&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:local</span>=<span class="string">&quot;clr-namespace:Ice.BaiduMap.Control&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">mc:Ignorable</span>=<span class="string">&quot;d&quot;</span> </span></span><br><span class="line"><span class="tag">             <span class="attr">d:DesignHeight</span>=<span class="string">&quot;450&quot;</span> <span class="attr">d:DesignWidth</span>=<span class="string">&quot;800&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">chrome:ChromiumWebBrowser</span> <span class="attr">x:Name</span>=<span class="string">&quot;Browser&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">UserControl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="BaiduMap-xaml-cs-用户控件后台"><a href="#BaiduMap-xaml-cs-用户控件后台" class="headerlink" title="BaiduMap.xaml.cs 用户控件后台"></a>BaiduMap.xaml.cs 用户控件后台</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> CefSharp.Wpf;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Windows;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Controls;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Ice.BaiduMap.Control</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> BaiduMap.xaml 的交互逻辑</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">BaiduMap</span> : <span class="title">UserControl</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BaiduMap</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">            <span class="keyword">this</span>.Loaded += BaiduMap_Loaded;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">BaiduMap_Loaded</span>(<span class="params"><span class="built_in">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (File.Exists(_webapp_baidumap_path) &amp;&amp; !<span class="built_in">string</span>.IsNullOrEmpty(Lon) &amp;&amp; !<span class="built_in">string</span>.IsNullOrEmpty(Lat))</span><br><span class="line">            &#123;</span><br><span class="line">                Browser.Address = <span class="string">$&quot;<span class="subst">&#123;_webapp_baidumap_path&#125;</span>?Lon=<span class="subst">&#123;Lon&#125;</span>&amp;Lat=<span class="subst">&#123;Lat&#125;</span>&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 百度地图加载文件</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span> _webapp_baidumap_path = <span class="string">$&quot;<span class="subst">&#123;AppDomain.CurrentDomain.BaseDirectory&#125;</span>WebApp\\map.baidu.html&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 经度</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Lon</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> (<span class="built_in">string</span>)GetValue(LonProperty); &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; SetValue(LonProperty, <span class="keyword">value</span>); &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty LonProperty =</span><br><span class="line">            DependencyProperty.Register(<span class="string">&quot;Lon&quot;</span>, <span class="keyword">typeof</span>(<span class="built_in">string</span>), <span class="keyword">typeof</span>(BaiduMap));</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 纬度</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Lat</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> (<span class="built_in">string</span>)GetValue(LatProperty); &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; SetValue(LatProperty, <span class="keyword">value</span>); &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty LatProperty =</span><br><span class="line">            DependencyProperty.Register(<span class="string">&quot;Lat&quot;</span>, <span class="keyword">typeof</span>(<span class="built_in">string</span>), <span class="keyword">typeof</span>(BaiduMap));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="在使用的地方引用"><a href="#在使用的地方引用" class="headerlink" title="在使用的地方引用"></a>在使用的地方引用</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">control:BaiduMap</span> <span class="attr">Lon</span>=<span class="string">&quot;116.4716&quot;</span> <span class="attr">Lat</span>=<span class="string">&quot;40.01849&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>baidu</tag>
        <tag>c#</tag>
        <tag>wpf</tag>
        <tag>cef</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 CEF 在 PC 客户端中加载网页</title>
    <url>/blog/2020/08/11/csharp-CefSharp/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/csharp-CefSharp/CEFLogo.png"/></p>
<span id="more"></span>
<h3 id="在-WPF-中调用-CEF-加载网页"><a href="#在-WPF-中调用-CEF-加载网页" class="headerlink" title="在 WPF 中调用 CEF 加载网页"></a>在 WPF 中调用 CEF 加载网页</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>最近有需求在 wpf 中加载网页，尝试使用 CEF 加载 Chrome 内核浏览器显示。</p>
<h4 id="引用库介绍"><a href="#引用库介绍" class="headerlink" title="引用库介绍"></a>引用库介绍</h4><p>NuGet 中引用 <a href="https://github.com/cefsharp/cefsharp">CefSharp.Wpf</a></p>
<h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><p>需要在项目 .csproj 文件中增加代码<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Update</span>=<span class="string">&quot;CefSharp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Private</span>&gt;</span>true<span class="tag">&lt;/<span class="name">Private</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Update</span>=<span class="string">&quot;CefSharp.Core&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Private</span>&gt;</span>true<span class="tag">&lt;/<span class="name">Private</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Update</span>=<span class="string">&quot;CefSharp.Wpf&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Private</span>&gt;</span>true<span class="tag">&lt;/<span class="name">Private</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>.xaml 文件中 增加引用和样式<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:chrome=&quot;clr-namespace:CefSharp.Wpf;assembly=CefSharp.Wpf&quot;</span><br></pre></td></tr></table></figure><br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">chrome:ChromiumWebBrowser</span> <span class="attr">x:Name</span>=<span class="string">&quot;Browser&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure><br>.xaml.cs 文件中增加代码<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Browser.Address = <span class="string">@&quot;https://www.baidu.com/&quot;</span>;</span><br></pre></td></tr></table></figure><br>即可显示<br><img src="https://sadness96.github.io/images/blog/csharp-CefSharp/CEFDemo.png"/></p>
<h4 id="CefSharp-使用优化"><a href="#CefSharp-使用优化" class="headerlink" title="CefSharp 使用优化"></a>CefSharp 使用优化</h4><h5 id="屏蔽或修改右键菜单"><a href="#屏蔽或修改右键菜单" class="headerlink" title="屏蔽或修改右键菜单"></a>屏蔽或修改右键菜单</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> CefSharp;</span><br><span class="line"></span><br><span class="line">namespace *</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 关联 Cef 右键菜单</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RightMenuHandler</span> : <span class="title">IContextMenuHandler</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnBeforeContextMenu</span>(<span class="params">IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IContextMenuParams parameters, IMenuModel model</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//主要修改代码在此处;如果需要完完全全重新添加菜单项,首先执行model.Clear()清空菜单列表即可.</span></span><br><span class="line">            <span class="comment">//需要自定义菜单项的,可以在这里添加按钮;</span></span><br><span class="line">            <span class="keyword">if</span> (model.Count &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                model.AddSeparator();<span class="comment">//添加分隔符;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//清理所有右键菜单</span></span><br><span class="line">            model.Clear();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//打开调试</span></span><br><span class="line">            <span class="comment">//model.AddItem((CefMenuCommand)26501, &quot;Show DevTools&quot;);</span></span><br><span class="line">            <span class="comment">//model.AddItem((CefMenuCommand)26502, &quot;Close DevTools&quot;);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">OnContextMenuCommand</span>(<span class="params">IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IContextMenuParams parameters, CefMenuCommand commandId, CefEventFlags eventFlags</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//命令的执行,点击菜单做什么事写在这里.</span></span><br><span class="line">            <span class="keyword">if</span> (commandId == (CefMenuCommand)<span class="number">26501</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                browser.GetHost().ShowDevTools();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (commandId == (CefMenuCommand)<span class="number">26502</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                browser.GetHost().CloseDevTools();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnContextMenuDismissed</span>(<span class="params">IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">RunContextMenu</span>(<span class="params">IWebBrowser chromiumWebBrowser, IBrowser browser, IFrame frame, IContextMenuParams parameters, IMenuModel model, IRunContextMenuCallback callback</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//return false 才可以弹出</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用时引用</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 关联右键菜单</span></span><br><span class="line">Browser.MenuHandler = <span class="keyword">new</span> RightMenuHandler();</span><br></pre></td></tr></table></figure>
<h5 id="捕获快捷键-调试使用"><a href="#捕获快捷键-调试使用" class="headerlink" title="捕获快捷键(调试使用)"></a>捕获快捷键(调试使用)</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> CefSharp;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line">namespace *</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 捕获 Cef 快捷键</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">KeyBoardHandler</span> : <span class="title">IKeyboardHandler</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">OnKeyEvent</span>(<span class="params">IWebBrowser browserControl, IBrowser browser, KeyType type, <span class="built_in">int</span> windowsKeyCode, <span class="built_in">int</span> nativeKeyCode, CefEventFlags modifiers, <span class="built_in">bool</span> isSystemKey</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (type == KeyType.KeyUp &amp;&amp; Enum.IsDefined(<span class="keyword">typeof</span>(Keys), windowsKeyCode))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> key = (Keys)windowsKeyCode;</span><br><span class="line">                <span class="keyword">switch</span> (key)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">case</span> Keys.F12:</span><br><span class="line">                        browser.ShowDevTools();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> Keys.F5:</span><br><span class="line">                        <span class="keyword">if</span> (modifiers == CefEventFlags.ControlDown)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">//MessageBox.Show(&quot;ctrl+f5&quot;);</span></span><br><span class="line">                            browser.Reload(<span class="literal">true</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">//MessageBox.Show(&quot;f5&quot;);</span></span><br><span class="line">                            browser.Reload();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">OnPreKeyEvent</span>(<span class="params">IWebBrowser browserControl, IBrowser browser, KeyType type, <span class="built_in">int</span> windowsKeyCode, <span class="built_in">int</span> nativeKeyCode, CefEventFlags modifiers, <span class="built_in">bool</span> isSystemKey, <span class="keyword">ref</span> <span class="built_in">bool</span> isKeyboardShortcut</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用时引用</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">    <span class="comment">// 关联快捷键</span></span><br><span class="line">    Browser.KeyboardHandler = <span class="keyword">new</span> KeyBoardHandler();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<h5 id="CefSharp-以-Any-CPU-平台编译并且使文件生成在子目录"><a href="#CefSharp-以-Any-CPU-平台编译并且使文件生成在子目录" class="headerlink" title="CefSharp 以 Any CPU 平台编译并且使文件生成在子目录"></a>CefSharp 以 Any CPU 平台编译并且使文件生成在子目录</h5><h6 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h6><p><a href="https://github.com/cefsharp/CefSharp/issues/1714">Add AnyCPU Support</a><br><a href="https://github.com/cefsharp/CefSharp/pull/1753">Copy CefSharp Files</a></p>
<h6 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h6><p>编辑项目文件 project.csproj 加入以下内容<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">&quot;Microsoft.NET.Sdk.WindowsDesktop&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--允许在 Any CPU 平台下允许编译--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">CefSharpAnyCpuSupport</span>&gt;</span>true<span class="tag">&lt;/<span class="name">CefSharpAnyCpuSupport</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--拷贝 CefSharp 相关文件至 \CefSharp 子文件夹--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--x86 与 x64 平台下编译会生成在 \CefSharp 目录下--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Any CPU 平台下编译会在 \CefSharp 下生成 \x86 与 \x64 子文件夹--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">CefSharpTargetDir</span>&gt;</span>\CefSharp<span class="tag">&lt;/<span class="name">CefSharpTargetDir</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></span><br></pre></td></tr></table></figure><br>在运行初始时执行代码 WPF 为：App.xaml.cs 文件<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> CefSharp;</span><br><span class="line"><span class="keyword">using</span> CefSharp.Wpf;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.CompilerServices;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Windows;</span><br><span class="line"></span><br><span class="line">namespace *</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Interaction logic for App.xaml</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">App</span> : <span class="title">Application</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnStartup</span>(<span class="params">StartupEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// Add Custom assembly resolver</span></span><br><span class="line">            AppDomain.CurrentDomain.AssemblyResolve += Resolver;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Any CefSharp references have to be in another method with NonInlining</span></span><br><span class="line">            <span class="comment">// attribute so the assembly rolver has time to do it&#x27;s thing.</span></span><br><span class="line">            InitializeCefSharp();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 启动主程序</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">MethodImpl(MethodImplOptions.NoInlining)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InitializeCefSharp</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> settings = <span class="keyword">new</span> CefSettings();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 不对日志进行保存</span></span><br><span class="line">            settings.LogSeverity = LogSeverity.Disable;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Set BrowserSubProcessPath based on app bitness at runtime</span></span><br><span class="line">            settings.BrowserSubprocessPath = GetCefSharpFilePath(<span class="string">&quot;CefSharp.BrowserSubprocess.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Make sure you set performDependencyCheck false</span></span><br><span class="line">            Cef.Initialize(settings, performDependencyCheck: <span class="literal">false</span>, browserProcessHandler: <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Will attempt to load missing assembly from either x86 or x64 subdir</span></span><br><span class="line">        <span class="comment">// Required by CefSharp to load the unmanaged dependencies when running using AnyCPU</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Assembly <span class="title">Resolver</span>(<span class="params"><span class="built_in">object</span> sender, ResolveEventArgs args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (args.Name.StartsWith(<span class="string">&quot;CefSharp&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> assemblyName = args.Name.Split(<span class="keyword">new</span>[] &#123; <span class="string">&#x27;,&#x27;</span> &#125;, <span class="number">2</span>)[<span class="number">0</span>] + <span class="string">&quot;.dll&quot;</span>;</span><br><span class="line">                <span class="built_in">string</span> archSpecificPath = GetCefSharpFilePath(assemblyName);</span><br><span class="line">                <span class="keyword">return</span> File.Exists(archSpecificPath) ? Assembly.LoadFile(archSpecificPath) : <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取 CefSharp 文件路径</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;assemblyName&quot;&gt;</span>文件名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetCefSharpFilePath</span>(<span class="params"><span class="built_in">string</span> assemblyName</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> vAnyCpuPath = Path.Combine(AppDomain.CurrentDomain.SetupInformation.ApplicationBase, <span class="string">&quot;CefSharp&quot;</span>, Environment.Is64BitProcess ? <span class="string">&quot;x64&quot;</span> : <span class="string">&quot;x86&quot;</span>, assemblyName);</span><br><span class="line">            <span class="keyword">var</span> vNoAnyCpuPath = Path.Combine(AppDomain.CurrentDomain.SetupInformation.ApplicationBase, <span class="string">&quot;CefSharp&quot;</span>, assemblyName);</span><br><span class="line">            <span class="keyword">return</span> Directory.Exists(Path.GetDirectoryName(vAnyCpuPath)) ? vAnyCpuPath : vNoAnyCpuPath;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="CefSharp-报错：试图加载格式不正确的程序。"><a href="#CefSharp-报错：试图加载格式不正确的程序。" class="headerlink" title="CefSharp 报错：试图加载格式不正确的程序。"></a>CefSharp 报错：试图加载格式不正确的程序。</h5><p>默认 CefSharp 仅允许在设置为 x86 或 x64 平台下运行，修改设置即可。<br>但是有时会在配置了允许 Any CPU 后出现 x86 平台下正常 x64 平台下运行报同样错误，最后找到问题出现在独立创建用的于调用 Cef 库不知何时生成出一些不必要的内容，删除 project.csproj 文件下不必要的内容即可。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PropertyGroup</span> <span class="attr">Condition</span>=<span class="string">&quot;&#x27;$(Configuration)|$(Platform)&#x27;==&#x27;Debug|AnyCPU&#x27;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">PlatformTarget</span>&gt;</span>x86<span class="tag">&lt;/<span class="name">PlatformTarget</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">PropertyGroup</span> <span class="attr">Condition</span>=<span class="string">&quot;&#x27;$(Configuration)|$(Platform)&#x27;==&#x27;Debug|x86&#x27;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">PlatformTarget</span>&gt;</span>x86<span class="tag">&lt;/<span class="name">PlatformTarget</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">PropertyGroup</span> <span class="attr">Condition</span>=<span class="string">&quot;&#x27;$(Configuration)|$(Platform)&#x27;==&#x27;Debug|x64&#x27;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">PlatformTarget</span>&gt;</span>x86<span class="tag">&lt;/<span class="name">PlatformTarget</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>wpf</tag>
        <tag>cef</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 应用程序启动时打开控制台</title>
    <url>/blog/2018/06/12/csharp-ConsoleWindow/</url>
    <content><![CDATA[<h3 id="程序启动时附加控制台调试"><a href="#程序启动时附加控制台调试" class="headerlink" title="程序启动时附加控制台调试"></a>程序启动时附加控制台调试</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>在开发大型项目时会经常有数据传输，在测试时又不能及时显示出来，为了方便调试，可在运行 Windows 应用程序时同时运行控制台，打印测试信息用于调试。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><h5 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConsoleWindow</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">DllImport(<span class="meta-string">&quot;kernel32.dll&quot;</span>, EntryPoint = <span class="meta-string">&quot;AllocConsole&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">bool</span> <span class="title">Show</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">DllImport(<span class="meta-string">&quot;kernel32.dll&quot;</span>, EntryPoint = <span class="meta-string">&quot;FreeConsole&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">bool</span> <span class="title">Close</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h5><p>可以选择仅在 Debug 时运行，一般运行于完整生命周期，不太用得上 Close。<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line">    <span class="comment">// 运行控制台程序</span></span><br><span class="line">    ConsoleWindow.Show();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>console</tag>
      </tags>
  </entry>
  <entry>
    <title>电脑挂机锁</title>
    <url>/blog/2016/05/31/csharp-DesktopLock/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/csharp-DesktopLock/main.png"/></p>
<span id="more"></span>
<h3 id="初学C-开发，Windows平台电脑挂机锁"><a href="#初学C-开发，Windows平台电脑挂机锁" class="headerlink" title="初学C#开发，Windows平台电脑挂机锁"></a>初学C#开发，Windows平台电脑挂机锁</h3><p>项目介绍：大学临毕业前想要做出点成品，漂洋过海跑到北京作为面试的资本。没有什么好点子，是一个同学的主意，本着学习的目的，还是比较实用的功能（没人会用的…）就做这个了。<br>曾经一度认为只有桌面端软件才叫软件，奈何学校教学只有基础的语法还有偏向于WEB开发，有试过用java的awt和swing设计图形化界面，但是效果并不是很理想，后来有了解到微软平台MFC、QT、Winform,但是界面的画风显得很古老，使用异形窗体后会有很严重的锯齿，最后选用WPF作为主界面。<br>项目开源地址：<a href="https://github.com/Sadness96/DesktopLock">https://github.com/Sadness96/DesktopLock</a><br>贴吧发布地址：<a href="http://tieba.baidu.com/p/4584097900">http://tieba.baidu.com/p/4584097900</a><br>项目虽然简单，BUG还有很多，甚至不如Windows自带的Win+L锁屏好使，但是经过几天的边学边做，真的给我明确了未来的方向。</p>
<h4 id="设置菜单界面"><a href="#设置菜单界面" class="headerlink" title="设置菜单界面"></a>设置菜单界面</h4><p>可通过三种方式设置挂机锁，1.密码解锁；2.时间解锁（根据系统当前时间拼接作为密码）；3.U盘解锁（通过写入加密数据到U盘，插入U盘时即可解锁）；<br><img src="https://sadness96.github.io/images/blog/csharp-DesktopLock/config.png"/></p>
<h4 id="修改锁屏壁纸"><a href="#修改锁屏壁纸" class="headerlink" title="修改锁屏壁纸"></a>修改锁屏壁纸</h4><p>默认三种锁屏图片可选或自定义图片。<br><img src="https://sadness96.github.io/images/blog/csharp-DesktopLock/style.png"/></p>
<h4 id="定时锁屏关机界面"><a href="#定时锁屏关机界面" class="headerlink" title="定时锁屏关机界面"></a>定时锁屏关机界面</h4><p>可定时多长时间后锁屏或关机。<br><img src="https://sadness96.github.io/images/blog/csharp-DesktopLock/timing.png"/></p>
<h4 id="USB写入密码"><a href="#USB写入密码" class="headerlink" title="USB写入密码"></a>USB写入密码</h4><p>插入U盘后写入加密秘钥，可通过设置U盘解锁方式，在插入U盘后系统自动解锁。<br><img src="https://sadness96.github.io/images/blog/csharp-DesktopLock/usb.png"/></p>
<h4 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h4><p><img src="https://sadness96.github.io/images/blog/csharp-DesktopLock/about.png"/></p>
<h4 id="锁屏"><a href="#锁屏" class="headerlink" title="锁屏"></a>锁屏</h4><p>可调节透明度，挂机时显示桌面运行的程序。<br><img src="https://sadness96.github.io/images/blog/csharp-DesktopLock/lock.png"/></p>
]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>wpf</tag>
        <tag>ini</tag>
      </tags>
  </entry>
  <entry>
    <title>C/S端开发基础框架</title>
    <url>/blog/2016/12/20/csharp-DevFramework/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/csharp-DevFramework/Sadness_MainRibbon.png"/></p>
<span id="more"></span>
<h3 id="基于-Wpf-Prism-DevExpress-制作的插件式开发基础框架"><a href="#基于-Wpf-Prism-DevExpress-制作的插件式开发基础框架" class="headerlink" title="基于 Wpf + Prism + DevExpress 制作的插件式开发基础框架"></a>基于 Wpf + Prism + DevExpress 制作的插件式开发基础框架</h3><p>工作已经临近半年了，日常在工作中有所积累，打算写一套自己的帮助类，后逐步发展为一个桌面端快速开发的框架。使用 Wpf + Prism + DevExpress 作为基础，Ribbon样式的插件式开发方式。同时又基于帮助类实现了几个简单的功能，后续再博客中会逐步记录帮助类。</p>
<h4 id="注册工具"><a href="#注册工具" class="headerlink" title="注册工具"></a>注册工具</h4><p>获取计算机硬件信息（网卡MAC地址、CPU-ID、硬盘序列号、内存序列号、主板序列号、BIOS序列号、显卡信息），拼接加密生成唯一序列号，可用于软件激活使用。<br>详细请查阅：<a href="/blog/2017/06/06/csharp-PCInformationHelper/">电脑硬件信息帮助类</a><br><img src="https://sadness96.github.io/images/blog/csharp-DevFramework/%E6%B3%A8%E5%86%8C%E5%B7%A5%E5%85%B7.png"/></p>
<h4 id="生成二维码"><a href="#生成二维码" class="headerlink" title="生成二维码"></a>生成二维码</h4><p>基于 ZXing.QrCode 库制作的横条码、二维码生成工具，可添加LOGO，也可动态识别横条码、二维码。<br>详细请查阅：<a href="/blog/2017/06/06/csharp-QRCodeHelper/">二维码帮助类</a><br><img src="https://sadness96.github.io/images/blog/csharp-DevFramework/%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81.png"/></p>
<p><img src="https://sadness96.github.io/images/blog/csharp-DevFramework/%E8%AF%86%E5%88%AB%E4%BA%8C%E7%BB%B4%E7%A0%81.png"/></p>
<h4 id="加密解密工具"><a href="#加密解密工具" class="headerlink" title="加密解密工具"></a>加密解密工具</h4><p>提供几种对称密钥加密与非对称加密算法，以及哈希算法，也可以加密文件夹。<br>详细请查阅：<a href="/blog/2018/01/10/csharp-EncryptionHelper/">加密解密帮助类</a><br><img src="https://sadness96.github.io/images/blog/csharp-DevFramework/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E5%B7%A5%E5%85%B7.png"/></p>
<h4 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h4><p>通过调用Windows API接口实现文件共享可视化操作（需管理员权限）。<br>详细请查阅：<a href="/blog/2017/05/23/csharp-FileSharingHelper/">文件共享帮助类</a><br><img src="https://sadness96.github.io/images/blog/csharp-DevFramework/%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB.png"/></p>
<h4 id="数据库转换工具"><a href="#数据库转换工具" class="headerlink" title="数据库转换工具"></a>数据库转换工具</h4><p>工作中大量需要多种不同数据格式互相转换，通过ADO.NET实现可视化数据转换工具，目前支持关系型数据库SqlServer、Oracle、MySql、Access、SQLite。<br>详细请查阅：<a href="/blog/2016/12/21/csharp-ADOHelper/">ADO.NET 帮助类</a><br><img src="https://sadness96.github.io/images/blog/csharp-DevFramework/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BD%AC%E6%8D%A2%E5%B7%A5%E5%85%B7.png"/></p>
]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>helper</tag>
        <tag>wpf</tag>
        <tag>devexpress</tag>
      </tags>
  </entry>
  <entry>
    <title>摇杆控制器捕获</title>
    <url>/blog/2021/05/22/csharp-DirectInput/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/csharp-DirectInput/QuanbaQ1Controller.png"/></p>
<span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>原本工作需要对接一个球机的操作键盘，奈何厂商一直没做出来，听到键盘的操作描述与街机摇杆相似，刚好手边有一个，就先写一个Demo尝试一下。<br><img src="https://sadness96.github.io/images/blog/csharp-DirectInput/722多光谱球机.jpg"/></p>
<h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><p>手头的摇杆型号为：<a href="http://www.qanba.com/ProductDetail/2059904.html">拳霸 Q1W</a>，接入方式为 xbox360 驱动，使用 DirectInput 获取摇杆操作信息。<br>由于穷，只买了这一种摇杆，所以其他的品牌或型号的按键可能不太匹配，修改前端的判断即可。</p>
<h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><p>完整代码查看：<a href="https://github.com/Sadness96/GamepadController">GamepadController</a><br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> DirectInput是用于输入设备（包括鼠标，键盘，操纵杆和其他游戏控制器）</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ee418273(v=vs.85)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DirectInputHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 是否连接控制器</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> isGetJoystick = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 连接到的控制器</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> Joystick curJoystick;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 控制器状态捕获计时器</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> Timer _timer;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 当前摇杆状态</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 用于判断两次摇杆差异</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span>[] RockerData;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 当前按键状态</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 用于判断两次按键差异</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span>[] ButtonData;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 摇杆变化事件</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;<span class="built_in">int</span>[]&gt; RockerChange;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 按钮变化事件</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;<span class="built_in">bool</span>[]&gt; ButtonChange;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 连接控制器</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">ConnectGamepad</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isGetJoystick &amp;&amp; _timer == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> vDirectInput = <span class="keyword">new</span> DirectInput();</span><br><span class="line">            <span class="keyword">var</span> allDevices = vDirectInput.GetDevices();</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> allDevices)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (item.Type == DeviceType.Gamepad)</span><br><span class="line">                &#123;</span><br><span class="line">                    curJoystick = <span class="keyword">new</span> Joystick(vDirectInput, item.InstanceGuid);</span><br><span class="line">                    curJoystick.Acquire();</span><br><span class="line">                    isGetJoystick = <span class="literal">true</span>;</span><br><span class="line">                    _timer = <span class="keyword">new</span> Timer(obj =&gt; Update());</span><br><span class="line">                    _timer.Change(<span class="number">0</span>, <span class="number">1000</span> / <span class="number">60</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isGetJoystick;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 断开控制器</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BreakOffGamepad</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_timer != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            _timer.Dispose();</span><br><span class="line">            _timer = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isGetJoystick)</span><br><span class="line">        &#123;</span><br><span class="line">            isGetJoystick = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 捕获控制器数据</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> joys = curJoystick.GetCurrentState();</span><br><span class="line">            <span class="comment">// 摇杆</span></span><br><span class="line">            <span class="keyword">if</span> (RockerData == <span class="literal">null</span> || !Enumerable.SequenceEqual(RockerData, joys.PointOfViewControllers))</span><br><span class="line">            &#123;</span><br><span class="line">                RockerData = joys.PointOfViewControllers;</span><br><span class="line">                RockerChange.Invoke(RockerData);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 按钮</span></span><br><span class="line">            <span class="keyword">if</span> (ButtonData == <span class="literal">null</span> || !Enumerable.SequenceEqual(ButtonData, joys.Buttons))</span><br><span class="line">            &#123;</span><br><span class="line">                ButtonData = joys.Buttons;</span><br><span class="line">                ButtonChange.Invoke(ButtonData);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception)</span><br><span class="line">        &#123;</span><br><span class="line">            BreakOffGamepad();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="游戏演示"><a href="#游戏演示" class="headerlink" title="游戏演示"></a>游戏演示</h3><p><img src="https://sadness96.github.io/images/blog/csharp-DirectInput/MameRecord.gif"/></p>
]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>helper</tag>
        <tag>wpf</tag>
      </tags>
  </entry>
  <entry>
    <title>Easy Deploy</title>
    <url>/blog/2022/05/05/csharp-EasyDeploy/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/csharp-EasyDeploy/MainWindow.jpg"/></p>
<span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>控制台程序轻松部署：<a href="https://github.com/iceelves/EasyDeploy">EasyDeploy</a><br>做这个东西是解决项目中实际遇到的一个问题，那就是内部在实际项目应用中，有很多的应用由于不需要 UI 界面，所以简便的使用控制台程序开发，而控制台程序在实际部署的时候，又存在很多问题，例如图标使用开发语言默认样式，或使用控制台默认图标，导致程序异常崩溃后不易排查缺少了哪些，或是需要配置开机自启，虽然公司已有解决方案，但还是按照自己理解做了一个版本。<br>放弃了以服务方式启动而是以控制台程序启动，这样方便捕获输出的信息，监控进程 PID 以更方便控制。</p>
<h4 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h4><p>做这个程序源于跟朋友的聊天<br><img src="https://sadness96.github.io/images/blog/csharp-EasyDeploy/ChatRecord.jpg"/></p>
<h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><h5 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h5><p>首先最主要的功能是部署控制台程序，可选相对路径或绝对路径，相对路径更适合附带整个程序一起打包，可以像 <a href="https://www.apachefriends.org/index.html">XAMPP</a> 一样配置一些固定服务，完整的控制程序的生命周期，确保崩溃后重启，也或者连带整个主程序开机自启，右侧方便加载控制台程序的打印内容，兼容 Ansi 文字显示。</p>
<ul>
<li>如果控制台程序以输入结尾，可能会存在崩溃。</li>
<li>系统自带的 UI 程序，例如 Calc 可能会存在异常。</li>
</ul>
<h5 id="其余功能"><a href="#其余功能" class="headerlink" title="其余功能"></a>其余功能</h5><p>兼容语言：（简体中文，English）。<br>可配置控制台默认背景颜色文字颜色。</p>
]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>wpf</tag>
      </tags>
  </entry>
  <entry>
    <title>EntityFramework Demo</title>
    <url>/blog/2018/07/02/csharp-EntityFramework/</url>
    <content><![CDATA[<h3 id="EntityFramework-框架使用介绍"><a href="#EntityFramework-框架使用介绍" class="headerlink" title="EntityFramework 框架使用介绍"></a>EntityFramework 框架使用介绍</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><a href="https://baike.baidu.com/item/ADO.NET%20Entity%20Framework/6444727?fr=aladdin">Entity Framework</a> 是微软以 ADO.NET 为基础所发展出来的对象关系对应 (<a href="https://baike.baidu.com/item/%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84/311152?fromtitle=O%2FR%20Mapping&amp;fromid=1229659">O/R Mapping</a>) 解决方案。<br>在.NET 3.5之前，开发者通常使用 <a href="/blog/2016/12/21/csharp-ADOHelper/">ADO.NET</a> 直接连接操作数据库，而Entity Framework的出现可以让开发者更多的从代码层面考虑数据交互，Entity Framework 会把字段映射为实体模型，通过 <a href="https://baike.baidu.com/item/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/4585794?fr=aladdin">Lambda表达式</a> 来操作数据，不需要考虑各种类型数据库和拼写SQL语句。同时也有效的防止了 <a href="https://baike.baidu.com/item/sql%E6%B3%A8%E5%85%A5">SQL注入</a>。</p>
<h4 id="搭建-以MySQL为例"><a href="#搭建-以MySQL为例" class="headerlink" title="搭建-以MySQL为例"></a>搭建-以MySQL为例</h4><h5 id="类库或应用程序项目下新建项"><a href="#类库或应用程序项目下新建项" class="headerlink" title="类库或应用程序项目下新建项"></a>类库或应用程序项目下新建项</h5><p><img src="https://sadness96.github.io/images/blog/csharp-EntityFramework/ef1.png"/></p>
<h5 id="实体模型向导"><a href="#实体模型向导" class="headerlink" title="实体模型向导"></a>实体模型向导</h5><p>从EF 4.X开始支持三种构建方法：<br>Database First：数据库优先，你的项目已经有一个数据库，并且使用工具（如Visual Studio中的EF设计器)依据数据库生成C#或VB类。你可以通过EF设计器修改这些创建的类以及类和数据库之间的映射关系；这种方式的关键是先要有数据，然后才有代码和模型。<br>Model First：模型优先，通过在EF设计器中创建一个空的容器，在其中设计实体数据模型。这个模型将用于生成数据库以及C#或者VB类。这种方式的关键是先要有模型，然后才有数据库和代码。<br>Code First：代码优先，开发者只需要写代码，将会自动创建模型和数据库。<br>现采用基础又最常用的 Database First 方式创建！<br><img src="https://sadness96.github.io/images/blog/csharp-EntityFramework/ef2.png"/></p>
<h5 id="更改数据源"><a href="#更改数据源" class="headerlink" title="更改数据源"></a>更改数据源</h5><p>连接MySQL需要单独安装 <a href="https://dev.mysql.com/downloads/connector/net/">mysql-connector-net</a> 与 <a href="https://dev.mysql.com/downloads/windows/visualstudio/">mysql-for-visualstudio</a><br><img src="https://sadness96.github.io/images/blog/csharp-EntityFramework/ef3.png"/></p>
<h5 id="修改连接属性"><a href="#修改连接属性" class="headerlink" title="修改连接属性"></a>修改连接属性</h5><p><img src="https://sadness96.github.io/images/blog/csharp-EntityFramework/ef4.png"/></p>
<h5 id="添加连接串"><a href="#添加连接串" class="headerlink" title="添加连接串"></a>添加连接串</h5><p><img src="https://sadness96.github.io/images/blog/csharp-EntityFramework/ef5.png"/></p>
<h5 id="选择框架版本"><a href="#选择框架版本" class="headerlink" title="选择框架版本"></a>选择框架版本</h5><p><img src="https://sadness96.github.io/images/blog/csharp-EntityFramework/ef6.png"/></p>
<h5 id="添加数据库表模型，完成"><a href="#添加数据库表模型，完成" class="headerlink" title="添加数据库表模型，完成"></a>添加数据库表模型，完成</h5><p><img src="https://sadness96.github.io/images/blog/csharp-EntityFramework/ef7.png"/></p>
<h5 id="如果出现闪退、无法编辑数据，尝试修改引用库版本"><a href="#如果出现闪退、无法编辑数据，尝试修改引用库版本" class="headerlink" title="如果出现闪退、无法编辑数据，尝试修改引用库版本"></a>如果出现闪退、无法编辑数据，尝试修改引用库版本</h5><p>EntityFramework：6.0.0.0<br>EntityFramework.SqlServer：6.0.0.0<br>MySql.Data：6.9.9.0<br>MySql.Data.Entity.EF6：6.9.9.0</p>
<h4 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//新增</span></span><br><span class="line">officeautomationEntities ef = <span class="keyword">new</span> officeautomationEntities();</span><br><span class="line">user_info user = <span class="keyword">new</span> user_info();</span><br><span class="line">user.UserName = <span class="string">&quot;00006&quot;</span>;</span><br><span class="line">user.Password = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">ef.user_info.Add(user);</span><br><span class="line">ef.SaveChanges();</span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line"><span class="keyword">var</span> query = ef.user_info.Where(o =&gt; o.UserName.Equals(<span class="string">&quot;00006&quot;</span>)).FirstOrDefault();</span><br><span class="line">query.Password = <span class="string">&quot;mq1i1JC92zal7nnbFZjtPQ==&quot;</span>;</span><br><span class="line">ef.SaveChanges();</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">ef.user_info.Remove(query);</span><br><span class="line">ef.SaveChanges();</span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line"><span class="keyword">var</span> v = ef.user_info.Where(o =&gt; o.UserName.Equals(<span class="string">&quot;00003&quot;</span>)).ToList();</span><br></pre></td></tr></table></figure>
<h4 id="错误及处理"><a href="#错误及处理" class="headerlink" title="错误及处理"></a>错误及处理</h4><h5 id="EF创建时崩溃"><a href="#EF创建时崩溃" class="headerlink" title="EF创建时崩溃"></a>EF创建时崩溃</h5><p>MySql引用库版本修改为6.9.9</p>
<h5 id="报错：Host-“”is-not-allowed-to-connect-to-this-MySQL-server"><a href="#报错：Host-“”is-not-allowed-to-connect-to-this-MySQL-server" class="headerlink" title="报错：Host “”is not allowed to connect to this MySQL server"></a>报错：Host “”is not allowed to connect to this MySQL server</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;192.168.0.1&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;密码&#x27;</span>;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;密码&#x27;</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
<h5 id="报错：Mysql表-“TableDetails”-中列-“IsPrimaryKey”-的值位-DBNull。"><a href="#报错：Mysql表-“TableDetails”-中列-“IsPrimaryKey”-的值位-DBNull。" class="headerlink" title="报错：Mysql表 “TableDetails” 中列 “IsPrimaryKey” 的值位 DBNull。"></a>报错：Mysql表 “TableDetails” 中列 “IsPrimaryKey” 的值位 DBNull。</h5><p><img src="https://sadness96.github.io/images/blog/csharp-EntityFramework/error1.png"/></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use 库名;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> optimizer_switch<span class="operator">=</span><span class="string">&#x27;derived_merge=off&#x27;</span>;</span><br><span class="line"><span class="keyword">SET</span> optimizer_switch<span class="operator">=</span><span class="string">&#x27;derived_merge=off&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h5 id="报错：其他信息-对一个或多个实体的验证失败。有关详细信息，请参见“EntityValidationErrors”属性。"><a href="#报错：其他信息-对一个或多个实体的验证失败。有关详细信息，请参见“EntityValidationErrors”属性。" class="headerlink" title="报错：其他信息: 对一个或多个实体的验证失败。有关详细信息，请参见“EntityValidationErrors”属性。"></a>报错：其他信息: 对一个或多个实体的验证失败。有关详细信息，请参见“EntityValidationErrors”属性。</h5><p>写入数据与表设定不一致<br>SaveChanges();方法前后使用：Configuration.ValidateOnSaveEnabled<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">ef.Configuration.ValidateOnSaveEnabled = <span class="literal">false</span>;</span><br><span class="line">ef.SaveChanges();</span><br><span class="line">ef.Configuration.ValidateOnSaveEnabled = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>mysql</tag>
        <tag>ef</tag>
      </tags>
  </entry>
  <entry>
    <title>Excel 单元格解密</title>
    <url>/blog/2021/08/15/csharp-ExcelCellDecryption/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/csharp-ExcelCellDecryption/ExcelCellDecryption.png"/></p>
<span id="more"></span>
<h3 id="解决-Excel-单元格显示与复制不一样的情况"><a href="#解决-Excel-单元格显示与复制不一样的情况" class="headerlink" title="解决 Excel 单元格显示与复制不一样的情况"></a>解决 Excel 单元格显示与复制不一样的情况</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>收到一份 Excel 文件，表面看起来一切正常，但是表格内所有数据单元格显示与表格上方编辑栏内容不符，复制单元格到记事本，显示内容与编辑栏一致，看起来是有人刻意对单元格文本进行加盐处理，应该是为了防止拷贝直接使用数据。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>帖子 <a href="https://www.52pojie.cn/thread-1456979-1-1.html">excel单元格怎么让实际值与显示的值一致</a> 与 <a href="https://www.52pojie.cn/thread-1433060-1-1.html">电子表格里的数据如何去除隐藏部分</a> 中有遇到相同情况，当中有人给出了原理，但是并没有提供一种快速的解决办法。</p>
<h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p><img src="https://sadness96.github.io/images/blog/csharp-ExcelCellDecryption/NotepadCellText.png"/></p>
<p>拷贝一个单元格到记事本中，可以看到显示内容与 Excel 编辑中一致为加盐后的结果。</p>
<p><img src="https://sadness96.github.io/images/blog/csharp-ExcelCellDecryption/WordCellText.png"/></p>
<p>拷贝一个单元格数据到 Word 中，可以看到显示内容正确，但是仔细看左下角开头部位有几个字号为1磅或2磅不易察觉的宽度。</p>
<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><h5 id="处理前准备"><a href="#处理前准备" class="headerlink" title="处理前准备"></a>处理前准备</h5><ol>
<li>前文参考的帖子中有提到替换的方式，我尝试在 Excel 中按照字号替换，最终失败，一格一格数据拷贝到 Word 中替换，这个数据量着实劝退。</li>
<li>使用 NPOI 读取单元格格式，替换其中的文本，但是在长时候发现 NPOI 对单元格中多种字体大小颜色很难判断，最终放弃。</li>
<li>Excel 实际为压缩文件固定格式，可以解压缩获取其中 XML 文件，从而修改，解压缩后看到单元格数据都储存在 “\xl\sharedStrings.xml” 文件中，但是不知为何，这个 XML 文件的节点并不完整，解析时会报错，修复文件是个不小的工作量，并且格式恢复为 .xlsx 后 Excel 报文件损坏，所以放弃。</li>
<li>通过另存的方式保存为 XML 格式后再做解析，另存为 “XML 数据”，提示错误:”工作簿不包含任何 XML 映射”，所以另存为 “XML 电子表格 2003”，可以看到每个单元格内的文字格式。</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Cell</span> <span class="attr">ss:StyleID</span>=<span class="string">&quot;s68&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ss:Data</span> <span class="attr">ss:Type</span>=<span class="string">&quot;String&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/TR/REC-html40&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Font</span> <span class="attr">html:Color</span>=<span class="string">&quot;#FFFFF2&quot;</span>&gt;</span>a1<span class="tag">&lt;/<span class="name">Font</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Font</span> <span class="attr">html:Size</span>=<span class="string">&quot;9&quot;</span>&gt;</span>13763569<span class="tag">&lt;/<span class="name">Font</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Font</span> <span class="attr">html:Size</span>=<span class="string">&quot;1&quot;</span> <span class="attr">html:Color</span>=<span class="string">&quot;#FFFFCC&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">Font</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Font</span> <span class="attr">html:Size</span>=<span class="string">&quot;9&quot;</span>&gt;</span>999<span class="tag">&lt;/<span class="name">Font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ss:Data</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Cell</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="判断加盐内容"><a href="#判断加盐内容" class="headerlink" title="判断加盐内容"></a>判断加盐内容</h5><p>多找几条数据后发现加盐的干扰项为（字体字号为 1磅 或 2磅，颜色为不易察觉的白色）：<br><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">html:Color=&quot;#FFFFF2&quot;</span><br><span class="line">html:Color=&quot;#FFFFF1&quot;</span><br><span class="line">html:Color=&quot;#FFFFCC&quot;</span><br><span class="line">html:Color=&quot;#FFFFFF&quot;</span><br><span class="line">html:Size=&quot;1&quot;</span><br><span class="line">html:Size=&quot;2&quot;</span><br></pre></td></tr></table></figure></p>
<h5 id="处理文件代码"><a href="#处理文件代码" class="headerlink" title="处理文件代码"></a>处理文件代码</h5><p>完整代码：<a href="https://github.com/Sadness96/ExcelCellDecryption">ExcelCellDecryption</a><br>程序运行选择另存为 “XML 电子表格 2003” 的 XML 文件，点击执行。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解析 Excel XML 文档</span></span><br><span class="line">XmlDocument doc = <span class="keyword">new</span> XmlDocument();</span><br><span class="line">doc.Load(vNewFile);</span><br><span class="line">XmlNamespaceManager nsmgr = <span class="keyword">new</span> XmlNamespaceManager(doc.NameTable);</span><br><span class="line">nsmgr.AddNamespace(<span class="string">&quot;ab&quot;</span>, <span class="string">&quot;http://www.w3.org/TR/REC-html40&quot;</span>);</span><br><span class="line">nsmgr.AddNamespace(<span class="string">&quot;ss&quot;</span>, <span class="string">&quot;urn:schemas-microsoft-com:office:spreadsheet&quot;</span>);</span><br><span class="line"><span class="comment">// 删除掺杂的数据</span></span><br><span class="line">XmlNodeList nodeFonts = doc.SelectNodes(<span class="string">&quot;//ab:Font&quot;</span>, nsmgr);</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nodeFonts.Count; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> vXmlNodeFont = nodeFonts[i];</span><br><span class="line">    <span class="built_in">bool</span> bIsRemove = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> listRemoveIdentification)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (vXmlNodeFont.OuterXml.Contains(item))</span><br><span class="line">        &#123;</span><br><span class="line">            bIsRemove = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (bIsRemove)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> vParentNode = vXmlNodeFont.ParentNode;</span><br><span class="line">        vParentNode.RemoveChild(vXmlNodeFont);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 合并整理后的数据</span></span><br><span class="line">XmlNodeList nodeDatas = doc.SelectNodes(<span class="string">&quot;//ss:Data&quot;</span>, nsmgr);</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nodeDatas.Count; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> vXmlNodeData = nodeDatas[i];</span><br><span class="line">    <span class="keyword">var</span> vXmlNodeFonts = vXmlNodeData.ChildNodes;</span><br><span class="line">    <span class="keyword">if</span> (vXmlNodeFonts.Count &gt;= <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Data 中 Font 数量大于等于 2 需要合并</span></span><br><span class="line">        <span class="built_in">string</span> strTxt = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        XmlNode xmlNodeMain = <span class="literal">null</span>;</span><br><span class="line">        List&lt;XmlNode&gt; xmlNodesPrepare = <span class="keyword">new</span> List&lt;XmlNode&gt;();</span><br><span class="line">        <span class="comment">// 记录数据 拼接文本 记录主要 Font 和需要删除的 Font</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; vXmlNodeFonts.Count; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> vXmlNodeFont = vXmlNodeFonts[j];</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                xmlNodeMain = vXmlNodeFont;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                xmlNodesPrepare.Add(vXmlNodeFont);</span><br><span class="line">            &#125;</span><br><span class="line">            strTxt += vXmlNodeFont.InnerText;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 记录主要 Font,超过15位增加 &quot;&#x27;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> (strTxt.Length &gt;= <span class="number">15</span> &amp;&amp; IsNumeric(strTxt) &amp;&amp; !strTxt.First().Equals(<span class="string">&#x27;\&#x27;&#x27;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            xmlNodeMain.InnerText = <span class="string">$&quot;&#x27;<span class="subst">&#123;strTxt&#125;</span>&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            xmlNodeMain.InnerText = strTxt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除的 Font</span></span><br><span class="line">        <span class="keyword">var</span> vParentNode = xmlNodeMain.ParentNode;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> k = <span class="number">0</span>; k &lt; xmlNodesPrepare.Count; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            vParentNode.RemoveChild(xmlNodesPrepare[k]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">doc.Save(vNewFile);</span><br></pre></td></tr></table></figure>
<h5 id="手动处理"><a href="#手动处理" class="headerlink" title="手动处理"></a>手动处理</h5><ol>
<li>执行完成后会生成：”{XXX}_decrypt.xml” 文件，使用 Excel 打开。</li>
<li>修改整表字号为标准大小（我这里是宋体9号）。</li>
<li>Ctrl+H 打开查找和替换，替换所有 “ “ 为 “”。</li>
<li>另存文件为 .xlsx 格式，处理结束。</li>
</ol>
<h4 id="如何制作这样的数据"><a href="#如何制作这样的数据" class="headerlink" title="如何制作这样的数据"></a>如何制作这样的数据</h4><p>既然解决了问题，那么在按照原路制造出来也是比较简单的，比如直接修改 xml 文件在 Cell 单元格中添加不易察觉的 Font，或者参考帖子 <a href="https://www.cnblogs.com/leoxjy/p/10669924.html">NPOI Excel同一个单元格 多种字体</a> 使用 NPOI 写入即可。</p>
]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>excel</tag>
      </tags>
  </entry>
  <entry>
    <title>FTP 共享帮助类</title>
    <url>/blog/2017/05/24/csharp-FTPSharingHelper/</url>
    <content><![CDATA[<h3 id="基于-Serv-U-搭建的-FTP-帮助类"><a href="#基于-Serv-U-搭建的-FTP-帮助类" class="headerlink" title="基于 Serv-U 搭建的 FTP 帮助类"></a>基于 Serv-U 搭建的 FTP 帮助类</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><a href="https://www.serv-u.com/">Serv-U</a> 是一种被广泛运用的FTP服务器端软件。<br>现FTP服务器还是公司企业普遍运用的文件储存方式，编写帮助类用于自动上传下载管理服务。</p>
<h4 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h4><p><a href="https://github.com/Sadness96/Sadness/blob/master/Code/Helper/FileIO.Helper/FTPSharing/FTPSharingHelper.cs">FTPSharingHelper</a><br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> FTP服务器URL(统一资源定位符)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> strFTPServerURL &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> FTP服务器IP地址</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> strFTPServerIP &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> FTP服务器端口号</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> strFTPServerPort &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> FTP服务器路径</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> strFTPServerPath &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> FTP服务器用户名</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> strFTPServerUserID &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> FTP服务器用户密码</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> strFTPServerPassword &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>  </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 实现了文件传输协议(FTP)客户端</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>  </span></span><br><span class="line">FtpWebRequest Request = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> FTP连接URL</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;FTPServerURL&quot;&gt;</span>FTP服务器URL(统一资源定位符)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;FTPServerUserID&quot;&gt;</span>FTP服务器用户名<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;FTPServerPassword&quot;&gt;</span>FTP服务器用户密码<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FTPConnectionURL</span>(<span class="params"><span class="built_in">string</span> FTPServerURL, <span class="built_in">string</span> FTPServerUserID, <span class="built_in">string</span> FTPServerPassword</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    strFTPServerURL = FTPServerURL;</span><br><span class="line">    strFTPServerUserID = FTPServerUserID;</span><br><span class="line">    strFTPServerPassword = FTPServerPassword;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> FTP连接URL</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;FTPServerIP&quot;&gt;</span>FTP服务器IP地址<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;FTPServerPort&quot;&gt;</span>FTP服务器端口号<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;FTPServerPath&quot;&gt;</span>FTP服务器路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;FTPServerUserID&quot;&gt;</span>FTP服务器用户名<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;FTPServerPassword&quot;&gt;</span>FTP服务器用户密码<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FTPConnectionURL</span>(<span class="params"><span class="built_in">string</span> FTPServerIP, <span class="built_in">string</span> FTPServerPort, <span class="built_in">string</span> FTPServerPath, <span class="built_in">string</span> FTPServerUserID, <span class="built_in">string</span> FTPServerPassword</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    strFTPServerIP = FTPServerIP;</span><br><span class="line">    strFTPServerPort = FTPServerPort;</span><br><span class="line">    strFTPServerPath = FTPServerPath;</span><br><span class="line">    strFTPServerUserID = FTPServerUserID;</span><br><span class="line">    strFTPServerPassword = FTPServerPassword;</span><br><span class="line">    strFTPServerURL = <span class="string">&quot;ftp://&quot;</span> + strFTPServerIP + <span class="string">&quot;:&quot;</span> + strFTPServerPort + <span class="string">&quot;/&quot;</span> + strFTPServerPath + <span class="string">&quot;/&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获得URL路径下文件列表</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>文件列表List<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;<span class="built_in">string</span>&gt; <span class="title">GetFilesDetailList</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;<span class="built_in">string</span>&gt; listAllFiles = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        Request = (FtpWebRequest)FtpWebRequest.Create(<span class="keyword">new</span> Uri(strFTPServerURL));</span><br><span class="line">        Request.Credentials = <span class="keyword">new</span> NetworkCredential(strFTPServerUserID, strFTPServerPassword);</span><br><span class="line">        Request.Method = WebRequestMethods.Ftp.ListDirectoryDetails;</span><br><span class="line">        WebResponse Response = Request.GetResponse();</span><br><span class="line">        StreamReader Reader = <span class="keyword">new</span> StreamReader(Response.GetResponseStream());</span><br><span class="line">        <span class="built_in">string</span> strLine = Reader.ReadLine();</span><br><span class="line">        <span class="keyword">while</span> (strLine != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (AnalysisLISTCommand(strLine).FileType == <span class="string">&quot;-&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                listAllFiles.Add(AnalysisLISTCommand(strLine).FileName);</span><br><span class="line">            &#125;</span><br><span class="line">            strLine = Reader.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">        Reader.Close();</span><br><span class="line">        Response.Close();</span><br><span class="line">        <span class="keyword">return</span> listAllFiles;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获得URL路径下文件夹列表</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>文件列表List<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;<span class="built_in">string</span>&gt; <span class="title">GetFoldersDetailList</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;<span class="built_in">string</span>&gt; listAllFiles = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        Request = (FtpWebRequest)FtpWebRequest.Create(<span class="keyword">new</span> Uri(strFTPServerURL));</span><br><span class="line">        Request.Credentials = <span class="keyword">new</span> NetworkCredential(strFTPServerUserID, strFTPServerPassword);</span><br><span class="line">        Request.Method = WebRequestMethods.Ftp.ListDirectoryDetails;</span><br><span class="line">        WebResponse Response = Request.GetResponse();</span><br><span class="line">        StreamReader Reader = <span class="keyword">new</span> StreamReader(Response.GetResponseStream());</span><br><span class="line">        <span class="built_in">string</span> strLine = Reader.ReadLine();</span><br><span class="line">        <span class="keyword">while</span> (strLine != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (AnalysisLISTCommand(strLine).FileType == <span class="string">&quot;d&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                listAllFiles.Add(AnalysisLISTCommand(strLine).FileName);</span><br><span class="line">            &#125;</span><br><span class="line">            strLine = Reader.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">        Reader.Close();</span><br><span class="line">        Response.Close();</span><br><span class="line">        <span class="keyword">return</span> listAllFiles;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获得指定URL路径下指定文件属性</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strFileName&quot;&gt;</span>URL中指定文件名<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>FTP-FTP-LIST命令返回参数数据模型,失败返回NULL<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FTPListTypeModel <span class="title">GetFolderOrFileType</span>(<span class="params"><span class="built_in">string</span> strFileName</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        FtpWebRequest fRequest = (FtpWebRequest)FtpWebRequest.Create(<span class="keyword">new</span> Uri(strFTPServerURL + strFileName));</span><br><span class="line">        fRequest.Credentials = <span class="keyword">new</span> NetworkCredential(strFTPServerUserID, strFTPServerPassword);</span><br><span class="line">        fRequest.Method = WebRequestMethods.Ftp.ListDirectoryDetails;</span><br><span class="line">        FtpWebResponse Response = (FtpWebResponse)fRequest.GetResponse();</span><br><span class="line">        Stream ftpStream = Response.GetResponseStream();</span><br><span class="line">        StreamReader Reader = <span class="keyword">new</span> StreamReader(ftpStream);</span><br><span class="line">        <span class="built_in">string</span> strLine = Reader.ReadLine();</span><br><span class="line">        Reader.Close();</span><br><span class="line">        Response.Close();</span><br><span class="line">        <span class="keyword">return</span> AnalysisLISTCommand(strLine);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 新建URL路径下文件夹</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strFolderName&quot;&gt;</span>文件夹名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">CreateFolder</span>(<span class="params"><span class="built_in">string</span> strFolderName</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        Request = (FtpWebRequest)FtpWebRequest.Create(<span class="keyword">new</span> Uri(strFTPServerURL + strFolderName));</span><br><span class="line">        Request.Method = WebRequestMethods.Ftp.MakeDirectory;</span><br><span class="line">        Request.UseBinary = <span class="literal">true</span>;</span><br><span class="line">        Request.Credentials = <span class="keyword">new</span> NetworkCredential(strFTPServerUserID, strFTPServerPassword);</span><br><span class="line">        FtpWebResponse response = (FtpWebResponse)Request.GetResponse();</span><br><span class="line">        Stream ftpStream = response.GetResponseStream();</span><br><span class="line">        ftpStream.Close();</span><br><span class="line">        response.Close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 删除URL路径下指定文件</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strFileName&quot;&gt;</span>URL中指定文件名<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">DeleteFile</span>(<span class="params"><span class="built_in">string</span> strFileName</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        Request = (FtpWebRequest)FtpWebRequest.Create(<span class="keyword">new</span> Uri(strFTPServerURL + strFileName));</span><br><span class="line">        Request.Credentials = <span class="keyword">new</span> NetworkCredential(strFTPServerUserID, strFTPServerPassword);</span><br><span class="line">        Request.Method = WebRequestMethods.Ftp.DeleteFile;</span><br><span class="line">        Request.KeepAlive = <span class="literal">false</span>;</span><br><span class="line">        FtpWebResponse Response = (FtpWebResponse)Request.GetResponse();</span><br><span class="line">        Stream ftpStream = Response.GetResponseStream();</span><br><span class="line">        ftpStream.Close();</span><br><span class="line">        Response.Close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 删除URL路径下指定文件夹</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strFolderName&quot;&gt;</span>文件夹名<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">DeleteFolder</span>(<span class="params"><span class="built_in">string</span> strFolderName</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        Request = (FtpWebRequest)FtpWebRequest.Create(<span class="keyword">new</span> Uri(strFTPServerURL + strFolderName));</span><br><span class="line">        Request.Credentials = <span class="keyword">new</span> NetworkCredential(strFTPServerUserID, strFTPServerPassword);</span><br><span class="line">        Request.Method = WebRequestMethods.Ftp.RemoveDirectory;</span><br><span class="line">        Request.KeepAlive = <span class="literal">false</span>;</span><br><span class="line">        FtpWebResponse Response = (FtpWebResponse)Request.GetResponse();</span><br><span class="line">        Stream ftpStream = Response.GetResponseStream();</span><br><span class="line">        ftpStream.Close();</span><br><span class="line">        Response.Close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 上传文件到指定URL路径</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strFilePath&quot;&gt;</span>需要上传的文件路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">UploadFile</span>(<span class="params"><span class="built_in">string</span> strFilePath</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        FileInfo fileInfo = <span class="keyword">new</span> FileInfo(strFilePath);</span><br><span class="line">        Request = (FtpWebRequest)FtpWebRequest.Create(<span class="keyword">new</span> Uri(strFTPServerURL + fileInfo.Name));</span><br><span class="line">        Request.Credentials = <span class="keyword">new</span> NetworkCredential(strFTPServerUserID, strFTPServerPassword);</span><br><span class="line">        Request.Method = WebRequestMethods.Ftp.UploadFile;</span><br><span class="line">        Request.KeepAlive = <span class="literal">false</span>;</span><br><span class="line">        Request.UseBinary = <span class="literal">true</span>;</span><br><span class="line">        Request.ContentLength = fileInfo.Length;</span><br><span class="line">        <span class="built_in">int</span> buffLength = <span class="number">2048</span>;</span><br><span class="line">        <span class="built_in">byte</span>[] buff = <span class="keyword">new</span> <span class="built_in">byte</span>[buffLength];</span><br><span class="line">        <span class="built_in">int</span> contentLen;</span><br><span class="line">        FileStream fileFtpStream = fileInfo.OpenRead();</span><br><span class="line">        Stream ftpStream = Request.GetRequestStream();</span><br><span class="line">        contentLen = fileFtpStream.Read(buff, <span class="number">0</span>, buffLength);</span><br><span class="line">        <span class="keyword">while</span> (contentLen != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ftpStream.Write(buff, <span class="number">0</span>, contentLen);</span><br><span class="line">            contentLen = fileFtpStream.Read(buff, <span class="number">0</span>, buffLength);</span><br><span class="line">        &#125;</span><br><span class="line">        ftpStream.Close();</span><br><span class="line">        fileFtpStream.Close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 下载指定URL中的文件到指定路径</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strFilePath&quot;&gt;</span>文件下载到的路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strFileName&quot;&gt;</span>URL中指定文件名<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">DownloadFile</span>(<span class="params"><span class="built_in">string</span> strFilePath, <span class="built_in">string</span> strFileName</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!Directory.Exists(strFilePath))</span><br><span class="line">        &#123;</span><br><span class="line">            Directory.CreateDirectory(strFilePath);</span><br><span class="line">        &#125;</span><br><span class="line">        FileStream fileStream = <span class="keyword">new</span> FileStream(strFilePath + <span class="string">&quot;\\&quot;</span> + strFileName, FileMode.Create);</span><br><span class="line">        Request = (FtpWebRequest)FtpWebRequest.Create(<span class="keyword">new</span> Uri(strFTPServerURL + strFileName));</span><br><span class="line">        Request.Credentials = <span class="keyword">new</span> NetworkCredential(strFTPServerUserID, strFTPServerPassword);</span><br><span class="line">        Request.Method = WebRequestMethods.Ftp.DownloadFile;</span><br><span class="line">        Request.UseBinary = <span class="literal">true</span>;</span><br><span class="line">        FtpWebResponse response = (FtpWebResponse)Request.GetResponse();</span><br><span class="line">        Stream ftpStream = response.GetResponseStream();</span><br><span class="line">        <span class="built_in">int</span> bufferSize = <span class="number">2048</span>;</span><br><span class="line">        <span class="built_in">int</span> readCount;</span><br><span class="line">        <span class="built_in">byte</span>[] buffer = <span class="keyword">new</span> <span class="built_in">byte</span>[bufferSize];</span><br><span class="line">        readCount = ftpStream.Read(buffer, <span class="number">0</span>, bufferSize);</span><br><span class="line">        <span class="keyword">while</span> (readCount &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            fileStream.Write(buffer, <span class="number">0</span>, readCount);</span><br><span class="line">            readCount = ftpStream.Read(buffer, <span class="number">0</span>, bufferSize);</span><br><span class="line">        &#125;</span><br><span class="line">        ftpStream.Close();</span><br><span class="line">        fileStream.Close();</span><br><span class="line">        response.Close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 解析FTP-LIST命令</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strListCommand&quot;&gt;</span>FTP-LIST命令<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> FTPListTypeModel <span class="title">AnalysisLISTCommand</span>(<span class="params"><span class="built_in">string</span> strListCommand</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FTPListTypeModel ListType = <span class="keyword">new</span> FTPListTypeModel();</span><br><span class="line">    <span class="comment">//根据空格拆分成 9 部分</span></span><br><span class="line">    <span class="built_in">string</span>[] strListCommandSplit = strListCommand.Split(<span class="keyword">new</span> <span class="built_in">char</span>[] &#123; <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span> &#125;, StringSplitOptions.RemoveEmptyEntries);</span><br><span class="line">    <span class="comment">//文件类型 位数(1)</span></span><br><span class="line">    ListType.FileType = strListCommandSplit[<span class="number">0</span>].Substring(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//文件属主拥有权限 位数(2-4)</span></span><br><span class="line">    ListType.UserOwnership = strListCommandSplit[<span class="number">0</span>].Substring(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="comment">//文件属主同一组用户拥有权限 位数(5-7)</span></span><br><span class="line">    ListType.GroupUserOwnership = strListCommandSplit[<span class="number">0</span>].Substring(<span class="number">4</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="comment">//其他用户拥有权限 位数(8-10)</span></span><br><span class="line">    ListType.OtherUserOwnership = strListCommandSplit[<span class="number">0</span>].Substring(<span class="number">7</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="comment">//未知参数1 (1)</span></span><br><span class="line">    ListType.UnknownParameter1 = strListCommandSplit[<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//未知参数2 (user)</span></span><br><span class="line">    ListType.UnknownParameter2 = strListCommandSplit[<span class="number">2</span>];</span><br><span class="line">    <span class="comment">//未知参数3 (group)</span></span><br><span class="line">    ListType.UnknownParameter3 = strListCommandSplit[<span class="number">3</span>];</span><br><span class="line">    <span class="comment">//文件大小(文件夹为0)</span></span><br><span class="line">    ListType.FileSize = strListCommandSplit[<span class="number">4</span>];</span><br><span class="line">    <span class="comment">//文件月份</span></span><br><span class="line">    ListType.FileMonth = strListCommandSplit[<span class="number">5</span>];</span><br><span class="line">    <span class="comment">//文件日期</span></span><br><span class="line">    ListType.FileDay = strListCommandSplit[<span class="number">6</span>];</span><br><span class="line">    <span class="comment">//文件年份或时间</span></span><br><span class="line">    ListType.FileYearOrTime = strListCommandSplit[<span class="number">7</span>];</span><br><span class="line">    <span class="comment">//文件名称</span></span><br><span class="line">    ListType.FileName = strListCommandSplit[<span class="number">8</span>];</span><br><span class="line">    <span class="keyword">return</span> ListType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>一个同学的需求：公司是做三维模型模具的，领导要求每个人每次修改上传至FTP，然后领导每天会定时完整下载（虽然我也不理解为什么他们不用SVN或者GIT，需求是什么样的就做成什么样嘛！）。功能需求是制作一个控制台程序，通过<a href="/blog/2017/09/18/csharp-TaskschdHelper/">任务计划</a>中每天下班定时执行即可。FTP参数调用本地<a href="/blog/2017/05/10/csharp-INIHelper/">INI配置文件</a>。<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> strPath = System.AppDomain.CurrentDomain.SetupInformation.ApplicationBase + <span class="string">&quot;Config.ini&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> strFTP = INIHelper.INIGetStringValue(strPath, <span class="string">&quot;System&quot;</span>, <span class="string">&quot;FTP&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="built_in">string</span> strUser = INIHelper.INIGetStringValue(strPath, <span class="string">&quot;System&quot;</span>, <span class="string">&quot;User&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="built_in">string</span> strPassword = INIHelper.INIGetStringValue(strPath, <span class="string">&quot;System&quot;</span>, <span class="string">&quot;Password&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="built_in">string</span> strSavePath = INIHelper.INIGetStringValue(strPath, <span class="string">&quot;System&quot;</span>, <span class="string">&quot;SavePath&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    FTPSharingHelper ftp = <span class="keyword">new</span> FTPSharingHelper();</span><br><span class="line">    ftp.FTPConnectionURL(strFTP, strUser, strPassword);</span><br><span class="line">    DownloadFile(ftp, strFTP, strUser, strPassword, strSavePath);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 下载目录所有文件</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;ftp&quot;&gt;</span>FTP链接<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strFTP&quot;&gt;</span>链接地址<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strUser&quot;&gt;</span>用户名<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strPassword&quot;&gt;</span>密码<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strSavePath&quot;&gt;</span>保存路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DownloadFile</span>(<span class="params">FTPSharingHelper ftp, <span class="built_in">string</span> strFTP, <span class="built_in">string</span> strUser, <span class="built_in">string</span> strPassword, <span class="built_in">string</span> strSavePath</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        ftp.FTPConnectionURL(strFTP, strUser, strPassword);</span><br><span class="line">        <span class="comment">//下载当前目录文件</span></span><br><span class="line">        List&lt;<span class="built_in">string</span>&gt; list1 = ftp.GetFilesDetailList();</span><br><span class="line">        <span class="keyword">if</span> (list1 != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> list1)</span><br><span class="line">            &#123;</span><br><span class="line">                ftp.DownloadFile(strSavePath, item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//下载文件夹文件</span></span><br><span class="line">        List&lt;<span class="built_in">string</span>&gt; list2 = ftp.GetFoldersDetailList();</span><br><span class="line">        <span class="keyword">if</span> (list2 != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> list2)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (item.Substring(<span class="number">0</span>, <span class="number">1</span>).Equals(<span class="string">&quot;.&quot;</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">string</span> strNewFTP = strFTP + item + <span class="string">&quot;/&quot;</span>;</span><br><span class="line">                <span class="built_in">string</span> strNewSavePath = strSavePath + <span class="string">&quot;\\&quot;</span> + item;</span><br><span class="line">                <span class="keyword">if</span> (!Directory.Exists(strNewSavePath))</span><br><span class="line">                &#123;</span><br><span class="line">                    Directory.CreateDirectory(strNewSavePath);</span><br><span class="line">                &#125;</span><br><span class="line">                DownloadFile(ftp, strNewFTP, strUser, strPassword, strNewSavePath);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>helper</tag>
        <tag>ftp</tag>
      </tags>
  </entry>
  <entry>
    <title>文件共享帮助类</title>
    <url>/blog/2017/05/23/csharp-FileSharingHelper/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/csharp-DevFramework/%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB.png"/></p>
<span id="more"></span>
<h3 id="基于-Win32-API-与-CMD-命令制作可视化文件共享工具"><a href="#基于-Win32-API-与-CMD-命令制作可视化文件共享工具" class="headerlink" title="基于 Win32 API 与 CMD 命令制作可视化文件共享工具"></a>基于 Win32 API 与 CMD 命令制作可视化文件共享工具</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>不论是工作使用或是平时经常会出现两台电脑网线直连拷贝文件的情况（通过外网传输速度会受带宽限制，飞秋这种局域网聊天软件需要两台电脑同时安装，硬件存储设备需要拷贝两次，Ftp需要搭建环境，所以大部分情况下文件共享还是最好的解决方案），但是就像我这种对系统比较熟悉的人，每次操作也要找一会，与其记住命令不如做出一个可视化界面。</p>
<h4 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h4><p><a href="https://github.com/Sadness96/Sadness/blob/master/Code/Helper/FileIO.Helper/FileSharing/FileSharingHelper.cs">FileSharingHelper</a><br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 读取共享文件信息</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>共享信息DataTable(&#x27;name&#x27;:&#x27;共享文件名称&#x27;,&#x27;path&#x27;:&#x27;共享文件路径&#x27;,&#x27;permissions&#x27;:&#x27;访问控制权限&#x27;,&#x27;type&#x27;:&#x27;共享文件属性&#x27;)<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataTable <span class="title">InquireShareFile</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        ManagementObjectSearcher searcher = <span class="keyword">new</span> ManagementObjectSearcher(<span class="string">&quot;select * from win32_share&quot;</span>);</span><br><span class="line">        DataTable ShareFile = <span class="keyword">new</span> DataTable();</span><br><span class="line">        ShareFile.Columns.Add(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        ShareFile.Columns.Add(<span class="string">&quot;path&quot;</span>);</span><br><span class="line">        ShareFile.Columns.Add(<span class="string">&quot;permissions&quot;</span>);</span><br><span class="line">        ShareFile.Columns.Add(<span class="string">&quot;type&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (ManagementObject share <span class="keyword">in</span> searcher.Get())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//获取共享文件信息</span></span><br><span class="line">                <span class="built_in">string</span> name = share[<span class="string">&quot;Name&quot;</span>].ToString();</span><br><span class="line">                <span class="built_in">string</span> path = share[<span class="string">&quot;Path&quot;</span>].ToString();</span><br><span class="line">                <span class="built_in">string</span> type = share[<span class="string">&quot;Type&quot;</span>].ToString();</span><br><span class="line">                <span class="keyword">if</span> (type == <span class="string">&quot;0&quot;</span>)</span><br><span class="line">                &#123; type = <span class="string">&quot;磁盘驱动器&quot;</span>; &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">&quot;1&quot;</span>)</span><br><span class="line">                &#123; type = <span class="string">&quot;打印队列&quot;</span>; &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">&quot;2&quot;</span>)</span><br><span class="line">                &#123; type = <span class="string">&quot;设备&quot;</span>; &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">&quot;3&quot;</span>)</span><br><span class="line">                &#123; type = <span class="string">&quot;IPC&quot;</span>; &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">&quot;2147483648&quot;</span>)</span><br><span class="line">                &#123; type = <span class="string">&quot;磁盘驱动器管理&quot;</span>; &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">&quot;2147483649&quot;</span>)</span><br><span class="line">                &#123; type = <span class="string">&quot;打印队列管理&quot;</span>; &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">&quot;2147483650&quot;</span>)</span><br><span class="line">                &#123; type = <span class="string">&quot;设备管理&quot;</span>; &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">&quot;2147483651&quot;</span>)</span><br><span class="line">                &#123; type = <span class="string">&quot;IPC 管理员&quot;</span>; &#125;</span><br><span class="line">                <span class="comment">//获得共享文件访问权限(通过cmd搜索)</span></span><br><span class="line">                <span class="built_in">string</span> Permissions = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="built_in">string</span> cmd = <span class="built_in">string</span>.Format(<span class="string">&quot;net share &#123;0&#125;&quot;</span>, name);</span><br><span class="line">                <span class="built_in">string</span> strOutput = ImplementationCMD(cmd);</span><br><span class="line">                <span class="keyword">if</span> (strOutput.IndexOf(<span class="string">&quot;FULL&quot;</span>) &gt; <span class="number">-1</span>)</span><br><span class="line">                &#123; Permissions = <span class="string">&quot;完全控制&quot;</span>; &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (strOutput.IndexOf(<span class="string">&quot;READ&quot;</span>) &gt; <span class="number">-1</span>)</span><br><span class="line">                &#123; Permissions = <span class="string">&quot;只读&quot;</span>; &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (strOutput.IndexOf(<span class="string">&quot;CHANGE&quot;</span>) &gt; <span class="number">-1</span>)</span><br><span class="line">                &#123; Permissions = <span class="string">&quot;读取/写入&quot;</span>; &#125;</span><br><span class="line">                <span class="comment">//数据写入DataTable</span></span><br><span class="line">                DataRow dr = ShareFile.NewRow();</span><br><span class="line">                dr[<span class="string">&quot;name&quot;</span>] = name;</span><br><span class="line">                dr[<span class="string">&quot;path&quot;</span>] = path;</span><br><span class="line">                dr[<span class="string">&quot;permissions&quot;</span>] = Permissions;</span><br><span class="line">                dr[<span class="string">&quot;type&quot;</span>] = type;</span><br><span class="line">                ShareFile.Rows.Add(dr);</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                TXTHelper.Logs(ex.ToString());</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ShareFile;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 新增共享</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;FolderPath&quot;&gt;</span>共享文件路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;ShareName&quot;&gt;</span>共享文件名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;Permissions&quot;&gt;</span>访问控制权限(&#x27;完全控制&#x27;:&#x27;FULL&#x27;,&#x27;只读&#x27;:&#x27;READ&#x27;,&#x27;读取/写入&#x27;:&#x27;CHANGE&#x27;)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">AddShareFolder</span>(<span class="params"><span class="built_in">string</span> FolderPath, <span class="built_in">string</span> ShareName, <span class="built_in">string</span> Permissions</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//输入命令NET SHARE sharename=drive:path [/GRANT:user,[READ | CHANGE | FULL]</span></span><br><span class="line">        <span class="built_in">string</span> cmd = <span class="built_in">string</span>.Format(<span class="string">@&quot;net share &#123;0&#125;=&#123;1&#125; /grant:&#123;2&#125;,&#123;3&#125;&quot;</span>, ShareName, FolderPath, System.Environment.UserName, Permissions);</span><br><span class="line">        <span class="built_in">string</span> strOutput = ImplementationCMD(cmd);</span><br><span class="line">        <span class="keyword">return</span> strOutput.IndexOf(<span class="string">&quot;共享成功&quot;</span>) &gt; <span class="number">-1</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 新增共享</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;FolderPath&quot;&gt;</span>共享文件路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;ShareName&quot;&gt;</span>共享文件名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;PermissionsType&quot;&gt;</span>访问控制权限(枚举)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">AddShareFolder</span>(<span class="params"><span class="built_in">string</span> FolderPath, <span class="built_in">string</span> ShareName, SharingPermissions.PermissionsType PermissionsType</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//输入命令NET SHARE sharename=drive:path [/GRANT:user,[READ | CHANGE | FULL]</span></span><br><span class="line">        <span class="built_in">string</span> cmd = <span class="built_in">string</span>.Format(<span class="string">@&quot;net share &#123;0&#125;=&#123;1&#125; /grant:&#123;2&#125;,&#123;3&#125;&quot;</span>, ShareName, FolderPath, System.Environment.UserName, PermissionsType);</span><br><span class="line">        <span class="built_in">string</span> strOutput = ImplementationCMD(cmd);</span><br><span class="line">        <span class="keyword">return</span> strOutput.IndexOf(<span class="string">&quot;共享成功&quot;</span>) &gt; <span class="number">-1</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 删除共享</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;FolderPath&quot;&gt;</span>共享文件夹路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">DeleteShareFolder</span>(<span class="params"><span class="built_in">string</span> FolderPath</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//输入命令NET SHARE sharename \\computername /DELETE</span></span><br><span class="line">        <span class="built_in">string</span> cmd = <span class="built_in">string</span>.Format(<span class="string">@&quot;net share &#123;0&#125; /delete /y&quot;</span>, FolderPath);</span><br><span class="line">        <span class="built_in">string</span> strOutput = ImplementationCMD(cmd);</span><br><span class="line">        <span class="keyword">return</span> strOutput.IndexOf(<span class="string">&quot;已经删除&quot;</span>) &gt; <span class="number">-1</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 执行CMD命令</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;cmd&quot;&gt;</span>cmd命令<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>cmd窗口的输出信息<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">ImplementationCMD</span>(<span class="params"><span class="built_in">string</span> cmd</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//使用cmd命令对文件共享进行操作</span></span><br><span class="line">        System.Diagnostics.Process p = <span class="keyword">new</span> System.Diagnostics.Process();</span><br><span class="line">        p.StartInfo.FileName = <span class="string">&quot;cmd.exe&quot;</span>;</span><br><span class="line">        <span class="comment">//是否使用操作系统shell启动</span></span><br><span class="line">        p.StartInfo.UseShellExecute = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//接受来自调用程序的输入信息</span></span><br><span class="line">        p.StartInfo.RedirectStandardInput = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//由调用程序获取输出信息</span></span><br><span class="line">        p.StartInfo.RedirectStandardOutput = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//重定向标准错误输出</span></span><br><span class="line">        p.StartInfo.RedirectStandardError = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//不显示程序窗口</span></span><br><span class="line">        p.StartInfo.CreateNoWindow = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//启动程序</span></span><br><span class="line">        p.Start();</span><br><span class="line">        <span class="comment">//执行CMD命令</span></span><br><span class="line">        p.StandardInput.WriteLine(cmd);</span><br><span class="line">        p.StandardInput.AutoFlush = <span class="literal">true</span>;</span><br><span class="line">        p.StandardInput.WriteLine(<span class="string">&quot;exit&quot;</span>);</span><br><span class="line">        <span class="comment">//获取cmd窗口的输出信息</span></span><br><span class="line">        <span class="built_in">string</span> strOutput = p.StandardOutput.ReadToEnd();</span><br><span class="line">        p.WaitForExit();<span class="comment">//等待程序执行完退出进程</span></span><br><span class="line">        p.Close();</span><br><span class="line">        <span class="keyword">return</span> strOutput;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>helper</tag>
        <tag>windows</tag>
        <tag>filesharing</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF Popup 与 ToolTip 显示位置异常</title>
    <url>/blog/2022/10/10/csharp-Handedness/</url>
    <content><![CDATA[<h3 id="由于平板电脑设置下的惯用手设置导致的显示位置异常"><a href="#由于平板电脑设置下的惯用手设置导致的显示位置异常" class="headerlink" title="由于平板电脑设置下的惯用手设置导致的显示位置异常"></a>由于平板电脑设置下的惯用手设置导致的显示位置异常</h3><span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>WPF 中 <a href="https://learn.microsoft.com/en-us/dotnet/desktop/wpf/controls/popup?view=netframeworkdesktop-4.8">Popup</a> 与 <a href="https://learn.microsoft.com/en-us/dotnet/desktop/wpf/controls/tooltip?view=netframeworkdesktop-4.8">ToolTip</a> 控件会受到 Windows 系统设置中 平板电脑设置-&gt;惯用手 设置而显示异常，例如设置惯用右手时弹窗显示在左侧，设置惯用左手时弹窗显示在右侧。</p>
<h4 id="惯用右手"><a href="#惯用右手" class="headerlink" title="惯用右手"></a>惯用右手</h4><p><img src="https://sadness96.github.io/images/blog/csharp-Handedness/惯用右手1.jpg"/></p>
<p><img src="https://sadness96.github.io/images/blog/csharp-Handedness/惯用右手2.jpg"/></p>
<h4 id="惯用左手"><a href="#惯用左手" class="headerlink" title="惯用左手"></a>惯用左手</h4><p><img src="https://sadness96.github.io/images/blog/csharp-Handedness/惯用左手1.jpg"/></p>
<p><img src="https://sadness96.github.io/images/blog/csharp-Handedness/惯用左手2.jpg"/></p>
<h3 id="设置惯用手"><a href="#设置惯用手" class="headerlink" title="设置惯用手"></a>设置惯用手</h3><ol>
<li><p>运行中输入：shell:::{80F3F1D5-FECA-45F3-BC32-752C152E456E} 打开平板电脑设置<br><img src="https://sadness96.github.io/images/blog/csharp-Handedness/运行.jpg"/></p>
</li>
<li><p>在其他中可以设置左右手使用习惯（一般情况下系统默认惯用左手）<br><img src="https://sadness96.github.io/images/blog/csharp-Handedness/平板电脑设置.jpg"/></p>
</li>
</ol>
<h3 id="代码修改"><a href="#代码修改" class="headerlink" title="代码修改"></a>代码修改</h3><h4 id="代码修改系统为惯用左手（不建议）"><a href="#代码修改系统为惯用左手（不建议）" class="headerlink" title="代码修改系统为惯用左手（不建议）"></a>代码修改系统为惯用左手（不建议）</h4><p>参考 <a href="https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-systemparametersinfoa?redirectedfrom=MSDN">SystemParametersInfoA</a> 函数设置，设置为惯用左手，不过既然是设置系统，免不了会与其他软件冲突。<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MainWindow</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    InitializeComponent();</span><br><span class="line">    <span class="comment">// 设置对齐方式</span></span><br><span class="line">    SystemParametersInfoSet(<span class="number">0x001C</span> <span class="comment">/*SPI_SETMENUDROPALIGNMENT*/</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">DllImport(<span class="meta-string">&quot;user32.dll&quot;</span>, EntryPoint = <span class="meta-string">&quot;SystemParametersInfo&quot;</span>, SetLastError = true)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">bool</span> <span class="title">SystemParametersInfoSet</span>(<span class="params"><span class="built_in">uint</span> action, <span class="built_in">uint</span> uiParam, <span class="built_in">uint</span> vparam, <span class="built_in">uint</span> <span class="keyword">init</span></span>)</span>;</span><br></pre></td></tr></table></figure></p>
<h4 id="代码修改临时为惯用左手（推荐）"><a href="#代码修改临时为惯用左手（推荐）" class="headerlink" title="代码修改临时为惯用左手（推荐）"></a>代码修改临时为惯用左手（推荐）</h4><p>使用代码修改临时为惯用左手，仅对当前运行有效，不修改系统设置。<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MainWindow</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    InitializeComponent();</span><br><span class="line">    <span class="comment">// 设置对齐方式</span></span><br><span class="line">    SetAlignment();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 设置对齐方式</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 设置为惯用左手 菜单出现在手的右侧</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetAlignment</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//获取系统是以Left-handed（true）还是Right-handed（false）</span></span><br><span class="line">    <span class="keyword">var</span> ifLeft = SystemParameters.MenuDropAlignment;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ifLeft)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// change to false</span></span><br><span class="line">        <span class="keyword">var</span> t = <span class="keyword">typeof</span>(SystemParameters);</span><br><span class="line">        <span class="keyword">var</span> field = t.GetField(<span class="string">&quot;_menuDropAlignment&quot;</span>, BindingFlags.NonPublic | BindingFlags.Static);</span><br><span class="line">        field.SetValue(<span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
      </tags>
  </entry>
  <entry>
    <title>INI文件帮助类</title>
    <url>/blog/2017/05/10/csharp-INIHelper/</url>
    <content><![CDATA[<h3 id="操作-INI-文件帮助类"><a href="#操作-INI-文件帮助类" class="headerlink" title="操作 INI 文件帮助类"></a>操作 INI 文件帮助类</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><a href="https://baike.baidu.com/item/ini%E6%96%87%E4%BB%B6/9718973?fr=aladdin">INI</a> 即初始化文件，是windows的系统配置文件所采用的存储格式。也是现在软件开发最常见的配置文件。<br><a href="https://github.com/Sadness96/Sadness/blob/master/Code/Helper/FileIO.Helper/INI/INIHelper.cs">INIHelper</a> 帮助类主要提供INI配置文件创建，节点增删改。</p>
<h4 id="INI文件操作"><a href="#INI文件操作" class="headerlink" title="INI文件操作"></a>INI文件操作</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">region</span> INI 文本帮助类 API 声明</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获取所有节点名称(Section)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;lpszReturnBuffer&quot;&gt;</span>存放节点名称的内存地址,每个节点之间用\0分隔<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;nSize&quot;&gt;</span>内存大小(characters)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;lpFileName&quot;&gt;</span>Ini文件<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>内容的实际长度,为0表示没有内容,为nSize-2表示内存大小不够<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">DllImport(<span class="meta-string">&quot;kernel32.dll&quot;</span>, CharSet = CharSet.Auto)</span>]</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">uint</span> <span class="title">GetPrivateProfileSectionNames</span>(<span class="params">IntPtr lpszReturnBuffer, <span class="built_in">uint</span> nSize, <span class="built_in">string</span> lpFileName</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获取某个指定节点(Section)中所有KEY和Value</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;lpAppName&quot;&gt;</span>节点名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;lpReturnedString&quot;&gt;</span>返回值的内存地址,每个之间用\0分隔<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;nSize&quot;&gt;</span>内存大小(characters)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;lpFileName&quot;&gt;</span>Ini文件<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>内容的实际长度,为0表示没有内容,为nSize-2表示内存大小不够<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">DllImport(<span class="meta-string">&quot;kernel32.dll&quot;</span>, CharSet = CharSet.Auto)</span>]</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">uint</span> <span class="title">GetPrivateProfileSection</span>(<span class="params"><span class="built_in">string</span> lpAppName, IntPtr lpReturnedString, <span class="built_in">uint</span> nSize, <span class="built_in">string</span> lpFileName</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 读取INI文件中指定的Key的值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;lpAppName&quot;&gt;</span>节点名称.如果为null,则读取INI中所有节点名称,每个节点名称之间用\0分隔<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;lpKeyName&quot;&gt;</span>Key名称.如果为null,则读取INI中指定节点中的所有KEY,每个KEY之间用\0分隔<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;lpDefault&quot;&gt;</span>读取失败时的默认值<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;lpReturnedString&quot;&gt;</span>读取的内容缓冲区,读取之后,多余的地方使用\0填充<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;nSize&quot;&gt;</span>内容缓冲区的长度<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;lpFileName&quot;&gt;</span>INI文件名<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>实际读取到的长度<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">DllImport(<span class="meta-string">&quot;kernel32.dll&quot;</span>, CharSet = CharSet.Auto)</span>]</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">uint</span> <span class="title">GetPrivateProfileString</span>(<span class="params"><span class="built_in">string</span> lpAppName, <span class="built_in">string</span> lpKeyName, <span class="built_in">string</span> lpDefault, [In, Out] <span class="built_in">char</span>[] lpReturnedString, <span class="built_in">uint</span> nSize, <span class="built_in">string</span> lpFileName</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 另一种声明方式,使用 StringBuilder 作为缓冲区类型的缺点是不能接受\0字符,会将\0及其后的字符截断,所以对于lpAppName或lpKeyName为null的情况就不适用</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;lpAppName&quot;&gt;</span>节点名称.如果为null,则读取INI中所有节点名称,每个节点名称之间用\0分隔<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;lpKeyName&quot;&gt;</span>Key名称.如果为null,则读取INI中指定节点中的所有KEY,每个KEY之间用\0分隔<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;lpDefault&quot;&gt;</span>读取失败时的默认值<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;lpReturnedString&quot;&gt;</span>读取的内容缓冲区,读取之后,多余的地方使用\0填充<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;nSize&quot;&gt;</span>内容缓冲区的长度<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;lpFileName&quot;&gt;</span>INI文件名<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>实际读取到的长度<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">DllImport(<span class="meta-string">&quot;kernel32.dll&quot;</span>, CharSet = CharSet.Auto)</span>]</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">uint</span> <span class="title">GetPrivateProfileString</span>(<span class="params"><span class="built_in">string</span> lpAppName, <span class="built_in">string</span> lpKeyName, <span class="built_in">string</span> lpDefault, StringBuilder lpReturnedString, <span class="built_in">uint</span> nSize, <span class="built_in">string</span> lpFileName</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 再一种声明,使用string作为缓冲区的类型同char[]</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;lpAppName&quot;&gt;</span>节点名称.如果为null,则读取INI中所有节点名称,每个节点名称之间用\0分隔<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;lpKeyName&quot;&gt;</span>Key名称.如果为null,则读取INI中指定节点中的所有KEY,每个KEY之间用\0分隔<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;lpDefault&quot;&gt;</span>读取失败时的默认值<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;lpReturnedString&quot;&gt;</span>读取的内容缓冲区,读取之后,多余的地方使用\0填充<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;nSize&quot;&gt;</span>内容缓冲区的长度<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;lpFileName&quot;&gt;</span>INI文件名<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>实际读取到的长度<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">DllImport(<span class="meta-string">&quot;kernel32.dll&quot;</span>, CharSet = CharSet.Auto)</span>]</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">uint</span> <span class="title">GetPrivateProfileString</span>(<span class="params"><span class="built_in">string</span> lpAppName, <span class="built_in">string</span> lpKeyName, <span class="built_in">string</span> lpDefault, <span class="built_in">string</span> lpReturnedString, <span class="built_in">uint</span> nSize, <span class="built_in">string</span> lpFileName</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 将指定的键值对写到指定的节点,如果已经存在则替换.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;lpAppName&quot;&gt;</span>节点,如果不存在此节点,则创建此节点<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;lpString&quot;&gt;</span>Item键值对,多个用\0分隔,形如key1=value1\0key2=value2;如果为string.Empty,则删除指定节点下的所有内容,保留节点;如果为null,则删除指定节点下的所有内容,并且删除该节点<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;lpFileName&quot;&gt;</span>INI文件<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>是否成功写入<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">DllImport(<span class="meta-string">&quot;kernel32.dll&quot;</span>, CharSet = CharSet.Auto)</span>]</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">bool</span> <span class="title">WritePrivateProfileSection</span>(<span class="params"><span class="built_in">string</span> lpAppName, <span class="built_in">string</span> lpString, <span class="built_in">string</span> lpFileName</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 将指定的键和值写到指定的节点，如果已经存在则替换</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;lpAppName&quot;&gt;</span>节点名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;lpKeyName&quot;&gt;</span>键名称。如果为null，则删除指定的节点及其所有的项目<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;lpString&quot;&gt;</span>值内容。如果为null，则删除指定节点中指定的键。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;lpFileName&quot;&gt;</span>INI文件<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>操作是否成功<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">[<span class="meta">DllImport(<span class="meta-string">&quot;kernel32.dll&quot;</span>, CharSet = CharSet.Auto, SetLastError = true)</span>]</span><br><span class="line">[<span class="meta">return: MarshalAs(UnmanagedType.Bool)</span>]</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">bool</span> <span class="title">WritePrivateProfileString</span>(<span class="params"><span class="built_in">string</span> lpAppName, <span class="built_in">string</span> lpKeyName, <span class="built_in">string</span> lpString, <span class="built_in">string</span> lpFileName</span>)</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">region</span> INI 文本帮助类 封装方法</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 读取INI文件中指定INI文件中的所有节点名称(Section)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;iniFile&quot;&gt;</span>Ini文件<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>所有节点,没有内容返回string[0]<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span>[] <span class="title">INIGetAllSectionNames</span>(<span class="params"><span class="built_in">string</span> iniFile</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//默认为32767</span></span><br><span class="line">    <span class="built_in">uint</span> MAX_BUFFER = <span class="number">32767</span>;</span><br><span class="line">    <span class="comment">//返回值</span></span><br><span class="line">    <span class="built_in">string</span>[] sections = <span class="keyword">new</span> <span class="built_in">string</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//申请内存</span></span><br><span class="line">    IntPtr pReturnedString = Marshal.AllocCoTaskMem((<span class="built_in">int</span>)MAX_BUFFER * <span class="keyword">sizeof</span>(<span class="built_in">char</span>));</span><br><span class="line">    <span class="built_in">uint</span> bytesReturned = GetPrivateProfileSectionNames(pReturnedString, MAX_BUFFER, iniFile);</span><br><span class="line">    <span class="keyword">if</span> (bytesReturned != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//读取指定内存的内容</span></span><br><span class="line">        <span class="built_in">string</span> local = Marshal.PtrToStringAuto(pReturnedString, (<span class="built_in">int</span>)bytesReturned).ToString();</span><br><span class="line">        <span class="comment">//每个节点之间用\0分隔,末尾有一个\0</span></span><br><span class="line">        sections = local.Split(<span class="keyword">new</span> <span class="built_in">char</span>[] &#123; <span class="string">&#x27;\0&#x27;</span> &#125;, StringSplitOptions.RemoveEmptyEntries);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放内存</span></span><br><span class="line">    Marshal.FreeCoTaskMem(pReturnedString);</span><br><span class="line">    <span class="keyword">return</span> sections;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获取INI文件中指定节点(Section)中的所有条目(key=value形式)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;iniFile&quot;&gt;</span>Ini文件<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;section&quot;&gt;</span>节点名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>指定节点中的所有项目,没有内容返回string[0]<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span>[] <span class="title">INIGetAllItems</span>(<span class="params"><span class="built_in">string</span> iniFile, <span class="built_in">string</span> section</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//返回值形式为 key=value,例如 Color=Red;</span></span><br><span class="line">    <span class="built_in">uint</span> MAX_BUFFER = <span class="number">32767</span>;</span><br><span class="line">    <span class="built_in">string</span>[] items = <span class="keyword">new</span> <span class="built_in">string</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//分配内存</span></span><br><span class="line">    IntPtr pReturnedString = Marshal.AllocCoTaskMem((<span class="built_in">int</span>)MAX_BUFFER * <span class="keyword">sizeof</span>(<span class="built_in">char</span>));</span><br><span class="line">    <span class="built_in">uint</span> bytesReturned = GetPrivateProfileSection(section, pReturnedString, MAX_BUFFER, iniFile);</span><br><span class="line">    <span class="keyword">if</span> (!(bytesReturned == MAX_BUFFER - <span class="number">2</span>) || (bytesReturned == <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> returnedString = Marshal.PtrToStringAuto(pReturnedString, (<span class="built_in">int</span>)bytesReturned);</span><br><span class="line">        items = returnedString.Split(<span class="keyword">new</span> <span class="built_in">char</span>[] &#123; <span class="string">&#x27;\0&#x27;</span> &#125;, StringSplitOptions.RemoveEmptyEntries);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放内存</span></span><br><span class="line">    Marshal.FreeCoTaskMem(pReturnedString);</span><br><span class="line">    <span class="keyword">return</span> items;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获取INI文件中指定节点(Section)中的所有条目的Key列表</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;iniFile&quot;&gt;</span>Ini文件<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;section&quot;&gt;</span>节点名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>如果没有内容,反回string[0]<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span>[] <span class="title">INIGetAllItemKeys</span>(<span class="params"><span class="built_in">string</span> iniFile, <span class="built_in">string</span> section</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span>[] <span class="keyword">value</span> = <span class="keyword">new</span> <span class="built_in">string</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">int</span> SIZE = <span class="number">1024</span> * <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(section))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;必须指定节点名称&quot;</span>, <span class="string">&quot;section&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">char</span>[] chars = <span class="keyword">new</span> <span class="built_in">char</span>[SIZE];</span><br><span class="line">    <span class="built_in">uint</span> bytesReturned = GetPrivateProfileString(section, <span class="literal">null</span>, <span class="literal">null</span>, chars, SIZE, iniFile);</span><br><span class="line">    <span class="keyword">if</span> (bytesReturned != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">value</span> = <span class="keyword">new</span> <span class="built_in">string</span>(chars).Split(<span class="keyword">new</span> <span class="built_in">char</span>[] &#123; <span class="string">&#x27;\0&#x27;</span> &#125;, StringSplitOptions.RemoveEmptyEntries);</span><br><span class="line">    &#125;</span><br><span class="line">    chars = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 读取INI文件中指定KEY的字符串型值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;iniFile&quot;&gt;</span>Ini文件<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;section&quot;&gt;</span>节点名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>键名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;defaultValue&quot;&gt;</span>如果没此KEY所使用的默认值<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>读取到的值<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">INIGetStringValue</span>(<span class="params"><span class="built_in">string</span> iniFile, <span class="built_in">string</span> section, <span class="built_in">string</span> key, <span class="built_in">string</span> defaultValue</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> <span class="keyword">value</span> = defaultValue;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">int</span> SIZE = <span class="number">1024</span> * <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(section))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;必须指定节点名称&quot;</span>, <span class="string">&quot;section&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(key))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;必须指定键名称(key)&quot;</span>, <span class="string">&quot;key&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder(SIZE);</span><br><span class="line">    <span class="built_in">uint</span> bytesReturned = GetPrivateProfileString(section, key, defaultValue, sb, SIZE, iniFile);</span><br><span class="line">    <span class="keyword">if</span> (bytesReturned != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">value</span> = sb.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">    sb = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 在INI文件中,将指定的键值对写到指定的节点,如果已经存在则替换</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;iniFile&quot;&gt;</span>INI文件<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;section&quot;&gt;</span>节点,如果不存在此节点,则创建此节点<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;items&quot;&gt;</span>键值对,多个用\0分隔,形如key1=value1\0key2=value2<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">INIWriteItems</span>(<span class="params"><span class="built_in">string</span> iniFile, <span class="built_in">string</span> section, <span class="built_in">string</span> items</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(section))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;必须指定节点名称&quot;</span>, <span class="string">&quot;section&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(items))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;必须指定键值对&quot;</span>, <span class="string">&quot;items&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> WritePrivateProfileSection(section, items, iniFile);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 在INI文件中,指定节点写入指定的键及值.如果已经存在,则替换.如果没有则创建.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;iniFile&quot;&gt;</span>INI文件<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;section&quot;&gt;</span>节点<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>键<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span>值<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>操作是否成功<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">INIWriteValue</span>(<span class="params"><span class="built_in">string</span> iniFile, <span class="built_in">string</span> section, <span class="built_in">string</span> key, <span class="built_in">string</span> <span class="keyword">value</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(section))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;必须指定节点名称&quot;</span>, <span class="string">&quot;section&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(key))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;必须指定键名称&quot;</span>, <span class="string">&quot;key&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">value</span> == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;值不能为null&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> WritePrivateProfileString(section, key, <span class="keyword">value</span>, iniFile);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 在INI文件中,删除指定节点中的指定的键.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;iniFile&quot;&gt;</span>INI文件<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;section&quot;&gt;</span>节点<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>键<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>操作是否成功<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">INIDeleteKey</span>(<span class="params"><span class="built_in">string</span> iniFile, <span class="built_in">string</span> section, <span class="built_in">string</span> key</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(section))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;必须指定节点名称&quot;</span>, <span class="string">&quot;section&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(key))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;必须指定键名称&quot;</span>, <span class="string">&quot;key&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> WritePrivateProfileString(section, key, <span class="literal">null</span>, iniFile);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 在INI文件中,删除指定的节点.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;iniFile&quot;&gt;</span>INI文件<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;section&quot;&gt;</span>节点<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>操作是否成功<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">INIDeleteSection</span>(<span class="params"><span class="built_in">string</span> iniFile, <span class="built_in">string</span> section</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(section))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;必须指定节点名称&quot;</span>, <span class="string">&quot;section&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> WritePrivateProfileString(section, <span class="literal">null</span>, <span class="literal">null</span>, iniFile);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 在INI文件中,删除指定节点中的所有内容.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;iniFile&quot;&gt;</span>INI文件<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;section&quot;&gt;</span>节点<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>操作是否成功<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">INIEmptySection</span>(<span class="params"><span class="built_in">string</span> iniFile, <span class="built_in">string</span> section</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(section))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;必须指定节点名称&quot;</span>, <span class="string">&quot;section&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> WritePrivateProfileSection(section, <span class="built_in">string</span>.Empty, iniFile);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span></span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>helper</tag>
        <tag>ini</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka Demo</title>
    <url>/blog/2019/09/16/csharp-Kafka/</url>
    <content><![CDATA[<h3 id="Kafka-消息队列使用介绍"><a href="#Kafka-消息队列使用介绍" class="headerlink" title="Kafka 消息队列使用介绍"></a>Kafka 消息队列使用介绍</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><a href="http://kafka.apache.org/">Apache Kafka</a> 是一个分布式流平台。</p>
<p>流平台具有三个关键功能：</p>
<ul>
<li>发布和订阅记录流，类似于消息队列或企业消息传递系统。</li>
<li>以容错的持久方式存储记录流。</li>
<li>处理记录流。</li>
</ul>
<p>Kafka通常用于两大类应用程序：</p>
<ul>
<li>建立实时流数据管道，以可靠地在系统或应用程序之间获取数据</li>
<li>构建实时流应用程序以转换或响应数据流</li>
</ul>
<h4 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h4><p>请参阅<a href="http://kafka.apache.org/documentation/">官方文档</a></p>
<h4 id="C-代码调用"><a href="#C-代码调用" class="headerlink" title="C#代码调用"></a>C#代码调用</h4><p>引用 <a href="https://github.com/confluentinc/confluent-kafka-dotnet">Confluent.Kafka</a> 库</p>
<h5 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Confluent.Kafka;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> conf = <span class="keyword">new</span> ProducerConfig &#123; BootstrapServers = <span class="string">&quot;localhost:9092&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">        Action&lt;DeliveryReport&lt;Null, <span class="built_in">string</span>&gt;&gt; handler = r =&gt; </span><br><span class="line">            Console.WriteLine(!r.Error.IsError</span><br><span class="line">                ? <span class="string">$&quot;Delivered message to <span class="subst">&#123;r.TopicPartitionOffset&#125;</span>&quot;</span></span><br><span class="line">                : <span class="string">$&quot;Delivery Error: <span class="subst">&#123;r.Error.Reason&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> p = <span class="keyword">new</span> ProducerBuilder&lt;Null, <span class="built_in">string</span>&gt;(conf).Build())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                p.Produce(<span class="string">&quot;my-topic&quot;</span>, <span class="keyword">new</span> Message&lt;Null, <span class="built_in">string</span>&gt; &#123; Value = i.ToString() &#125;, handler);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// wait for up to 10 seconds for any inflight messages to be delivered.</span></span><br><span class="line">            p.Flush(TimeSpan.FromSeconds(<span class="number">10</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> Confluent.Kafka;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> conf = <span class="keyword">new</span> ConsumerConfig</span><br><span class="line">        &#123; </span><br><span class="line">            GroupId = <span class="string">&quot;test-consumer-group&quot;</span>,</span><br><span class="line">            BootstrapServers = <span class="string">&quot;localhost:9092&quot;</span>,</span><br><span class="line">            <span class="comment">// Note: The AutoOffsetReset property determines the start offset in the event</span></span><br><span class="line">            <span class="comment">// there are not yet any committed offsets for the consumer group for the</span></span><br><span class="line">            <span class="comment">// topic/partitions of interest. By default, offsets are committed</span></span><br><span class="line">            <span class="comment">// automatically, so in this example, consumption will only start from the</span></span><br><span class="line">            <span class="comment">// earliest message in the topic &#x27;my-topic&#x27; the first time you run the program.</span></span><br><span class="line">            AutoOffsetReset = AutoOffsetReset.Earliest,</span><br><span class="line">            <span class="comment">// 如果 Kafka 开启了 SSL 验证，则需要填写以下信息，否则删除</span></span><br><span class="line">            SecurityProtocol = SecurityProtocol.SaslSsl,</span><br><span class="line">            SaslMechanism = SaslMechanism.Plain,</span><br><span class="line">            SaslUsername = <span class="string">&quot;&quot;</span>,</span><br><span class="line">            SaslPassword = <span class="string">&quot;&quot;</span>,</span><br><span class="line">            SslCaLocation = <span class="string">&quot;ca.crt&quot;</span>,</span><br><span class="line">            SslKeystorePassword = <span class="string">&quot;&quot;</span>,</span><br><span class="line">            SslEndpointIdentificationAlgorithm = <span class="literal">null</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> c = <span class="keyword">new</span> ConsumerBuilder&lt;Ignore, <span class="built_in">string</span>&gt;(conf).Build())</span><br><span class="line">        &#123;</span><br><span class="line">            c.Subscribe(<span class="string">&quot;my-topic&quot;</span>);</span><br><span class="line"></span><br><span class="line">            CancellationTokenSource cts = <span class="keyword">new</span> CancellationTokenSource();</span><br><span class="line">            Console.CancelKeyPress += (_, e) =&gt; &#123;</span><br><span class="line">                e.Cancel = <span class="literal">true</span>; <span class="comment">// prevent the process from terminating.</span></span><br><span class="line">                cts.Cancel();</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">try</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">var</span> cr = c.Consume(cts.Token);</span><br><span class="line">                        Console.WriteLine(<span class="string">$&quot;Consumed message &#x27;<span class="subst">&#123;cr.Value&#125;</span>&#x27; at: &#x27;<span class="subst">&#123;cr.TopicPartitionOffset&#125;</span>&#x27;.&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    catch (ConsumeException e)</span><br><span class="line">                    &#123;</span><br><span class="line">                        Console.WriteLine(<span class="string">$&quot;Error occured: <span class="subst">&#123;e.Error.Reason&#125;</span>&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (OperationCanceledException)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Ensure the consumer leaves the group cleanly and final offsets are committed.</span></span><br><span class="line">                c.Close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h4><h5 id="在实际使用中消费数据使用多服务器链接"><a href="#在实际使用中消费数据使用多服务器链接" class="headerlink" title="在实际使用中消费数据使用多服务器链接"></a>在实际使用中消费数据使用多服务器链接</h5><p>追加配置多 IP 地址到 Hosts 文件中（例）：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">172.26.78.135 tdh02</span><br><span class="line">172.26.78.136 tdh03</span><br><span class="line">172.26.78.137 tdh04</span><br><span class="line">172.26.78.140 tdh07</span><br><span class="line">172.26.78.141 tdh08</span><br><span class="line">172.26.78.142 tdh09</span><br></pre></td></tr></table></figure></p>
<p>Host 文件所在目录：<br>| 系统 | 目录 |<br>| —- | —- |<br>| Windows | C:\windows\system32\drivers\etc\Hosts |<br>| Linux / Unix | /etc/Hosts |<br>| Mac OS | /private/etc/Hosts |</p>
<p>修改部分代码：<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> conf = <span class="keyword">new</span> ConsumerConfig</span><br><span class="line">&#123; </span><br><span class="line">    GroupId = <span class="string">&quot;test-consumer-group&quot;</span>,</span><br><span class="line">    BootstrapServers = <span class="string">&quot;tdh02:9092,tdh03:9092,tdh04:9092,tdh07:9092,tdh08:9092,tdh09:9092&quot;</span>,</span><br><span class="line">    AutoOffsetReset = AutoOffsetReset.Earliest</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF 多国语言开发</title>
    <url>/blog/2018/06/18/csharp-Language/</url>
    <content><![CDATA[<h3 id="WPF-多国语言开发与配置"><a href="#WPF-多国语言开发与配置" class="headerlink" title="WPF 多国语言开发与配置"></a>WPF 多国语言开发与配置</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>配置 WPF 客户端多国语言，并在设置中允许切换语言。<br>WPF 的标准做法为创建专门用于语言切换的资源字典，使用 &lt;System:String /&gt; 标签创建。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>创建 Language 文件夹做为语言存放目录，资源字典命名以语言缩写命名。<br>英文：/Language/en-US.xaml<br>中文：/Language/zh-CN.xaml</p>
<h5 id="资源字典"><a href="#资源字典" class="headerlink" title="资源字典"></a>资源字典</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- en-US.xaml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ResourceDictionary</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">xmlns:System</span> =<span class="string">&quot;clr-namespace:System;assembly=mscorlib&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">System:String</span> <span class="attr">x:Key</span>=<span class="string">&quot;Save&quot;</span>&gt;</span>Save<span class="tag">&lt;/<span class="name">System:String</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">System:String</span> <span class="attr">x:Key</span>=<span class="string">&quot;Close&quot;</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">System:String</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">System:String</span> <span class="attr">x:Key</span>=<span class="string">&quot;Exit&quot;</span>&gt;</span>Exit<span class="tag">&lt;/<span class="name">System:String</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">System:String</span> <span class="attr">x:Key</span>=<span class="string">&quot;OK&quot;</span>&gt;</span>OK<span class="tag">&lt;/<span class="name">System:String</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">System:String</span> <span class="attr">x:Key</span>=<span class="string">&quot;Yes&quot;</span>&gt;</span>Yes<span class="tag">&lt;/<span class="name">System:String</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">System:String</span> <span class="attr">x:Key</span>=<span class="string">&quot;No&quot;</span>&gt;</span>No<span class="tag">&lt;/<span class="name">System:String</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">System:String</span> <span class="attr">x:Key</span>=<span class="string">&quot;Cancel&quot;</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">System:String</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ResourceDictionary</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- zh-CN.xaml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ResourceDictionary</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">xmlns:System</span> =<span class="string">&quot;clr-namespace:System;assembly=mscorlib&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">System:String</span> <span class="attr">x:Key</span>=<span class="string">&quot;Save&quot;</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">System:String</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">System:String</span> <span class="attr">x:Key</span>=<span class="string">&quot;Close&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">System:String</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">System:String</span> <span class="attr">x:Key</span>=<span class="string">&quot;Exit&quot;</span>&gt;</span>退出<span class="tag">&lt;/<span class="name">System:String</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">System:String</span> <span class="attr">x:Key</span>=<span class="string">&quot;OK&quot;</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">System:String</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">System:String</span> <span class="attr">x:Key</span>=<span class="string">&quot;Yes&quot;</span>&gt;</span>是<span class="tag">&lt;/<span class="name">System:String</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">System:String</span> <span class="attr">x:Key</span>=<span class="string">&quot;No&quot;</span>&gt;</span>否<span class="tag">&lt;/<span class="name">System:String</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">System:String</span> <span class="attr">x:Key</span>=<span class="string">&quot;Cancel&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">System:String</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ResourceDictionary</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="引用资源"><a href="#引用资源" class="headerlink" title="引用资源"></a>引用资源</h5><p>在全局资源(App.xaml)中引用语言配置文件<br>资源样式按顺序加载，标签重复的后加载覆盖先加载的，所以可以移除样式后新增，达到运行中修改语言的目的。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Application</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Application.Resources</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置语言--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ResourceDictionary</span> <span class="attr">Source</span>=<span class="string">&quot;/Window;component/Language/en-US.xaml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ResourceDictionary</span> <span class="attr">Source</span>=<span class="string">&quot;/Window;component/Language/zh-CN.xaml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Application.Resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Application</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h5 id="切换语言"><a href="#切换语言" class="headerlink" title="切换语言"></a>切换语言</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;LanguageModel&gt; _listLanguage;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 语言资源集合</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;LanguageModel&gt; ListLanguage</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_listLanguage == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            _listLanguage = <span class="keyword">new</span> List&lt;LanguageModel&gt;();</span><br><span class="line">            _listLanguage.Add(<span class="keyword">new</span> LanguageModel() &#123; FileName = <span class="string">&quot;en-US&quot;</span>, Language = <span class="string">&quot;English&quot;</span>, Resource = <span class="keyword">new</span> ResourceDictionary() &#123; Source = <span class="keyword">new</span> Uri(<span class="string">&quot;/Window;component/Language/en-US.xaml&quot;</span>, UriKind.RelativeOrAbsolute) &#125; &#125;);</span><br><span class="line">            _listLanguage.Add(<span class="keyword">new</span> LanguageModel() &#123; FileName = <span class="string">&quot;zh-CN&quot;</span>, Language = <span class="string">&quot;简体中文&quot;</span>, Resource = <span class="keyword">new</span> ResourceDictionary() &#123; Source = <span class="keyword">new</span> Uri(<span class="string">&quot;/Window;component/Language/zh-CN.xaml&quot;</span>, UriKind.RelativeOrAbsolute) &#125; &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _listLanguage;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span></span><br><span class="line">    &#123;</span><br><span class="line">        _listLanguage = <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 设置语言</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;language&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetLanguage</span>(<span class="params"><span class="built_in">string</span> language = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 把要修改的语言放置资源最后</span></span><br><span class="line">    List&lt;ResourceDictionary&gt; dictionaryList = <span class="keyword">new</span> List&lt;ResourceDictionary&gt;();</span><br><span class="line">    <span class="keyword">foreach</span> (ResourceDictionary dictionary <span class="keyword">in</span> Application.Current.Resources.MergedDictionaries)</span><br><span class="line">    &#123;</span><br><span class="line">        dictionaryList.Add(dictionary);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(language))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> vSystemConfigInfo_Language = GetSystemConfigInfo(SECTION_SYSTEM, SYSTEM_LANGUAGE);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> ListLanguage)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.FileName.Equals(vSystemConfigInfo_Language))</span><br><span class="line">            &#123;</span><br><span class="line">                language = item.Resource.Source.OriginalString;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(language))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> resourceDictionary = dictionaryList.FirstOrDefault(o =&gt; o.Source.OriginalString.Equals(language));</span><br><span class="line">        <span class="keyword">if</span> (resourceDictionary != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Application.Current.Resources.BeginInit();</span><br><span class="line">            Application.Current.Resources.MergedDictionaries.Remove(resourceDictionary);</span><br><span class="line">            Application.Current.Resources.MergedDictionaries.Add(resourceDictionary);</span><br><span class="line">            Application.Current.Resources.EndInit();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">SetLanguage();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切换英文</span></span><br><span class="line">SetLanguage(<span class="string">&quot;/Window;component/Language/en-US.xaml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切换简体中文</span></span><br><span class="line">SetLanguage(<span class="string">&quot;/Window;component/Language/zh-CN.xaml&quot;</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF 加载 SVG</title>
    <url>/blog/2018/06/10/csharp-LoadSVG/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/csharp-LoadSVG/svgwindow.jpg"/></p>
<span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://baike.baidu.com/item/SVG格式/3463453">SVG</a> 是一种可缩放的 <a href="https://baike.baidu.com/item/矢量图">矢量图形</a>，在软件开发中，使用图片加载如果分辨率不足被拉伸后会导致模糊，尽可能使用矢量图形开发，减少项目大小的同时又保证 UI 的质量。<br>自己绘制 SVG 推荐使用 <a href="https://www.adobe.com/products/illustrator.html">Adobe Illustrator</a>、<a href="https://www.vectornator.io/">Vectornator</a>、<a href="https://c.runoob.com/more/svgeditor/">SVG 在线编辑器</a>。<br>网络资源推荐使用 <a href="https://www.iconfont.cn/">iconfont</a>、<a href="https://undraw.co/illustrations">undraw</a></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="加载-Path-路径"><a href="#加载-Path-路径" class="headerlink" title="加载 Path 路径"></a>加载 Path 路径</h4><p>SVG 又一些基础组件构成，例如 点、线、方形、圆形，而使用最多也是最重要的就是钢笔工具，体现在 SVG 中就是 Path 路径，这个方法就是仅使用钢笔绘制的图形加载，需要把图形左上角对齐后才更方便调整位置。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Viewbox</span> <span class="attr">Margin</span>=<span class="string">&quot;30&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Path</span> <span class="attr">Data</span>=<span class="string">&quot;m251,34.2l-164.8,0c-47.5,0 -86.2,38.7 -86.2,86.2l0,164.8c0,47.5 38.7,86.2 86.2,86.2l164.8,0c47.5,0 86.2,-38.7 86.2,-86.2l0,-164.8c0.1,-47.6 -38.6,-86.2 -86.2,-86.2zm-9.9,241.1l-145,0l0,-145l145,0l0,145zm9.9,150.8l-164.8,0c-47.5,0 -86.2,38.7 -86.2,86.2l0,164.8c0,47.5 38.7,86.2 86.2,86.2l164.8,0c47.5,0 86.2,-38.7 86.2,-86.2l0,-164.8c0.1,-47.5 -38.6,-86.2 -86.2,-86.2zm-9.9,241.1l-145,0l0,-145l145,0l0,145zm499.3,-525.4l-116.5,-116.5c-16.3,-16.3 -37.9,-25.3 -61,-25.3c-23,0 -44.7,9 -61,25.3l-116.5,116.5c-33.6,33.6 -33.6,88.3 0,121.9l116.6,116.5c16.3,16.3 37.9,25.3 61,25.3c23,0 44.7,-9 61,-25.3l116.6,-116.6c33.4,-33.4 33.4,-88.1 -0.2,-121.8zm-177.5,163.5l-102.5,-102.5l102.5,-102.5l102.5,102.5l-102.5,102.5zm82.4,120.8l-164.8,0c-47.5,0 -86.2,38.7 -86.2,86.2l0,164.8c0,47.5 38.7,86.2 86.2,86.2l164.8,0c47.5,0 86.2,-38.7 86.2,-86.2l0,-164.8c0,-47.5 -38.7,-86.2 -86.2,-86.2zm-9.9,241.1l-145,0l0,-145l145,0l0,145z&quot;</span> <span class="attr">Fill</span>=<span class="string">&quot;Black&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Viewbox</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="加载-DrawingImage"><a href="#加载-DrawingImage" class="headerlink" title="加载 DrawingImage"></a>加载 DrawingImage</h4><p>使用开源库 <a href="https://github.com/BerndK/SvgToXaml">SvgToXaml</a> 可以更方便的加载 SVG，转换为 DrawingImage 后放在 Imgae 控件中即可。<br><img src="https://raw.githubusercontent.com/BerndK/SvgToXaml/master/Doc/MainView.PNG"/></p>
<p><img src="https://raw.githubusercontent.com/BerndK/SvgToXaml/master/Doc/DetailViewXaml.PNG"/></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Image</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Image.Source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">DrawingImage</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DrawingImage.Drawing</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">DrawingGroup</span> <span class="attr">ClipGeometry</span>=<span class="string">&quot;M0,0 V1024 H1024 V0 H0 Z&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">DrawingGroup</span> <span class="attr">Opacity</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">GeometryDrawing</span> <span class="attr">Brush</span>=<span class="string">&quot;#FF000000&quot;</span> <span class="attr">Geometry</span>=<span class="string">&quot;F1 M1024,1024z M0,0z M382.2,165.7L217.4,165.7C169.9,165.7,131.2,204.4,131.2,251.9L131.2,416.7C131.2,464.2,169.9,502.9,217.4,502.9L382.2,502.9C429.7,502.9,468.4,464.2,468.4,416.7L468.4,251.9C468.5,204.3,429.8,165.7,382.2,165.7z M372.3,406.8L227.3,406.8 227.3,261.8 372.3,261.8 372.3,406.8z M382.2,557.6L217.4,557.6C169.9,557.6,131.2,596.3,131.2,643.8L131.2,808.6C131.2,856.1,169.9,894.8,217.4,894.8L382.2,894.8C429.7,894.8,468.4,856.1,468.4,808.6L468.4,643.8C468.5,596.3,429.8,557.6,382.2,557.6z M372.3,798.7L227.3,798.7 227.3,653.7 372.3,653.7 372.3,798.7z M871.6,273.3L755.1,156.8C738.8,140.5 717.2,131.5 694.1,131.5 671.1,131.5 649.4,140.5 633.1,156.8L516.6,273.3C483,306.9,483,361.6,516.6,395.2L633.2,511.7C649.5,528 671.1,537 694.2,537 717.2,537 738.9,528 755.2,511.7L871.8,395.1C905.2,361.7,905.2,307,871.6,273.3z M694.1,436.8L591.6,334.3 694.1,231.8 796.6,334.3 694.1,436.8z M776.5,557.6L611.7,557.6C564.2,557.6,525.5,596.3,525.5,643.8L525.5,808.6C525.5,856.1,564.2,894.8,611.7,894.8L776.5,894.8C824,894.8,862.7,856.1,862.7,808.6L862.7,643.8C862.7,596.3,824,557.6,776.5,557.6z M766.6,798.7L621.6,798.7 621.6,653.7 766.6,653.7 766.6,798.7z&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">DrawingGroup</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">DrawingGroup</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">DrawingImage.Drawing</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">DrawingImage</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Image.Source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Image</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>wpf</tag>
      </tags>
  </entry>
  <entry>
    <title>Visual Studio 远程调试</title>
    <url>/blog/2019/02/16/csharp-Msvsmon/</url>
    <content><![CDATA[<h3 id="在没有开发环境的电脑远程调试程序"><a href="#在没有开发环境的电脑远程调试程序" class="headerlink" title="在没有开发环境的电脑远程调试程序"></a>在没有开发环境的电脑远程调试程序</h3><span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在实际开发中，经常出现开发环境运行正常，生产环境报错的情况，但是由于异常捕获或是打印日志不能直接定位到问题，生产环境又不适宜安装庞大的开发环境，所以远程调试是不错的选择，以 <a href="https://visualstudio.microsoft.com/">Visual Studio 2019</a> 为例。</p>
<h3 id="调试方式"><a href="#调试方式" class="headerlink" title="调试方式"></a>调试方式</h3><ol>
<li>确保两台电脑在同一网络中。</li>
<li>拷贝远程调试工具 msvsmon 到生产环境，目录为：..\Microsoft Visual Studio\2019\Professional\Common7\IDE\Remote Debugger</li>
<li><p>以管理员方式运行 msvsmon.exe<br> <img src="https://sadness96.github.io/images/blog/csharp-Msvsmon/1.jpg"/></p>
</li>
<li><p>工具 -&gt; 选项 -&gt; 修改身份验证模式：如果环境安全的情况下可以设置为无身份验证，更方便连接。<br> <img src="https://sadness96.github.io/images/blog/csharp-Msvsmon/2.jpg"/><br> <img src="https://sadness96.github.io/images/blog/csharp-Msvsmon/3.jpg"/></p>
</li>
<li><p>在开发电脑中打开 Visual Studio 选择开发的项目，点击菜单中：调试 -&gt; 附加到进程，选择连接类型为远程，点击查找连接目标，搜索到开启局域网调试工具的电脑，附加到本机代码，在可用进程中搜索生产环境运行的主程序，点击附加。<br> <img src="https://sadness96.github.io/images/blog/csharp-Msvsmon/4.jpg"/><br> <img src="https://sadness96.github.io/images/blog/csharp-Msvsmon/5.jpg"/></p>
</li>
<li><p>生产环境中的 msvsmon 程序显示 xxx 已连接，即可远程调试。<br> <img src="https://sadness96.github.io/images/blog/csharp-Msvsmon/6.jpg"/></p>
</li>
</ol>
]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
      </tags>
  </entry>
  <entry>
    <title>电脑硬件信息帮助类</title>
    <url>/blog/2017/06/06/csharp-PCInformationHelper/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/csharp-DevFramework/%E6%B3%A8%E5%86%8C%E5%B7%A5%E5%85%B7.png"/></p>
<span id="more"></span>
<h3 id="获取电脑硬件基础信息，用于开发时作为唯一标示或注册激活使用"><a href="#获取电脑硬件基础信息，用于开发时作为唯一标示或注册激活使用" class="headerlink" title="获取电脑硬件基础信息，用于开发时作为唯一标示或注册激活使用"></a>获取电脑硬件基础信息，用于开发时作为唯一标示或注册激活使用</h3><h4 id="帮助类及说明"><a href="#帮助类及说明" class="headerlink" title="帮助类及说明"></a>帮助类及说明</h4><p><a href="https://github.com/Sadness96/Sadness/blob/master/Code/Helper/Utils.Helper/PCInformation/PCInformationHelper.cs">PCInformationHelper</a> 获取的信息有：网卡MAC地址、CPU-ID、硬盘序列号、内存序列号、主板序列号、BIOS序列号、显卡信息。可拼接加密生成唯一序列号，可用于软件激活使用或作为其他唯一标识。<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 读取网卡MAC地址</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回网卡MAC地址,失败返回NULL<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;<span class="built_in">string</span>&gt; <span class="title">MAC</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;<span class="built_in">string</span>&gt; listMAC = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        <span class="built_in">string</span> strMac = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        ManagementClass mc = <span class="keyword">new</span> ManagementClass(<span class="string">&quot;Win32_NetworkAdapterConfiguration&quot;</span>);</span><br><span class="line">        ManagementObjectCollection moc = mc.GetInstances();</span><br><span class="line">        <span class="keyword">foreach</span> (ManagementObject mo <span class="keyword">in</span> moc)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="built_in">bool</span>)mo[<span class="string">&quot;IPEnabled&quot;</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                strMac = mo[<span class="string">&quot;MacAddress&quot;</span>].ToString();</span><br><span class="line">                listMAC.Add(strMac);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> listMAC;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 读取CPU-ID</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回CPU-ID,失败返回NULL<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;<span class="built_in">string</span>&gt; <span class="title">CPU</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;<span class="built_in">string</span>&gt; listCPU = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        <span class="built_in">string</span> strMac = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        ManagementClass mc = <span class="keyword">new</span> ManagementClass(<span class="string">&quot;Win32_Processor&quot;</span>);</span><br><span class="line">        ManagementObjectCollection moc = mc.GetInstances();</span><br><span class="line">        <span class="keyword">foreach</span> (ManagementObject mo <span class="keyword">in</span> moc)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//Manufacturer = 处理器制造商</span></span><br><span class="line">            <span class="comment">//Name = 处理器名字</span></span><br><span class="line">            <span class="comment">//Processorid = CPU-ID</span></span><br><span class="line">            strMac = mo[<span class="string">&quot;Processorid&quot;</span>].ToString();</span><br><span class="line">            listCPU.Add(strMac);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> listCPU;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 读取硬盘序列号</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回硬盘序列号,失败返回NULL<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;<span class="built_in">string</span>&gt; <span class="title">DESK</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;<span class="built_in">string</span>&gt; listDESK = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        <span class="built_in">string</span> strMac = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        ManagementClass mc = <span class="keyword">new</span> ManagementClass(<span class="string">&quot;win32_DiskDrive&quot;</span>);</span><br><span class="line">        ManagementObjectCollection moc = mc.GetInstances();</span><br><span class="line">        <span class="keyword">foreach</span> (ManagementObject mo <span class="keyword">in</span> moc)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//Model = 硬盘信息</span></span><br><span class="line">            <span class="comment">//SerialNumber = 硬盘序列号</span></span><br><span class="line">            strMac = mo[<span class="string">&quot;SerialNumber&quot;</span>].ToString();</span><br><span class="line">            listDESK.Add(strMac);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> listDESK;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 读取内存序列号</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回内存序列号,失败返回NULL<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;<span class="built_in">string</span>&gt; <span class="title">Memory</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;<span class="built_in">string</span>&gt; listMemory = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        <span class="built_in">string</span> strMac = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        ManagementClass mc = <span class="keyword">new</span> ManagementClass(<span class="string">&quot;Win32_PhysicalMemory&quot;</span>);</span><br><span class="line">        ManagementObjectCollection moc = mc.GetInstances();</span><br><span class="line">        <span class="keyword">foreach</span> (ManagementObject mo <span class="keyword">in</span> moc)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//Manufacturer = 内存生产商</span></span><br><span class="line">            <span class="comment">//SerialNumber = 序列号</span></span><br><span class="line">            strMac = mo[<span class="string">&quot;SerialNumber&quot;</span>].ToString();</span><br><span class="line">            listMemory.Add(strMac);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> listMemory;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 读取主板序列号</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回主板序列号,失败返回NULL<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;<span class="built_in">string</span>&gt; <span class="title">Motherboard</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;<span class="built_in">string</span>&gt; listMotherboard = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        <span class="built_in">string</span> strMac = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        ManagementClass mc = <span class="keyword">new</span> ManagementClass(<span class="string">&quot;WIN32_BaseBoard&quot;</span>);</span><br><span class="line">        ManagementObjectCollection moc = mc.GetInstances();</span><br><span class="line">        <span class="keyword">foreach</span> (ManagementObject mo <span class="keyword">in</span> moc)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//Manufacturer = 主板制造商</span></span><br><span class="line">            <span class="comment">//Product = 主板型号</span></span><br><span class="line">            <span class="comment">//SerialNumber = 序列号</span></span><br><span class="line">            strMac = mo[<span class="string">&quot;SerialNumber&quot;</span>].ToString();</span><br><span class="line">            listMotherboard.Add(strMac);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> listMotherboard;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 读取BIOS序列号</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回BIOS序列号,失败返回NULL<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;<span class="built_in">string</span>&gt; <span class="title">BIOS</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;<span class="built_in">string</span>&gt; listBIOS = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        <span class="built_in">string</span> strMac = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        ManagementClass mc = <span class="keyword">new</span> ManagementClass(<span class="string">&quot;Win32_BIOS&quot;</span>);</span><br><span class="line">        ManagementObjectCollection moc = mc.GetInstances();</span><br><span class="line">        <span class="keyword">foreach</span> (ManagementObject mo <span class="keyword">in</span> moc)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//Manufacturer = BIOS制造商名称</span></span><br><span class="line">            <span class="comment">//SerialNumber = BIOS序列号</span></span><br><span class="line">            <span class="comment">//ReleaseDate = 出厂日期</span></span><br><span class="line">            <span class="comment">//Version = 版本号</span></span><br><span class="line">            strMac = mo[<span class="string">&quot;SerialNumber&quot;</span>].ToString();</span><br><span class="line">            listBIOS.Add(strMac);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> listBIOS;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 读取显卡信息</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回显卡信息,失败返回NULL<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;<span class="built_in">string</span>&gt; <span class="title">Video</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;<span class="built_in">string</span>&gt; listVideo = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        <span class="built_in">string</span> strMac = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        ManagementClass mc = <span class="keyword">new</span> ManagementClass(<span class="string">&quot;Win32_VideoController&quot;</span>);</span><br><span class="line">        ManagementObjectCollection moc = mc.GetInstances();</span><br><span class="line">        <span class="keyword">foreach</span> (ManagementObject mo <span class="keyword">in</span> moc)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//Name = 显卡信息</span></span><br><span class="line">            <span class="comment">//DriverVersion = 驱动程序版本</span></span><br><span class="line">            strMac = mo[<span class="string">&quot;Name&quot;</span>].ToString();</span><br><span class="line">            listVideo.Add(strMac);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> listVideo;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>helper</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>二维码帮助类</title>
    <url>/blog/2017/06/06/csharp-QRCodeHelper/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/csharp-DevFramework/%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81.png"/></p>
<span id="more"></span>
<h3 id="基于-ZXing-QrCode-库制作的横条码-二维码生成识别工具"><a href="#基于-ZXing-QrCode-库制作的横条码-二维码生成识别工具" class="headerlink" title="基于 ZXing.QrCode 库制作的横条码/二维码生成识别工具"></a>基于 ZXing.QrCode 库制作的横条码/二维码生成识别工具</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><a href="https://baike.baidu.com/item/%E4%BA%8C%E7%BB%B4%E7%A0%81">二维码（QR Code码）</a> 在现在生活中十分常见，扫一扫即可付款。原本想要学习一下二维码原理自己造轮子，后来还是决定站在巨人的肩膀上使用Google的开源库ZXing来生成和识别二维码/横条码。</p>
<h4 id="帮助类"><a href="#帮助类" class="headerlink" title="帮助类"></a>帮助类</h4><p><a href="https://github.com/Sadness96/Sadness/blob/master/Code/Helper/Utils.Helper/QRCode/QRCodeHelper.cs">QRCodeHelper</a> 帮助类提供二维码生成，带LOGO二维码，以及图像识别功能。<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 注销对象方法API</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">[<span class="meta">DllImport(<span class="meta-string">&quot;gdi32&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">int</span> <span class="title">DeleteObject</span>(<span class="params">IntPtr o</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 生成二维码</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strContent&quot;&gt;</span>二维码文本<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;iWidth&quot;&gt;</span>二维码宽度<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;iHeigth&quot;&gt;</span>二维码高度<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>二维码位图<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">GetQRCode</span>(<span class="params"><span class="built_in">string</span> strContent, <span class="built_in">int</span> iWidth, <span class="built_in">int</span> iHeigth</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//构造二维码写码器</span></span><br><span class="line">        MultiFormatWriter writer = <span class="keyword">new</span> MultiFormatWriter();</span><br><span class="line">        Dictionary&lt;EncodeHintType, <span class="built_in">object</span>&gt; hint = <span class="keyword">new</span> Dictionary&lt;EncodeHintType, <span class="built_in">object</span>&gt;();</span><br><span class="line">        hint.Add(EncodeHintType.CHARACTER_SET, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        hint.Add(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);</span><br><span class="line">        hint.Add(EncodeHintType.MARGIN, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//生成二维码 </span></span><br><span class="line">        BitMatrix bitMatrix = writer.encode(strContent, BarcodeFormat.QR_CODE, iWidth, iHeigth, hint);</span><br><span class="line">        BarcodeWriter barcodeWriter = <span class="keyword">new</span> BarcodeWriter();</span><br><span class="line">        Bitmap bitmapQRCode = barcodeWriter.Write(bitMatrix);</span><br><span class="line">        <span class="comment">//获取二维码实际尺寸(去掉二维码两边空白后的实际尺寸)</span></span><br><span class="line">        <span class="built_in">int</span>[] rectangle = bitMatrix.getEnclosingRectangle();</span><br><span class="line">        <span class="comment">//将img转换成bmp格式，否则后面无法创建Graphics对象</span></span><br><span class="line">        Bitmap bitmapQRCodeBMP = <span class="keyword">new</span> Bitmap(bitmapQRCode.Width, bitmapQRCode.Height, System.Drawing.Imaging.PixelFormat.Format32bppArgb);</span><br><span class="line">        <span class="keyword">using</span> (Graphics g = Graphics.FromImage(bitmapQRCodeBMP))</span><br><span class="line">        &#123;</span><br><span class="line">            g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;</span><br><span class="line">            g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;</span><br><span class="line">            g.CompositingQuality = System.Drawing.Drawing2D.CompositingQuality.HighQuality;</span><br><span class="line">            g.DrawImage(bitmapQRCode, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bitmapQRCodeBMP;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 生成二维码(带LOGO)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strContent&quot;&gt;</span>二维码文本<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;iWidth&quot;&gt;</span>二维码宽度<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;iHeigth&quot;&gt;</span>二维码高度<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strLogoPath&quot;&gt;</span>LOGO图片路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>二维码位图<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">GetQRCode_logo</span>(<span class="params"><span class="built_in">string</span> strContent, <span class="built_in">int</span> iWidth, <span class="built_in">int</span> iHeigth, <span class="built_in">string</span> strLogoPath</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//构造二维码写码器</span></span><br><span class="line">        MultiFormatWriter writer = <span class="keyword">new</span> MultiFormatWriter();</span><br><span class="line">        Dictionary&lt;EncodeHintType, <span class="built_in">object</span>&gt; hint = <span class="keyword">new</span> Dictionary&lt;EncodeHintType, <span class="built_in">object</span>&gt;();</span><br><span class="line">        hint.Add(EncodeHintType.CHARACTER_SET, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        hint.Add(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);</span><br><span class="line">        hint.Add(EncodeHintType.MARGIN, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//生成二维码 </span></span><br><span class="line">        BitMatrix bitMatrix = writer.encode(strContent, BarcodeFormat.QR_CODE, iWidth, iHeigth, hint);</span><br><span class="line">        BarcodeWriter barcodeWriter = <span class="keyword">new</span> BarcodeWriter();</span><br><span class="line">        Bitmap bitmapQRCode = barcodeWriter.Write(bitMatrix);</span><br><span class="line">        <span class="comment">//获取二维码实际尺寸(去掉二维码两边空白后的实际尺寸)</span></span><br><span class="line">        <span class="built_in">int</span>[] rectangle = bitMatrix.getEnclosingRectangle();</span><br><span class="line">        <span class="comment">//将img转换成bmp格式，否则后面无法创建Graphics对象</span></span><br><span class="line">        Bitmap bitmapQRCodeBMP = <span class="keyword">new</span> Bitmap(bitmapQRCode.Width, bitmapQRCode.Height, System.Drawing.Imaging.PixelFormat.Format32bppArgb);</span><br><span class="line">        <span class="keyword">using</span> (Graphics g = Graphics.FromImage(bitmapQRCodeBMP))</span><br><span class="line">        &#123;</span><br><span class="line">            g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;</span><br><span class="line">            g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;</span><br><span class="line">            g.CompositingQuality = System.Drawing.Drawing2D.CompositingQuality.HighQuality;</span><br><span class="line">            g.DrawImage(bitmapQRCode, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得LOGO位图并计算插入图片的大小和位置</span></span><br><span class="line">        Bitmap bitmapLogo = <span class="keyword">new</span> Bitmap(strLogoPath);</span><br><span class="line">        <span class="built_in">int</span> middleW = Math.Min((<span class="built_in">int</span>)(rectangle[<span class="number">2</span>] / <span class="number">3.5</span>), bitmapLogo.Width);</span><br><span class="line">        <span class="built_in">int</span> middleH = Math.Min((<span class="built_in">int</span>)(rectangle[<span class="number">3</span>] / <span class="number">3.5</span>), bitmapLogo.Height);</span><br><span class="line">        <span class="built_in">int</span> middleL = (bitmapQRCode.Width - middleW) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">int</span> middleT = (bitmapQRCode.Height - middleH) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//将二维码插入图片(白底)</span></span><br><span class="line">        Graphics myGraphic = Graphics.FromImage(bitmapQRCodeBMP);</span><br><span class="line">        myGraphic.DrawImage(bitmapLogo, middleL, middleT, middleW, middleH);</span><br><span class="line">        <span class="keyword">return</span> bitmapQRCodeBMP;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 从位图获取图像源</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;bitmapQRCode&quot;&gt;</span>位图二维码<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>图像源(用以显示在控件上)<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ImageSource <span class="title">GetImageSourceFromBitmap</span>(<span class="params">Bitmap bitmapQRCode</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        IntPtr ipQRCode = bitmapQRCode.GetHbitmap();</span><br><span class="line">        BitmapSource bitmapSource = System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap(ipQRCode, IntPtr.Zero, Int32Rect.Empty, System.Windows.Media.Imaging.BitmapSizeOptions.FromEmptyOptions());</span><br><span class="line">        DeleteObject(ipQRCode);</span><br><span class="line">        <span class="keyword">return</span> bitmapSource;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 识别二维码和条形码</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;bitmapQRCode&quot;&gt;</span>二维码和条形码位图<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回二维码和条形码内容,失败返回NULL或Empty<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">BarcodeReader</span>(<span class="params">Bitmap bitmapQRCode</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        BarcodeReader barcodeReader = <span class="keyword">new</span> BarcodeReader();</span><br><span class="line">        barcodeReader.Options.CharacterSet = <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line">        Result resultQRCode = barcodeReader.Decode(bitmapQRCode);</span><br><span class="line">        <span class="keyword">if</span> (resultQRCode == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> resultQRCode.Text;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 识别二维码和条形码</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strQRCodePath&quot;&gt;</span>二维码和条形码文件路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回二维码和条形码内容,失败返回NULL或Empty<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">BarcodeReader</span>(<span class="params"><span class="built_in">string</span> strQRCodePath</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        BarcodeReader barcodeReader = <span class="keyword">new</span> BarcodeReader();</span><br><span class="line">        barcodeReader.Options.CharacterSet = <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line">        Bitmap bitmapQRCode = <span class="keyword">new</span> Bitmap(strQRCodePath);</span><br><span class="line">        Result resultQRCode = barcodeReader.Decode(bitmapQRCode);</span><br><span class="line">        <span class="keyword">if</span> (resultQRCode == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> resultQRCode.Text;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 保存二维码和条形码位图到指定位置</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strSavePath&quot;&gt;</span>文件保存位置<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;bitmapQRCode&quot;&gt;</span>二维码和条形码位图<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">SaveBitmap</span>(<span class="params"><span class="built_in">string</span> strSavePath, Bitmap bitmapQRCode</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        ImageFormat imageFormat;</span><br><span class="line">        <span class="keyword">switch</span> (System.IO.Path.GetExtension(strSavePath))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;.bmp&quot;</span>: imageFormat = ImageFormat.Bmp; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;.emf&quot;</span>: imageFormat = ImageFormat.Emf; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;.exif&quot;</span>: imageFormat = ImageFormat.Exif; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;.gif&quot;</span>: imageFormat = ImageFormat.Gif; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;.icon&quot;</span>: imageFormat = ImageFormat.Icon; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;.jpeg&quot;</span>: imageFormat = ImageFormat.Jpeg; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;.jpg&quot;</span>: imageFormat = ImageFormat.Jpeg; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;.memorybmp&quot;</span>: imageFormat = ImageFormat.MemoryBmp; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;.png&quot;</span>: imageFormat = ImageFormat.Png; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;.tiff&quot;</span>: imageFormat = ImageFormat.Tiff; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;.wmf&quot;</span>: imageFormat = ImageFormat.Wmf; <span class="keyword">break</span>;</span><br><span class="line">            <span class="literal">default</span>: imageFormat = ImageFormat.Png; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        bitmapQRCode.Save(strSavePath, imageFormat);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>helper</tag>
        <tag>qrcode</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ Demo</title>
    <url>/blog/2018/07/07/csharp-RabbitMQ/</url>
    <content><![CDATA[<h3 id="RabbitMQ-消息队列使用介绍"><a href="#RabbitMQ-消息队列使用介绍" class="headerlink" title="RabbitMQ 消息队列使用介绍"></a>RabbitMQ 消息队列使用介绍</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><a href="https://www.rabbitmq.com/">RabbitMQ</a> 是实现了高级消息队列协议（AMQP）的开源消息代理软件（亦称面向消息的中间件）。RabbitMQ服务器是用Erlang语言编写的，而群集和故障转移是构建在开放电信平台框架上的。所有主要的编程语言均有与代理接口通讯的客户端库。具备异步、解耦等机制。<br>RabbitMQ在全球范围内在小型初创公司和大型企业中进行了超过35,000次RabbitMQ生产部署，是最受欢迎的开源消息代理。<br>RabbitMQ轻量级，易于在内部和云中部署。它支持多种消息传递协议。RabbitMQ可以部署在分布式和联合配置中，以满足高规模，高可用性要求。<br>RabbitMQ可在许多操作系统和云环境中运行，并为大多数流行语言提供各种开发人员工具。</p>
<h4 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h4><p>请参阅<a href="https://www.rabbitmq.com/download.html">官方文档</a></p>
<h5 id="Docker-部署"><a href="#Docker-部署" class="headerlink" title="Docker 部署"></a>Docker 部署</h5><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">安装官方镜像</span><br><span class="line">docker pull rabbitmq</span><br><span class="line">启动 RabbitMQ</span><br><span class="line">docker run -d --name myrabbitmq -p <span class="number">5672</span>:<span class="number">5672</span> -p <span class="number">15672</span>:<span class="number">15672</span> docker.io/rabbitmq:<span class="number">3</span>-management</span><br><span class="line">设置 RabbitMQ 默认账户密码为 guest/guest</span><br><span class="line">docker run -d --hostname my-rabbit --name some-rabbit -e RABBITMQ_DEFAULT_USER=user -e RABBITMQ_DEFAULT_PASS=password rabbitmq:<span class="number">3</span>-management</span><br><span class="line">WEB 端登录</span><br><span class="line"><span class="function">http://<span class="title">localhost</span>:15672/#/</span></span><br></pre></td></tr></table></figure>
<h4 id="C-代码调用"><a href="#C-代码调用" class="headerlink" title="C#代码调用"></a>C#代码调用</h4><p>引用 <a href="https://www.rabbitmq.com/dotnet.html">RabbitMQ.Client</a> 库</p>
<h5 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 生产者</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Send</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> factory = <span class="keyword">new</span> ConnectionFactory() &#123; HostName = <span class="string">&quot;localhost&quot;</span> &#125;;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> connection = factory.CreateConnection())</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> channel = connection.CreateModel())</span><br><span class="line">    &#123;</span><br><span class="line">        channel.QueueDeclare(queue: <span class="string">&quot;hello&quot;</span>, durable: <span class="literal">false</span>, exclusive: <span class="literal">false</span>, autoDelete: <span class="literal">false</span>, arguments: <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> message = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> body = Encoding.UTF8.GetBytes(message);</span><br><span class="line"></span><br><span class="line">        channel.BasicPublish(exchange: <span class="string">&quot;&quot;</span>, routingKey: <span class="string">&quot;hello&quot;</span>, basicProperties: <span class="literal">null</span>, body: body);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot; [x] Sent &#123;0&#125;&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">&quot; Press [enter] to exit.&quot;</span>);</span><br><span class="line">    Console.ReadLine();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 消费者</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Receive</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> factory = <span class="keyword">new</span> ConnectionFactory() &#123; HostName = <span class="string">&quot;localhost&quot;</span> &#125;;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> connection = factory.CreateConnection())</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> channel = connection.CreateModel())</span><br><span class="line">    &#123;</span><br><span class="line">        channel.QueueDeclare(queue: <span class="string">&quot;hello&quot;</span>, durable: <span class="literal">false</span>, exclusive: <span class="literal">false</span>, autoDelete: <span class="literal">false</span>, arguments: <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> consumer = <span class="keyword">new</span> EventingBasicConsumer(channel);</span><br><span class="line">        consumer.Received += (model, ea) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> body = ea.Body;</span><br><span class="line">            <span class="keyword">var</span> message = Encoding.UTF8.GetString(body);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot; [x] Received &#123;0&#125;&quot;</span>, message);</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.BasicConsume(queue: <span class="string">&quot;hello&quot;</span>, autoAck: <span class="literal">true</span>, consumer: consumer);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot; Press [enter] to exit.&quot;</span>);</span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>C# Reflection(反射)</title>
    <url>/blog/2016/12/10/csharp-Reflection/</url>
    <content><![CDATA[<h3 id="通过反射动态调用方法"><a href="#通过反射动态调用方法" class="headerlink" title="通过反射动态调用方法"></a>通过反射动态调用方法</h3><span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.reflection?view=netframework-4.5">System.Reflection</a> 命名空间包含通过检查托管代码中程序集、模块、成员、参数和其他实体的元数据来检索其相关信息的类型。 这些类型还可用于操作加载类型的实例，例如挂钩事件或调用方法。<br>↑上边是微软 <a href="https://docs.microsoft.com/zh-cn/">MSDN</a> 的介绍，balabala一大堆…，总之反射调用它就对了，通过类库类名以及方法名称调用方法。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="通过反射运行方法"><a href="#通过反射运行方法" class="headerlink" title="通过反射运行方法"></a>通过反射运行方法</h4><h5 id="调用方法代码"><a href="#调用方法代码" class="headerlink" title="调用方法代码"></a>调用方法代码</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 运行方法</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strLibraryName&quot;&gt;</span>库名<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strClassName&quot;&gt;</span>类名(带路径)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strMethodName&quot;&gt;</span>方法名<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;parameters&quot;&gt;</span>参数<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>返回结果<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">object</span> <span class="title">RunMethod</span>(<span class="params"><span class="built_in">string</span> strLibraryName, <span class="built_in">string</span> strClassName, <span class="built_in">string</span> strMethodName, <span class="built_in">object</span>[] parameters</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        Type type = Type.GetType(<span class="string">$&quot;<span class="subst">&#123;strLibraryName&#125;</span>.<span class="subst">&#123;strClassName&#125;</span>&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (type != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> vMethod = type.GetMethod(strMethodName);</span><br><span class="line">            <span class="keyword">if</span> (vMethod != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> vMethod.Invoke(Activator.CreateInstance(type), parameters);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="调用方法示例"><a href="#调用方法示例" class="headerlink" title="调用方法示例"></a>调用方法示例</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> parameters = <span class="keyword">new</span> <span class="built_in">object</span>[] &#123; item &#125;;</span><br><span class="line">RunMethod(<span class="string">&quot;ReflectionProject_Test&quot;</span>, <span class="string">&quot;ClassName&quot;</span>, <span class="string">&quot;MethodName&quot;</span>, parameters);</span><br></pre></td></tr></table></figure>
<h4 id="通过反射接口插件式开发"><a href="#通过反射接口插件式开发" class="headerlink" title="通过反射接口插件式开发"></a>通过反射接口插件式开发</h4><h5 id="定义接口"><a href="#定义接口" class="headerlink" title="定义接口"></a>定义接口</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 菜单插件接口</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">MenuPluginInterface</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 菜单单击事件</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Click</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 功能名称</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="built_in">string</span> strFunctionName &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 功能分组</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="built_in">string</span> strFunctionGroup &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="插件继承接口"><a href="#插件继承接口" class="headerlink" title="插件继承接口"></a>插件继承接口</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 功能按钮测试Command</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestCommand</span> : <span class="title">MenuPluginInterface</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Click Command</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Click</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// 打开插件功能</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 功能名称</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> strFunctionName</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="string">&quot;测试功能&quot;</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 功能分组</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> strFunctionGroup</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="string">&quot;测试分组&quot;</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="反射方法"><a href="#反射方法" class="headerlink" title="反射方法"></a>反射方法</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 运行插件窗体</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strDllPath&quot;&gt;</span>Dll路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strClassName&quot;&gt;</span>全类名<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">RunPluginClick</span>(<span class="params"><span class="built_in">string</span> strDllPath, <span class="built_in">string</span> strClassName</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//反射获得Class Type</span></span><br><span class="line">        Assembly assembly = Assembly.LoadFrom(strDllPath);</span><br><span class="line">        Type type = assembly.GetType(strClassName);</span><br><span class="line">        <span class="keyword">if</span> (type != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> container = <span class="keyword">new</span> UnityContainer();</span><br><span class="line">            container.RegisterType&lt;MenuPluginInterface&gt;(<span class="keyword">new</span> ContainerControlledLifetimeManager());</span><br><span class="line">            container.RegisterType(<span class="keyword">typeof</span>(MenuPluginInterface), type);</span><br><span class="line">            <span class="keyword">var</span> manager = container.Resolve&lt;MenuPluginInterface&gt;();</span><br><span class="line">            manager.Click();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="通过反射打开插件"><a href="#通过反射打开插件" class="headerlink" title="通过反射打开插件"></a>通过反射打开插件</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> strProjectDll = <span class="string">&quot;ReflectionProject_Test.dll&quot;</span>;</span><br><span class="line">RunPluginClick(strProjectDll, <span class="string">&quot;ReflectionProject_Test.TestCommand&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>reflection</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows屏幕截图帮助类</title>
    <url>/blog/2017/06/21/csharp-ScreenshotHelper/</url>
    <content><![CDATA[<h3 id="截取Windows屏幕全屏或指定区域帮助类"><a href="#截取Windows屏幕全屏或指定区域帮助类" class="headerlink" title="截取Windows屏幕全屏或指定区域帮助类"></a>截取Windows屏幕全屏或指定区域帮助类</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>平时习惯于用QQ截图，但是公司一台电脑没有外网链接，登录不了QQ截图就很麻烦，通常是按PrtSc键截取全屏幕，然后在粘贴在Windows自带的画图应用中截取区域。原本计划自己实现一个仿制QQ截图（画笔、框选、编辑文字、提取颜色）的功能，但是一直也没有付诸行动，但是需要用到的技术栈都已经整理。屏幕录像的原理也是按照固定的<a href="https://baike.baidu.com/item/%E5%B8%A7%E7%8E%87/1052590">FPS</a>写入视频流，但是实际测试截取速度比较慢，无法稳定在30FPS以上。</p>
<h4 id="帮助类"><a href="#帮助类" class="headerlink" title="帮助类"></a>帮助类</h4><p><a href="https://github.com/Sadness96/Sadness/blob/master/Code/Helper/Utils.Helper/Screenshot/ScreenshotHelper.cs">ScreenshotHelper</a><br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 全屏幕截图</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>截图Bitmap<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">ScreenshotFullScreen</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//得到屏幕整体宽度</span></span><br><span class="line">        <span class="built_in">double</span> dPrimaryScreenWidth = SystemParameters.PrimaryScreenWidth;</span><br><span class="line">        <span class="comment">//得到屏幕整体高度</span></span><br><span class="line">        <span class="built_in">double</span> dPrimaryScreenHeight = SystemParameters.PrimaryScreenHeight;</span><br><span class="line">        <span class="comment">//初始化使用指定的大小(屏幕大小)的 System.Drawing.Bitmap 类的新实例.</span></span><br><span class="line">        Bitmap bitmapScreenshot = <span class="keyword">new</span> Bitmap((<span class="built_in">int</span>)dPrimaryScreenWidth, (<span class="built_in">int</span>)dPrimaryScreenHeight);</span><br><span class="line">        <span class="comment">//从指定的载入原创建新的 System.Drawing.Graphics.</span></span><br><span class="line">        Graphics graphicsScreenshot = Graphics.FromImage(bitmapScreenshot);</span><br><span class="line">        <span class="comment">//获取或设置绘制到此 System.Drawing.Graphics 的渲染质量:高质量 低速度合成.</span></span><br><span class="line">        graphicsScreenshot.CompositingQuality = System.Drawing.Drawing2D.CompositingQuality.HighQuality;</span><br><span class="line">        <span class="comment">//截取电脑屏幕:从屏幕到 System.Drawing.Graphics 的绘图图面.</span></span><br><span class="line">        graphicsScreenshot.CopyFromScreen((<span class="built_in">int</span>)<span class="number">0</span>, (<span class="built_in">int</span>)<span class="number">0</span>, (<span class="built_in">int</span>)<span class="number">0</span>, (<span class="built_in">int</span>)<span class="number">0</span>, <span class="keyword">new</span> System.Drawing.Size((<span class="built_in">int</span>)dPrimaryScreenWidth, (<span class="built_in">int</span>)dPrimaryScreenHeight));</span><br><span class="line">        <span class="keyword">return</span> bitmapScreenshot;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 截取指定位置截图</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;iStartX&quot;&gt;</span>截取起始坐标X<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;iStartY&quot;&gt;</span>截取起始坐标Y<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;iInterceptWidth&quot;&gt;</span>截取宽度<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;iInterceptHeight&quot;&gt;</span>截取高度<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>截图Bitmap<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">ScreenshotsSpecifyLocation</span>(<span class="params"><span class="built_in">int</span> iStartX, <span class="built_in">int</span> iStartY, <span class="built_in">int</span> iInterceptWidth, <span class="built_in">int</span> iInterceptHeight</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//初始化使用指定的大小(屏幕大小)的 System.Drawing.Bitmap 类的新实例.</span></span><br><span class="line">        Bitmap bitmapScreenshot = <span class="keyword">new</span> Bitmap((<span class="built_in">int</span>)iInterceptWidth, (<span class="built_in">int</span>)iInterceptHeight);</span><br><span class="line">        <span class="comment">//从指定的载入原创建新的 System.Drawing.Graphics.</span></span><br><span class="line">        Graphics graphicsScreenshot = Graphics.FromImage(bitmapScreenshot);</span><br><span class="line">        <span class="comment">//获取或设置绘制到此 System.Drawing.Graphics 的渲染质量:高质量 低速度合成.</span></span><br><span class="line">        graphicsScreenshot.CompositingQuality = System.Drawing.Drawing2D.CompositingQuality.HighQuality;</span><br><span class="line">        <span class="comment">//截取电脑屏幕:从屏幕到 System.Drawing.Graphics 的绘图图面.</span></span><br><span class="line">        graphicsScreenshot.CopyFromScreen(iStartX, iStartY, (<span class="built_in">int</span>)<span class="number">0</span>, (<span class="built_in">int</span>)<span class="number">0</span>, <span class="keyword">new</span> System.Drawing.Size((<span class="built_in">int</span>)iInterceptWidth, (<span class="built_in">int</span>)iInterceptHeight));</span><br><span class="line">        <span class="keyword">return</span> bitmapScreenshot;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>helper</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>WPF SetBinding</title>
    <url>/blog/2022/02/21/csharp-SetBinding/</url>
    <content><![CDATA[<h3 id="WPF-通过后台绑定数据"><a href="#WPF-通过后台绑定数据" class="headerlink" title="WPF 通过后台绑定数据"></a>WPF 通过后台绑定数据</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>WPF 中的 <a href="https://docs.microsoft.com/en-us/dotnet/desktop/wpf/data/?view=netdesktop-6.0">Data binding</a> 为应用程序呈现数据和与数据交互提供了一种简单且一致的方式。元素可以以 .NET 对象和 XML 的形式绑定到来自不同类型数据源的数据。<br>但是有些特殊情况下只能通过后台 <a href="https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.setbinding?view=windowsdesktop-6.0">FrameworkElement.SetBinding</a> 绑定数据。</p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>示例为项目需要迁移到 .Net Framework 4.5.2 的 <a href="https://github.com/unosquare/ffmediaelement">FFME</a> 库。<br><img src="https://sadness96.github.io/images/blog/csharp-SetBinding/HttpVideo.jpg"/></p>
<h4 id="SetBinding-介绍"><a href="#SetBinding-介绍" class="headerlink" title="SetBinding 介绍"></a>SetBinding 介绍</h4><p>第一个参数为用户控件的 <a href="https://docs.microsoft.com/zh-cn/dotnet/desktop/wpf/properties/dependency-properties-overview?view=netdesktop-6.0">依赖属性</a>。<br>第二个参数为 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.data.binding?view=netframework-4.5.2">Binding</a> 类，同时可以设置要使用的转换器。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">System.Windows</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// 摘要:</span></span><br><span class="line">    <span class="comment">//     为 Windows Presentation Foundation (WPF) 元素提供一套 WPF 框架级别的属性、事件和方法。 此类表示所提供的 WPF</span></span><br><span class="line">    <span class="comment">//     框架级别实现基于 System.Windows.UIElement 定义的 WPF 核心级别 APIs。</span></span><br><span class="line">    [<span class="meta">RuntimeNameProperty(<span class="meta-string">&quot;Name&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">StyleTypedProperty(Property = <span class="meta-string">&quot;FocusVisualStyle&quot;</span>, StyleTargetType = typeof(Control))</span>]</span><br><span class="line">    [<span class="meta">UsableDuringInitialization(true)</span>]</span><br><span class="line">    [<span class="meta">XmlLangProperty(<span class="meta-string">&quot;Language&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FrameworkElement</span> : <span class="title">UIElement</span>, <span class="title">IFrameworkInputElement</span>, <span class="title">IInputElement</span>, <span class="title">ISupportInitialize</span>, <span class="title">IHaveResources</span>, <span class="title">IQueryAmbient</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// 摘要:</span></span><br><span class="line">        <span class="comment">//     基于已提供的绑定对象将一个绑定附加到此元素上。</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// 参数:</span></span><br><span class="line">        <span class="comment">//   dp:</span></span><br><span class="line">        <span class="comment">//     标识应在其中建立绑定的属性。</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//   binding:</span></span><br><span class="line">        <span class="comment">//     表示数据绑定的详细信息。</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// 返回结果:</span></span><br><span class="line">        <span class="comment">//     记录绑定的条件。 此返回值可用于错误检查。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> BindingExpressionBase <span class="title">SetBinding</span>(<span class="params">DependencyProperty dp, BindingBase binding</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="公共-IValueConverter-方法"><a href="#公共-IValueConverter-方法" class="headerlink" title="公共 IValueConverter 方法"></a>公共 IValueConverter 方法</h4><p>用于提供将自定义逻辑应用于绑定的方法。<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">TimeSpanToSecondsConverter</span> : <span class="title">IValueConverter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;inheritdoc /&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">Convert</span>(<span class="params"><span class="built_in">object</span> <span class="keyword">value</span>, Type targetType, <span class="built_in">object</span> parameter, CultureInfo culture</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="keyword">value</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> TimeSpan span:</span><br><span class="line">                <span class="keyword">return</span> span.TotalSeconds;</span><br><span class="line">            <span class="keyword">case</span> Duration duration:</span><br><span class="line">                <span class="keyword">return</span> duration.HasTimeSpan ? duration.TimeSpan.TotalSeconds : <span class="number">0</span>d;</span><br><span class="line">            <span class="literal">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>d;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;inheritdoc /&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">ConvertBack</span>(<span class="params"><span class="built_in">object</span> <span class="keyword">value</span>, Type targetType, <span class="built_in">object</span> parameter, CultureInfo culture</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">value</span> <span class="keyword">is</span> <span class="built_in">double</span> == <span class="literal">false</span>) <span class="keyword">return</span> <span class="number">0</span>d;</span><br><span class="line">        <span class="keyword">var</span> result = TimeSpan.FromTicks(System.Convert.ToInt64(TimeSpan.TicksPerSecond * (<span class="built_in">double</span>)<span class="keyword">value</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do the conversion from visibility to bool</span></span><br><span class="line">        <span class="keyword">if</span> (targetType == <span class="keyword">typeof</span>(TimeSpan)) <span class="keyword">return</span> result;</span><br><span class="line">        <span class="keyword">return</span> targetType == <span class="keyword">typeof</span>(Duration) ?</span><br><span class="line">            <span class="keyword">new</span> Duration(result) : Activator.CreateInstance(targetType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="前台绑定-Binding"><a href="#前台绑定-Binding" class="headerlink" title="前台绑定 Binding"></a>前台绑定 Binding</h4><p>App.xaml<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ResourceDictionary</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">local:TimeSpanToSecondsConverter</span> <span class="attr">x:Key</span>=<span class="string">&quot;TimeSpanToSecondsConverter&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ResourceDictionary</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>UserControl.xaml<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Slider</span> <span class="attr">Name</span>=<span class="string">&quot;PositionSlider&quot;</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;0&quot;</span> <span class="attr">Margin</span>=<span class="string">&quot;10,0&quot;</span> <span class="attr">Cursor</span>=<span class="string">&quot;Hand&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">IsSnapToTickEnabled</span>=<span class="string">&quot;False&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">IsEnabled</span>=<span class="string">&quot;&#123;Binding MediaElement.IsOpen&#125;&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">SmallChange</span>=<span class="string">&quot;&#123;Binding MediaElement.PositionStep, Converter=&#123;StaticResource TimeSpanToSecondsConverter&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">LargeChange</span>=<span class="string">&quot;&#123;Binding MediaElement.PositionStep, Converter=&#123;StaticResource TimeSpanToSecondsConverter&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Minimum</span>=<span class="string">&quot;&#123;Binding MediaElement.PlaybackStartTime, Converter=&#123;StaticResource TimeSpanToSecondsConverter&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">Maximum</span>=<span class="string">&quot;&#123;Binding MediaElement.PlaybackEndTime, Converter=&#123;StaticResource TimeSpanToSecondsConverter&#125;&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">Value</span>=<span class="string">&quot;&#123;Binding MediaElement.Position, Converter=&#123;StaticResource TimeSpanToSecondsConverter&#125;&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>UserControlViewModel.cs<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> MediaElement m_MediaElement;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Gets the media element hosted by the main window.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> MediaElement MediaElement</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (m_MediaElement == <span class="literal">null</span>)</span><br><span class="line">            m_MediaElement = (Application.Current.MainWindow <span class="keyword">as</span> MainWindow)?.Media;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> m_MediaElement;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="后台绑定-SetBinding"><a href="#后台绑定-SetBinding" class="headerlink" title="后台绑定 SetBinding"></a>后台绑定 SetBinding</h4><p>UserControl.xaml<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Slider</span> <span class="attr">Name</span>=<span class="string">&quot;PositionSlider&quot;</span> <span class="attr">Grid.Row</span>=<span class="string">&quot;0&quot;</span> <span class="attr">Margin</span>=<span class="string">&quot;10,0&quot;</span> <span class="attr">Cursor</span>=<span class="string">&quot;Hand&quot;</span> <span class="attr">IsSnapToTickEnabled</span>=<span class="string">&quot;False&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>UserControl.xaml.cs<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">PositionSlider.SetBinding(Slider.IsEnabledProperty, <span class="keyword">new</span> Binding(<span class="string">&quot;IsOpen&quot;</span>) &#123; Source = <span class="keyword">this</span>._innerPlayer &#125;);</span><br><span class="line"></span><br><span class="line">IValueConverter valueConverter = <span class="keyword">new</span> TimeSpanToSecondsConverter();</span><br><span class="line">PositionSlider.SetBinding(Slider.SmallChangeProperty, <span class="keyword">new</span> Binding(<span class="string">&quot;PositionStep&quot;</span>) &#123; Source = <span class="keyword">this</span>._innerPlayer, Converter = valueConverter &#125;);</span><br><span class="line">PositionSlider.SetBinding(Slider.LargeChangeProperty, <span class="keyword">new</span> Binding(<span class="string">&quot;PositionStep&quot;</span>) &#123; Source = <span class="keyword">this</span>._innerPlayer, Converter = valueConverter &#125;);</span><br><span class="line">PositionSlider.SetBinding(Slider.MinimumProperty, <span class="keyword">new</span> Binding(<span class="string">&quot;PlaybackStartTime&quot;</span>) &#123; Source = <span class="keyword">this</span>._innerPlayer, Converter = valueConverter &#125;);</span><br><span class="line">PositionSlider.SetBinding(Slider.MaximumProperty, <span class="keyword">new</span> Binding(<span class="string">&quot;PlaybackEndTime&quot;</span>) &#123; Source = <span class="keyword">this</span>._innerPlayer, Converter = valueConverter &#125;);</span><br><span class="line">PositionSlider.SetBinding(Slider.ValueProperty, <span class="keyword">new</span> Binding(<span class="string">&quot;Position&quot;</span>) &#123; Source = <span class="keyword">this</span>._innerPlayer, Converter = valueConverter &#125;);</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>wpf</tag>
        <tag>setbinding</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows关机帮助类</title>
    <url>/blog/2017/06/06/csharp-ShutdownHelper/</url>
    <content><![CDATA[<p><img src="http://www.bkill.com/u/upload/2017/08/17/172215508193.jpg"/></p>
<span id="more"></span>
<h3 id="有效的关闭-Windows-计算机帮助类"><a href="#有效的关闭-Windows-计算机帮助类" class="headerlink" title="有效的关闭 Windows 计算机帮助类"></a>有效的关闭 Windows 计算机帮助类</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>起初在刚接触C#时制作 <a href="/blog/2016/05/31/csharp-DesktopLock/">Desktop Lock</a> 时有设置自动关机的功能，使用的是执行 <a href="https://baike.baidu.com/item/%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E7%AC%A6/998728?fromtitle=CMD&amp;fromid=1193011&amp;fr=aladdin">CMD</a> 的 <a href="https://baike.baidu.com/item/shutdown">shutdown</a> 命令，但是极容易出现被杀毒软件误报毒或误被取消关机。然后又通过调用 <a href="https://baike.baidu.com/item/Win32%20API">Win32 API</a> 的方式关闭计算机。</p>
<h4 id="帮助类"><a href="#帮助类" class="headerlink" title="帮助类"></a>帮助类</h4><p><a href="https://github.com/Sadness96/Sadness/blob/master/Code/Helper/Utils.Helper/Shutdown/ShutdownHelper.cs">ShutdownHelper</a></p>
<h5 id="CMD-Shutdown"><a href="#CMD-Shutdown" class="headerlink" title="CMD Shutdown"></a>CMD Shutdown</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Process myProcess = <span class="keyword">new</span> Process();</span><br><span class="line">    myProcess.StartInfo.FileName = <span class="string">&quot;cmd.exe&quot;</span>;</span><br><span class="line">    myProcess.StartInfo.UseShellExecute = <span class="literal">false</span>;</span><br><span class="line">    myProcess.StartInfo.RedirectStandardInput = <span class="literal">true</span>;</span><br><span class="line">    myProcess.StartInfo.RedirectStandardOutput = <span class="literal">true</span>;</span><br><span class="line">    myProcess.StartInfo.RedirectStandardError = <span class="literal">true</span>;</span><br><span class="line">    myProcess.StartInfo.CreateNoWindow = <span class="literal">true</span>;</span><br><span class="line">    myProcess.Start();</span><br><span class="line">    myProcess.StandardInput.WriteLine(<span class="string">&quot;shutdown -s -f -t 0&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Win32-API"><a href="#Win32-API" class="headerlink" title="Win32 API"></a>Win32 API</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">StructLayout(LayoutKind.Sequential, Pack = 1)</span>]</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">struct</span> TokPriv1Luid</span><br><span class="line">&#123; <span class="keyword">public</span> <span class="built_in">int</span> Count; <span class="keyword">public</span> <span class="built_in">long</span> Luid; <span class="keyword">public</span> <span class="built_in">int</span> Attr;&#125;</span><br><span class="line">[<span class="meta">DllImport(<span class="meta-string">&quot;kernel32.dll&quot;</span>, ExactSpelling = true)</span>]</span><br><span class="line"><span class="function"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">GetCurrentProcess</span>(<span class="params"></span>)</span>;</span><br><span class="line">[<span class="meta">DllImport(<span class="meta-string">&quot;advapi32.dll&quot;</span>, ExactSpelling = true, SetLastError = true)</span>]</span><br><span class="line"><span class="function"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">bool</span> <span class="title">OpenProcessToken</span>(<span class="params">IntPtr h, <span class="built_in">int</span> acc, <span class="keyword">ref</span> IntPtr phtok</span>)</span>;</span><br><span class="line">[<span class="meta">DllImport(<span class="meta-string">&quot;advapi32.dll&quot;</span>, SetLastError = true)</span>]</span><br><span class="line"><span class="function"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">bool</span> <span class="title">LookupPrivilegeValue</span>(<span class="params"><span class="built_in">string</span> host, <span class="built_in">string</span> name, <span class="keyword">ref</span> <span class="built_in">long</span> pluid</span>)</span>;</span><br><span class="line">[<span class="meta">DllImport(<span class="meta-string">&quot;advapi32.dll&quot;</span>, ExactSpelling = true, SetLastError = true)</span>]</span><br><span class="line"><span class="function"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">bool</span> <span class="title">AdjustTokenPrivileges</span>(<span class="params">IntPtr htok, <span class="built_in">bool</span> disall, <span class="keyword">ref</span> TokPriv1Luid newst, <span class="built_in">int</span> len, IntPtr prev, IntPtr relen</span>)</span>;</span><br><span class="line">[<span class="meta">DllImport(<span class="meta-string">&quot;user32.dll&quot;</span>, ExactSpelling = true, SetLastError = true)</span>]</span><br><span class="line"><span class="function"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">bool</span> <span class="title">ExitWindowsEx</span>(<span class="params"><span class="built_in">int</span> flg, <span class="built_in">int</span> rea</span>)</span>;</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">const</span> <span class="built_in">int</span> SE_PRIVILEGE_ENABLED = <span class="number">0x00000002</span>;</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">const</span> <span class="built_in">int</span> TOKEN_QUERY = <span class="number">0x00000008</span>;</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">const</span> <span class="built_in">int</span> TOKEN_ADJUST_PRIVILEGES = <span class="number">0x00000020</span>;</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">const</span> <span class="built_in">string</span> SE_SHUTDOWN_NAME = <span class="string">&quot;SeShutdownPrivilege&quot;</span>;</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">const</span> <span class="built_in">int</span> EWX_LOGOFF = <span class="number">0x00000000</span>;</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">const</span> <span class="built_in">int</span> EWX_SHUTDOWN = <span class="number">0x00000001</span>;</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">const</span> <span class="built_in">int</span> EWX_REBOOT = <span class="number">0x00000002</span>;</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">const</span> <span class="built_in">int</span> EWX_FORCE = <span class="number">0x00000004</span>;</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">const</span> <span class="built_in">int</span> EWX_POWEROFF = <span class="number">0x00000008</span>;</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">const</span> <span class="built_in">int</span> EWX_FORCEIFHUNG = <span class="number">0x00000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 关闭Windows</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;flg&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DoExitWin</span>(<span class="params"><span class="built_in">int</span> flg</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">bool</span> ok;</span><br><span class="line">    TokPriv1Luid tp;</span><br><span class="line">    IntPtr hproc = GetCurrentProcess();</span><br><span class="line">    IntPtr htok = IntPtr.Zero;</span><br><span class="line">    ok = OpenProcessToken(hproc, TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, <span class="keyword">ref</span> htok);</span><br><span class="line">    tp.Count = <span class="number">1</span>; tp.Luid = <span class="number">0</span>; tp.Attr = SE_PRIVILEGE_ENABLED;</span><br><span class="line">    ok = LookupPrivilegeValue(<span class="literal">null</span>, SE_SHUTDOWN_NAME, <span class="keyword">ref</span> tp.Luid);</span><br><span class="line">    ok = AdjustTokenPrivileges(htok, <span class="literal">false</span>, <span class="keyword">ref</span> tp, <span class="number">0</span>, IntPtr.Zero, IntPtr.Zero);</span><br><span class="line">    ok = ExitWindowsEx(flg, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 关闭计算机</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Shutdown</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        DoExitWin(EWX_SHUTDOWN);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 注销计算机</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Logoff</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        DoExitWin(EWX_LOGOFF);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 重启计算机</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Reboot</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        DoExitWin(EWX_REBOOT);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>helper</tag>
        <tag>windows</tag>
        <tag>shutdown</tag>
      </tags>
  </entry>
  <entry>
    <title>获取系统状态信息</title>
    <url>/blog/2018/06/18/csharp-SystemState/</url>
    <content><![CDATA[<h3 id="显示-CPU-与-ARM-占用率"><a href="#显示-CPU-与-ARM-占用率" class="headerlink" title="显示 CPU 与 ARM 占用率"></a>显示 CPU 与 ARM 占用率</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>在一些占用系统资源较大的软件上可以增加 CPU 与 ARM 的占用率，用于美化界面的同时可以实时监视系统占用状况。<br>依赖于 <a href="https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.performancecounter?view=dotnet-plat-ext-6.0">PerformanceCounter</a> 方法查询系统性能计数器，获取 CPU 与 ARM 基础信息，通过计算后获取占用率信息。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 系统使用率统计</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SystemStateHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取全局占用率</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SystemStateHelper</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Task.Run(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            PerformanceCounter CpuCounter = <span class="keyword">new</span> PerformanceCounter(<span class="string">&quot;Processor Information&quot;</span>, <span class="string">&quot;% Processor Utility&quot;</span>, <span class="string">&quot;_Total&quot;</span>);</span><br><span class="line">            PerformanceCounter RamCounter = <span class="keyword">new</span> PerformanceCounter(<span class="string">&quot;Memory&quot;</span>, <span class="string">&quot;Available MBytes&quot;</span>);</span><br><span class="line">            <span class="built_in">double</span> TotalMemoryMBytesCapacity = GetTotalMemoryMBytesCapacity();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> cpuUsage = CpuCounter.NextValue();</span><br><span class="line">                cpuUsage = cpuUsage &gt;= <span class="number">100</span> ? <span class="number">100</span> : cpuUsage;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> ramAvailable = RamCounter.NextValue();</span><br><span class="line">                <span class="keyword">var</span> memUsage = Math.Round((TotalMemoryMBytesCapacity - ramAvailable) / TotalMemoryMBytesCapacity, <span class="number">4</span>) * <span class="number">100</span>;</span><br><span class="line">                memUsage = memUsage &gt;= <span class="number">100</span> ? <span class="number">100</span> : memUsage;</span><br><span class="line"></span><br><span class="line">                CpuCounterChange?.Invoke(cpuUsage);</span><br><span class="line">                RamCounterChange?.Invoke(memUsage);</span><br><span class="line">                Thread.Sleep(<span class="number">500</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取指定 pid 进程占用率</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;pid&quot;&gt;</span>pid<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SystemStateHelper</span>(<span class="params"><span class="built_in">int</span> pid</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Task.Run(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="built_in">float</span> mega = <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line">            <span class="keyword">var</span> vInstanceName = GetProcessInstanceName(pid);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(vInstanceName))</span><br><span class="line">            &#123;</span><br><span class="line">                PerformanceCounter cpuPerformanceCounter = <span class="keyword">new</span> PerformanceCounter(<span class="string">&quot;Process&quot;</span>, <span class="string">&quot;% Processor Time&quot;</span>, vInstanceName);</span><br><span class="line">                PerformanceCounter memoryPerformanceCounter = <span class="keyword">new</span> PerformanceCounter(<span class="string">&quot;Process&quot;</span>, <span class="string">&quot;Working Set - Private&quot;</span>, vInstanceName);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">try</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">float</span> mainCpu = cpuPerformanceCounter.NextValue() / Environment.ProcessorCount;</span><br><span class="line">                        mainCpu = mainCpu &gt;= <span class="number">100</span> ? <span class="number">100</span> : mainCpu;</span><br><span class="line"></span><br><span class="line">                        <span class="built_in">float</span> mainRam = memoryPerformanceCounter.NextValue() / mega;</span><br><span class="line"></span><br><span class="line">                        CpuCounterChange.Invoke(mainCpu);</span><br><span class="line">                        RamCounterChange.Invoke(mainRam);</span><br><span class="line">                    &#125;</span><br><span class="line">                    catch (Exception)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// pid 查询不到进程</span></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    Thread.Sleep(<span class="number">500</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> CPU 使用率</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;<span class="built_in">double</span>&gt; CpuCounterChange;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 内存使用率</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;<span class="built_in">double</span>&gt; RamCounterChange;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取总内存字节容量</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">double</span> <span class="title">GetTotalMemoryMBytesCapacity</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> mc = <span class="keyword">new</span> ManagementClass(<span class="string">&quot;Win32_PhysicalMemory&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> moc = mc.GetInstances())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">double</span> totalCapacity = <span class="number">0</span>d;</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">var</span> mo <span class="keyword">in</span> moc)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> moCapacity = <span class="built_in">long</span>.Parse(mo.Properties[<span class="string">&quot;Capacity&quot;</span>].Value.ToString());</span><br><span class="line">                    totalCapacity += Math.Round(moCapacity / <span class="number">1024.0</span> / <span class="number">1024</span>, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> totalCapacity;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取进程实例名称</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;pid&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">GetProcessInstanceName</span>(<span class="params"><span class="built_in">int</span> pid</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        PerformanceCounterCategory processCategory = <span class="keyword">new</span> PerformanceCounterCategory(<span class="string">&quot;Process&quot;</span>);</span><br><span class="line">        <span class="built_in">string</span>[] runnedInstances = processCategory.GetInstanceNames();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">string</span> runnedInstance <span class="keyword">in</span> runnedInstances)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (PerformanceCounter performanceCounter = <span class="keyword">new</span> PerformanceCounter(<span class="string">&quot;Process&quot;</span>, <span class="string">&quot;ID Process&quot;</span>, runnedInstance, <span class="literal">true</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((<span class="built_in">int</span>)performanceCounter?.RawValue == pid)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">return</span> runnedInstance;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                catch (Exception)</span><br><span class="line">                &#123; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="调用说明"><a href="#调用说明" class="headerlink" title="调用说明"></a>调用说明</h4><ul>
<li>调用 SystemStateHelper() 获取全局占用率，返回结果为 CPU 与 ARM 占用率百分比，两位小数。</li>
<li>调用 SystemStateHelper(int pid) 获取指定 pid 进程占用率，返回结果为 CPU 占用率百分比，两位小数，ARM 占用字节，单位 MB。</li>
<li>通过 PerformanceCounter 方法查询占用率仅支持通过名字查询，但是运行多个相同名字的进程，会隐性增加命名后缀例如 #1、#2、#3，所以调用 GetProcessInstanceName(pid) 方法可以获取 pid 对应精确名称。</li>
<li>通过 pid 查询占用率时仅会查询自身进程的占用率，但是通常一个大型系统运行起来会调用多个不同进程组件，会存在与任务管理器显示不一致，可以先查询 pid 关联所有子线程，查询到占用率后叠加显示。  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获取指定 pid 关联子进程信息</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Dictionary&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; <span class="title">GetAllProcess</span>(<span class="params"><span class="built_in">int</span> pid</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Dictionary&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; dicAllProcess = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt;();</span><br><span class="line">    ManagementObjectSearcher searcher = <span class="keyword">new</span> ManagementObjectSearcher(<span class="string">$&quot;Select * From Win32_Process Where ParentProcessID=<span class="subst">&#123;pid&#125;</span>&quot;</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (ManagementObject mo <span class="keyword">in</span> searcher.Get())</span><br><span class="line">    &#123;</span><br><span class="line">        dicAllProcess.Add(<span class="built_in">int</span>.Parse(<span class="string">$&quot;<span class="subst">&#123;mo[<span class="string">&quot;ProcessID&quot;</span>]&#125;</span>&quot;</span>), <span class="string">$&quot;<span class="subst">&#123;mo[<span class="string">&quot;Name&quot;</span>]&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dicAllProcess;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>helper</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows任务计划帮助类</title>
    <url>/blog/2017/09/18/csharp-TaskschdHelper/</url>
    <content><![CDATA[<h3 id="基于-TaskScheduler-库操作Windows任务计划帮助类"><a href="#基于-TaskScheduler-库操作Windows任务计划帮助类" class="headerlink" title="基于 TaskScheduler 库操作Windows任务计划帮助类"></a>基于 TaskScheduler 库操作Windows任务计划帮助类</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><a href="https://baike.baidu.com/item/%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92/4632223">任务计划</a> 可以将任何脚本、程序或文档安排在某个最方便的时间运行。常见于系统开机自启动程序，或定期运行自动更新程序或守护程序。</p>
<h4 id="帮助类"><a href="#帮助类" class="headerlink" title="帮助类"></a>帮助类</h4><p><a href="https://github.com/Sadness96/Sadness/blob/master/Code/Helper/Utils.Helper/Taskschd/TaskschdHelper.cs">TaskschdHelper</a><br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 创建任务计划</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strCreator&quot;&gt;</span>作者<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strTaskName&quot;&gt;</span>任务名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strPath&quot;&gt;</span>任务计划路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strInterval&quot;&gt;</span>任务触发时间(PT1M:1分钟,PT1H30M:90分钟)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strStartBoundary&quot;&gt;</span>任务开始时间(yyyy-MM-ddTHH:mm:ss)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strDescription&quot;&gt;</span>任务描述<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>任务状态<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">CreateTaskschd</span>(<span class="params"><span class="built_in">string</span> strCreator, <span class="built_in">string</span> strTaskName, <span class="built_in">string</span> strPath, <span class="built_in">string</span> strInterval, <span class="built_in">string</span> strStartBoundary, <span class="built_in">string</span> strDescription</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (IsExists(strTaskName))</span><br><span class="line">        &#123;</span><br><span class="line">            DeleteTaskschd(strTaskName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//new scheduler</span></span><br><span class="line">        TaskSchedulerClass scheduler = <span class="keyword">new</span> TaskSchedulerClass();</span><br><span class="line">        <span class="comment">//pc-name/ip,username,domain,password</span></span><br><span class="line">        scheduler.Connect(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//get scheduler folder</span></span><br><span class="line">        ITaskFolder folder = scheduler.GetFolder(<span class="string">&quot;\\&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//set base attr </span></span><br><span class="line">        ITaskDefinition task = scheduler.NewTask(<span class="number">0</span>);</span><br><span class="line">        task.RegistrationInfo.Author = strCreator;<span class="comment">//creator</span></span><br><span class="line">        task.RegistrationInfo.Description = strDescription;<span class="comment">//description</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//set trigger  (IDailyTrigger ITimeTrigger)</span></span><br><span class="line">        ITimeTrigger tt = (ITimeTrigger)task.Triggers.Create(_TASK_TRIGGER_TYPE2.TASK_TRIGGER_TIME);</span><br><span class="line">        tt.Repetition.Interval = strInterval;<span class="comment">// format PT1H1M==1小时1分钟 设置的值最终都会转成分钟加入到触发器</span></span><br><span class="line">        tt.StartBoundary = strStartBoundary;<span class="comment">//start time</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//set action</span></span><br><span class="line">        IExecAction action = (IExecAction)task.Actions.Create(_TASK_ACTION_TYPE.TASK_ACTION_EXEC);</span><br><span class="line">        action.Path = strPath;<span class="comment">//计划任务调用的程序路径</span></span><br><span class="line"></span><br><span class="line">        task.Settings.ExecutionTimeLimit = <span class="string">&quot;PT0S&quot;</span>; <span class="comment">//运行任务时间超时停止任务吗? PTOS 不开启超时</span></span><br><span class="line">        task.Settings.DisallowStartIfOnBatteries = <span class="literal">false</span>;<span class="comment">//只有在交流电源下才执行</span></span><br><span class="line">        task.Settings.RunOnlyIfIdle = <span class="literal">false</span>;<span class="comment">//仅当计算机空闲下才执行</span></span><br><span class="line"></span><br><span class="line">        IRegisteredTask regTask = folder.RegisterTaskDefinition(strTaskName, task,</span><br><span class="line">                                                            (<span class="built_in">int</span>)_TASK_CREATION.TASK_CREATE, <span class="literal">null</span>, <span class="comment">//user</span></span><br><span class="line">                                                            <span class="literal">null</span>, <span class="comment">//password</span></span><br><span class="line">                                                            _TASK_LOGON_TYPE.TASK_LOGON_INTERACTIVE_TOKEN,</span><br><span class="line">                                                            <span class="string">&quot;&quot;</span>);</span><br><span class="line">        IRunningTask runTask = regTask.Run(<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//return runTask.State;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="comment">//return _TASK_STATE.TASK_STATE_UNKNOWN;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 删除任务计划</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strTaskName&quot;&gt;</span>任务计划名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">DeleteTaskschd</span>(<span class="params"><span class="built_in">string</span> strTaskName</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        TaskSchedulerClass taskScheduler = <span class="keyword">new</span> TaskSchedulerClass();</span><br><span class="line">        taskScheduler.Connect(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        ITaskFolder taskFolder = taskScheduler.GetFolder(<span class="string">&quot;\\&quot;</span>);</span><br><span class="line">        taskFolder.DeleteTask(strTaskName, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获得所有任务计划</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>所有任务计划<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IRegisteredTaskCollection <span class="title">GetAllTaskschd</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        TaskSchedulerClass taskScheduler = <span class="keyword">new</span> TaskSchedulerClass();</span><br><span class="line">        taskScheduler.Connect(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        ITaskFolder taskFolder = taskScheduler.GetFolder(<span class="string">&quot;\\&quot;</span>);</span><br><span class="line">        IRegisteredTaskCollection tasks_exists = taskFolder.GetTasks(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> tasks_exists;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 任务计划是否存在</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strTaskName&quot;&gt;</span>任务计划名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">IsExists</span>(<span class="params"><span class="built_in">string</span> strTaskName</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">bool</span> isExists = <span class="literal">false</span>;</span><br><span class="line">        IRegisteredTaskCollection tasks_exists = GetAllTaskschd();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= tasks_exists.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            IRegisteredTask registeredTask = tasks_exists[i];</span><br><span class="line">            <span class="keyword">if</span> (registeredTask.Name.Equals(strTaskName))</span><br><span class="line">            &#123;</span><br><span class="line">                isExists = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isExists;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>helper</tag>
        <tag>windows</tag>
        <tag>taskschd</tag>
      </tags>
  </entry>
  <entry>
    <title>超时自动删除集合数据</title>
    <url>/blog/2021/06/14/csharp-TimeOutDictionary/</url>
    <content><![CDATA[<h3 id="重写-Dictionary-达到数据超时自动删除"><a href="#重写-Dictionary-达到数据超时自动删除" class="headerlink" title="重写 Dictionary 达到数据超时自动删除"></a>重写 Dictionary 达到数据超时自动删除</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>在实际应用中存在一种需求，是数据存在有效时间，只管添加，超时后需要自动删除。通过重写集合的方式达到数据集合超时自动删除数据的需求。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>在新增数据时创建一个针对于这条数据的计时器，调用时使用重写的 Add 方法传入数据有效时间即可。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 重写 Dictionary</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;TKey&quot;&gt;</span><span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;TValue&quot;&gt;</span><span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TimeOutDictionary</span>&lt;<span class="title">TKey</span>, <span class="title">TValue</span>&gt; : <span class="title">Dictionary</span>&lt;<span class="title">TKey</span>, <span class="title">TValue</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">object</span> locker = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 重写</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;timeSpan&quot;&gt;</span>超时时间<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">TKey key, TValue <span class="keyword">value</span>, TimeSpan timeSpan</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">lock</span> (locker)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">base</span>.ContainsKey(key))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">base</span>[key] = <span class="keyword">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">base</span>.Add(key, <span class="keyword">value</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            SetTimeoutDelete(timeSpan.TotalMilliseconds, key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 在指定时间过后删除数据</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;interval&quot;&gt;</span>事件之间经过的时间（以毫秒为单位）<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span>要删除的数据Key<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetTimeoutDelete</span>(<span class="params"><span class="built_in">double</span> interval, TKey key</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Timer timer = <span class="keyword">new</span> Timer(interval);</span><br><span class="line">        timer.Elapsed += <span class="built_in">delegate</span> (<span class="built_in">object</span> sender, ElapsedEventArgs e)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">lock</span> (locker)</span><br><span class="line">            &#123;</span><br><span class="line">                timer.Enabled = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">base</span>.Remove(key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        timer.Enabled = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
      </tags>
  </entry>
  <entry>
    <title>UTM WGS84 互相转换</title>
    <url>/blog/2023/01/09/csharp-TransformWGS84_UTM/</url>
    <content><![CDATA[<h3 id="Mercator-投影与-WGS-84坐标系互相转换"><a href="#Mercator-投影与-WGS-84坐标系互相转换" class="headerlink" title="Mercator 投影与 WGS-84坐标系互相转换"></a>Mercator 投影与 WGS-84坐标系互相转换</h3><span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://en.wikipedia.org/wiki/World_Geodetic_System">WGS84 坐标系</a> 是为GPS全球定位系统使用而建立的坐标系统。<br><a href="https://en.wikipedia.org/wiki/Mercator_projection">Mercator (墨卡托投影)</a> 是一种地图投影系统，用于为地球表面的位置分配坐标，可以参考别人编制的 <a href="https://www.dmap.co.uk/utmworld.htm">UTM Grid</a>，例如中国东部属于 UTM Zone 50N。</p>
<p><img src="https://www.dmap.co.uk/utmworld.gif"/></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>引用 <a href="https://github.com/NetTopologySuite/ProjNet4GeoAPI">ProjNet</a> 库，ProjNet 是 <a href="https://proj.org/">Proj</a> 的 .Net 版本，是一种通用坐标转换软件，可将地理空间坐标从一个坐标参考系统 (CRS) 转换到另一个坐标参考系统。<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Transform UTM to WGS84</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;points&quot;&gt;</span>UTM Easting Northing<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;zone&quot;&gt;</span>UTM zone<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;north&quot;&gt;</span>true of Northern hemisphere, false if southern<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>WGS84<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">double</span>[] <span class="title">TransformUtm32ToWgs84</span>(<span class="params"><span class="built_in">double</span>[] points, <span class="built_in">int</span> zone = <span class="number">50</span>, <span class="built_in">bool</span> north = <span class="literal">true</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CoordinateTransformationFactory cstFactory = <span class="keyword">new</span> CoordinateTransformationFactory();</span><br><span class="line">    ICoordinateTransformation utm32ToWgs84 = cstFactory.CreateFromCoordinateSystems(</span><br><span class="line">        ProjectedCoordinateSystem.WGS84_UTM(zone, north),</span><br><span class="line">        GeographicCoordinateSystem.WGS84</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> utm32ToWgs84.MathTransform.Transform(points);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Transform WGS84 to UTM</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;points&quot;&gt;</span>WGS84 Longitude Latitude<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;zone&quot;&gt;</span>UTM zone<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;north&quot;&gt;</span>true of Northern hemisphere, false if southern<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>UTM<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">double</span>[] <span class="title">TransformWgs84ToUtm32</span>(<span class="params"><span class="built_in">double</span>[] points, <span class="built_in">int</span> zone = <span class="number">50</span>, <span class="built_in">bool</span> north = <span class="literal">true</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CoordinateTransformationFactory cstFactory = <span class="keyword">new</span> CoordinateTransformationFactory();</span><br><span class="line">    ICoordinateTransformation wgs84ToUtm32 = cstFactory.CreateFromCoordinateSystems(</span><br><span class="line">        GeographicCoordinateSystem.WGS84,</span><br><span class="line">        ProjectedCoordinateSystem.WGS84_UTM(zone, north)</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> wgs84ToUtm32.MathTransform.Transform(points);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> output1 = TransformUtm32ToWgs84(<span class="keyword">new</span>[] &#123; <span class="number">447617.70449733676</span>, <span class="number">4429247.0759452293</span> &#125;);</span><br><span class="line">    <span class="keyword">var</span> output2 = TransformWgs84ToUtm32(<span class="keyword">new</span>[] &#123; <span class="number">116.386231</span>, <span class="number">40.011798</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
      </tags>
  </entry>
  <entry>
    <title>内网穿透 UDP 打洞</title>
    <url>/blog/2021/01/26/csharp-UDPHole/</url>
    <content><![CDATA[<h3 id="Nat-穿透（UDP-打洞）"><a href="#Nat-穿透（UDP-打洞）" class="headerlink" title="Nat 穿透（UDP 打洞）"></a>Nat 穿透（UDP 打洞）</h3><span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>最开始源于一次去用户现场出差，<a href="https://www.teamviewer.com/en/">TeamViewer</a> 与 <a href="https://sunlogin.oray.com/">向日葵</a> 都是开通了会员的，但还是受到各种稀奇古怪的问题阻挠无法远程到家里的电脑和公司的电脑，回来后尝试做一个内网穿透工具以 <a href="https://support.microsoft.com/en-us/windows/how-to-use-remote-desktop-5fe128d5-8fb1-7a23-3b8a-41e636865e8c">Remote Desktop Connection(RDP)</a> 方式连接作为以后远程的备选方案。<br>但是后期测试时发现 <a href="https://support.microsoft.com/en-us/windows/how-to-use-remote-desktop-5fe128d5-8fb1-7a23-3b8a-41e636865e8c">Remote Desktop Connection(RDP)</a> 协议首先通过 TCP 进行第一次通讯建立连接以及输入用户名密码，验证用户凭据后重新以 TCP 进行远程通讯，UDP 仅作为辅助，所以改为 TCP 转发方式继续开发，UDP 打洞成功，或许以后或许可以在此基础上做些其他功能。</p>
<h3 id="代码仓库"><a href="#代码仓库" class="headerlink" title="代码仓库"></a>代码仓库</h3><p>不确定当前仓库权限是否公有<br><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/iceelves/PenetrateRemote.git</span><br><span class="line">git reset fd217598</span><br></pre></td></tr></table></figure></p>
<h3 id="网络类型"><a href="#网络类型" class="headerlink" title="网络类型"></a>网络类型</h3><h4 id="检测网络-Nat-类型"><a href="#检测网络-Nat-类型" class="headerlink" title="检测网络 Nat 类型"></a>检测网络 Nat 类型</h4><p>使用开源项目 <a href="https://github.com/HMBSbige/NatTypeTester">NatTypeTester</a> 可检测本 地网络 Nat 类型。</p>
<h4 id="Nat-类型"><a href="#Nat-类型" class="headerlink" title="Nat 类型"></a>Nat 类型</h4><p><img src="https://sadness96.github.io/images/blog/csharp-UDPHole/NatXmind.png"/></p>
<ol>
<li>全锥型(Full Cone)<br> 如果在 NAT 网关已经建立了一个 NAT 映射，那么任何外网的机器都可以通过这个映射来访问内网的电脑。</li>
<li>受限锥型(Restricted Cone)(IP受限锥型)<br> 如果在 NAT 网关已经建立了一个 NAT 映射，那么只有与其建立映射的 IP 才能通过 NAT 访问内网的电脑。</li>
<li>端口受限锥型(Port Restricted Cone)(IP + PORT受限锥型)<br> 在 IP 限制型锥型的基础上，再进行端口的限制。</li>
<li>对称型(Symmetric)<br> 即对 IP 和端口都有限制，只有和其建立连接的 IP 和端口向其发送数据才不会被丢弃。</li>
</ol>
<h4 id="不同-Nat-类型穿透性"><a href="#不同-Nat-类型穿透性" class="headerlink" title="不同 Nat 类型穿透性"></a>不同 Nat 类型穿透性</h4><p>盗的图，出处见水印<br><img src="https://sadness96.github.io/images/blog/csharp-UDPHole/NatPierceThrough.webp"/></p>
<h3 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a>运行流程</h3><p>如图所示：局域网 NatA 中的机器 192.168.5.13(以下简称 ClientA) 请求与局域网 NatB 中的机器 192.168.1.100(以下简称 ClientB) 通过 UDP 打洞通信。<br><img src="https://sadness96.github.io/images/blog/csharp-UDPHole/NatVisio.png"/></p>
<ol>
<li>局域网内两台电脑运行 Client 程序，向服务器建立 Socket UDP 连接。</li>
<li>ClientA 向服务端发出请求与 ClientB 建立连接。</li>
<li>服务端验证两台电脑在线后将 ClientB Socket UDP 信息发送给 ClientA。</li>
<li>ClientA 发送登录信息到 ClientB，此时 ClientB 接收不到消息。</li>
<li>ClientA 向服务端发送反向打洞请求，让 ClientB 向自己发送数据。</li>
<li>服务端将 ClientA 信息发送到 ClientB。</li>
<li>ClientB 向 ClientA 发送登录信息后，双方建立打洞通信，关闭服务端程序后依然可以通信。</li>
</ol>
<h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><h4 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Udp_Server</span> : <span class="title">IDisposable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 构造函数</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Udp_Server</span>(<span class="params"><span class="built_in">int</span> ListeningPort</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _listeningPort = ListeningPort;</span><br><span class="line">        _remotePoint = <span class="keyword">new</span> IPEndPoint(IPAddress.Any, <span class="number">0</span>);</span><br><span class="line">        _serverThread = <span class="keyword">new</span> Thread(Run);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 析构函数</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    ~Udp_Server()</span><br><span class="line">    &#123;</span><br><span class="line">        Dispose();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 监听端口号</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _listeningPort;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 服务器端消息监听</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> UdpClient _server;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 计时器</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Thread _serverThread;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 远程用户请求的IP地址及端口 </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> IPEndPoint _remotePoint;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConcurrentDictionary&lt;<span class="built_in">string</span>, HoleUserInfo&gt; _loginUser;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 登陆打洞用户</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ConcurrentDictionary&lt;<span class="built_in">string</span>, HoleUserInfo&gt; LoginUser</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_loginUser == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                _loginUser = <span class="keyword">new</span> ConcurrentDictionary&lt;<span class="built_in">string</span>, HoleUserInfo&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> _loginUser;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> =&gt; _loginUser = <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 启动 UDP 监听</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 删除超时数据</span></span><br><span class="line">            System.Timers.Timer overtime = <span class="keyword">new</span> System.Timers.Timer();</span><br><span class="line">            overtime.Interval = <span class="number">60000</span> * <span class="number">5</span>;</span><br><span class="line">            overtime.Elapsed += <span class="keyword">new</span> System.Timers.ElapsedEventHandler(timer_Overtime);</span><br><span class="line">            overtime.Start();</span><br><span class="line">            <span class="comment">// 启动服务</span></span><br><span class="line">            _server = <span class="keyword">new</span> UdpClient(_listeningPort);</span><br><span class="line">            _serverThread.Start();</span><br><span class="line">            NLogHelper.SaveInfo(<span class="string">$&quot;服务启动，监听端口：<span class="subst">&#123;_listeningPort&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            NLogHelper.SaveError(ex.ToString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 移除超时数据线程</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">timer_Overtime</span>(<span class="params"><span class="built_in">object</span> sender, System.Timers.ElapsedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        List&lt;<span class="built_in">string</span>&gt; removeKeys = LoginUser.Where(o =&gt; DateTime.Now - o.Value.LastLoginTime &gt;= <span class="keyword">new</span> TimeSpan(<span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>)).Select(o =&gt; o.Key).ToList();</span><br><span class="line">        <span class="keyword">if</span> (removeKeys != <span class="literal">null</span> &amp;&amp; removeKeys.Count &gt;= <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> removeKeys)</span><br><span class="line">            &#123;</span><br><span class="line">                LoginUser.TryRemove(item, <span class="keyword">out</span> _);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 线程主方法</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] msgBuffer;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 接受消息</span></span><br><span class="line">                msgBuffer = _server.Receive(<span class="keyword">ref</span> _remotePoint);</span><br><span class="line">                <span class="comment">// 将消息转换为对象 </span></span><br><span class="line">                <span class="keyword">var</span> msgObject = ObjectSerializerHelper.JsonDeserialize(msgBuffer);</span><br><span class="line">                <span class="keyword">if</span> (msgObject == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 解析消息</span></span><br><span class="line">                <span class="keyword">if</span> (msgObject.ModelName == <span class="keyword">typeof</span>(MessageLogin).Name)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 用户登陆/心跳</span></span><br><span class="line">                    <span class="keyword">var</span> lginMsg = JsonConvert.DeserializeObject&lt;MessageLogin&gt;(msgObject.ModelData);</span><br><span class="line">                    <span class="keyword">if</span> (LoginUser.ContainsKey(lginMsg.MacAddress))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 更新数据</span></span><br><span class="line">                        <span class="keyword">var</span> vLoginUser = LoginUser.Where(o =&gt; o.Key.Equals(lginMsg.MacAddress)).First();</span><br><span class="line">                        vLoginUser.Value.UserName = lginMsg.UserName;</span><br><span class="line">                        vLoginUser.Value.NetPoint = <span class="keyword">new</span> IPEndPoint(_remotePoint.Address, _remotePoint.Port);</span><br><span class="line">                        vLoginUser.Value.LastLoginTime = DateTime.Now;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 新增数据</span></span><br><span class="line">                        HoleUserInfo holeUserInfo = <span class="keyword">new</span> HoleUserInfo</span><br><span class="line">                        &#123;</span><br><span class="line">                            MacAddress = lginMsg.MacAddress,</span><br><span class="line">                            UserName = lginMsg.UserName,</span><br><span class="line">                            NetPoint = <span class="keyword">new</span> IPEndPoint(_remotePoint.Address, _remotePoint.Port),</span><br><span class="line">                            LastLoginTime = DateTime.Now</span><br><span class="line">                        &#125;;</span><br><span class="line">                        LoginUser.TryAdd(lginMsg.MacAddress, holeUserInfo);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (msgObject.ModelName == <span class="keyword">typeof</span>(MessageHolePunchingRequest).Name)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 打洞请求</span></span><br><span class="line">                    <span class="keyword">var</span> holeMsg = JsonConvert.DeserializeObject&lt;MessageHolePunchingRequest&gt;(msgObject.ModelData);</span><br><span class="line">                    <span class="keyword">var</span> vSelectUsers = LoginUser.Where(o =&gt; o.Key.Equals(holeMsg.TargetMacAddress))?.ToList();</span><br><span class="line">                    <span class="keyword">if</span> (vSelectUsers != <span class="literal">null</span> &amp;&amp; vSelectUsers.Count &gt;= <span class="number">1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">var</span> vSelectUser = vSelectUsers.First();</span><br><span class="line">                        <span class="built_in">byte</span>[] buffer = ObjectSerializerHelper.JsonSerialize(<span class="keyword">new</span> MessageHolePunching() &#123; MacAddress = holeMsg.RequestorMacAddress, RequestorNetIP = _remotePoint.Address.ToString(), RequestorNetPort = _remotePoint.Port, IsFirst = holeMsg.IsAtoB &#125;);</span><br><span class="line">                        _server.Send(buffer, buffer.Length, vSelectUser.Value.NetPoint);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                NLogHelper.SaveError(ex.ToString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 释放资源</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_server != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                _serverThread.Abort();</span><br><span class="line">                _server.Close();</span><br><span class="line">                NLogHelper.SaveInfo(<span class="string">$&quot;服务停止！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            NLogHelper.SaveError(ex.ToString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Clent"><a href="#Clent" class="headerlink" title="Clent"></a>Clent</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Udp_Client</span> : <span class="title">IDisposable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 构造函数</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Udp_Client</span>(<span class="params">MessageLogin MessageLogin</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _messageLogin = MessageLogin;</span><br><span class="line">        <span class="comment">// 任何与本地连接的用户IP地址</span></span><br><span class="line">        _remotePoint = <span class="keyword">new</span> IPEndPoint(IPAddress.Any, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 服务器地址</span></span><br><span class="line">        <span class="built_in">string</span> serverIP = ConfigurationManager.AppSettings[<span class="string">&quot;server_remote&quot;</span>];</span><br><span class="line">        _hostPoint = <span class="keyword">new</span> IPEndPoint(IPAddress.Parse(serverIP.Split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>]), <span class="built_in">int</span>.Parse(serverIP.Split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>]));</span><br><span class="line">        <span class="comment">// 不指定端口,系统自动分配</span></span><br><span class="line">        _client = <span class="keyword">new</span> UdpClient();</span><br><span class="line">        <span class="comment">// 监听线程</span></span><br><span class="line">        _listenThread = <span class="keyword">new</span> Thread(Run);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 析构函数</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    ~Udp_Client()</span><br><span class="line">    &#123;</span><br><span class="line">        Dispose();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 客户端监听</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> UdpClient _client;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 主机IP </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IPEndPoint _hostPoint;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 接收任何远程机器的数据</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> IPEndPoint _remotePoint;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 监听线程 </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Thread _listenThread;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 登陆信息</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> MessageLogin _messageLogin &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 启动客户端 </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span> </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// 登陆打洞用户</span></span><br><span class="line">        <span class="built_in">byte</span>[] buffer = ObjectSerializerHelper.JsonSerialize(_messageLogin);</span><br><span class="line">        _client.Send(buffer, buffer.Length, _hostPoint);</span><br><span class="line">        <span class="comment">// 启动心跳线程</span></span><br><span class="line">        DispatcherTimer timerHeartbeat = <span class="keyword">new</span> DispatcherTimer();</span><br><span class="line">        timerHeartbeat.Interval = <span class="keyword">new</span> TimeSpan(TimeSpan.TicksPerMinute);</span><br><span class="line">        timerHeartbeat.Tick += TimerHeartbeat_Tick;</span><br><span class="line">        timerHeartbeat.Start();</span><br><span class="line">        <span class="comment">// 启动主线程</span></span><br><span class="line">        <span class="keyword">if</span> (_listenThread.ThreadState == ThreadState.Unstarted)</span><br><span class="line">        &#123;</span><br><span class="line">            _listenThread.Start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 打洞请求</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;MacAddress&quot;&gt;</span>目标 Mac 地址<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HolePunching</span>(<span class="params"><span class="built_in">string</span> MacAddress</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] buffer = ObjectSerializerHelper.JsonSerialize(<span class="keyword">new</span> MessageHolePunchingRequest() &#123; RequestorMacAddress = _messageLogin.MacAddress, TargetMacAddress = MacAddress, IsAtoB = <span class="literal">true</span> &#125;);</span><br><span class="line">        _client.Send(buffer, buffer.Length, _hostPoint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 心跳计时器</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">TimerHeartbeat_Tick</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] buffer = ObjectSerializerHelper.JsonSerialize(_messageLogin);</span><br><span class="line">        _client.Send(buffer, buffer.Length, _hostPoint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 线程主方法</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] msgBuffer;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 接受消息</span></span><br><span class="line">                msgBuffer = _client.Receive(<span class="keyword">ref</span> _remotePoint);</span><br><span class="line">                <span class="comment">// 将消息转换为对象 </span></span><br><span class="line">                <span class="keyword">var</span> msgObject = ObjectSerializerHelper.JsonDeserialize(msgBuffer);</span><br><span class="line">                <span class="keyword">if</span> (msgObject == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 解析消息</span></span><br><span class="line">                <span class="keyword">if</span> (msgObject.ModelName == <span class="keyword">typeof</span>(MessageHolePunching).Name)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 接受打洞请求</span></span><br><span class="line">                    <span class="keyword">var</span> holeMsg = JsonConvert.DeserializeObject&lt;MessageHolePunching&gt;(msgObject.ModelData);</span><br><span class="line">                    <span class="built_in">byte</span>[] bufferUserLogin = ObjectSerializerHelper.JsonSerialize(_messageLogin);</span><br><span class="line">                    _client.Send(bufferUserLogin, bufferUserLogin.Length, <span class="keyword">new</span> IPEndPoint(IPAddress.Parse(holeMsg.RequestorNetIP), holeMsg.RequestorNetPort));</span><br><span class="line">                    <span class="comment">// 反向打洞</span></span><br><span class="line">                    <span class="keyword">if</span> (holeMsg.IsFirst)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">byte</span>[] bufferHolePunchingRequest = ObjectSerializerHelper.JsonSerialize(<span class="keyword">new</span> MessageHolePunchingRequest() &#123; RequestorMacAddress = _messageLogin.MacAddress, TargetMacAddress = holeMsg.MacAddress, IsAtoB = <span class="literal">false</span> &#125;);</span><br><span class="line">                        _client.Send(bufferHolePunchingRequest, bufferHolePunchingRequest.Length, _hostPoint);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (msgObject.ModelName == <span class="keyword">typeof</span>(MessageLogin).Name)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 打洞连接成功,接收到对方登陆信息</span></span><br><span class="line">                    <span class="keyword">var</span> lginMsg = JsonConvert.DeserializeObject&lt;MessageLogin&gt;(msgObject.ModelData);</span><br><span class="line">                    NLogHelper.SaveInfo(<span class="string">$&quot;P2P打洞成功：<span class="subst">&#123;JsonConvert.SerializeObject(lginMsg)&#125;</span>&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                NLogHelper.SaveError(ex.ToString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 释放资源</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_client != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                _listenThread.Abort();</span><br><span class="line">                _client.Close();</span><br><span class="line">                NLogHelper.SaveInfo(<span class="string">$&quot;客户端停止！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            NLogHelper.SaveError(ex.ToString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>udp</tag>
        <tag>hole</tag>
      </tags>
  </entry>
  <entry>
    <title>HttpClient 上传文件</title>
    <url>/blog/2022/05/20/csharp-WebApiFormData/</url>
    <content><![CDATA[<h3 id="使用-HttpClient-form-data-上传文件"><a href="#使用-HttpClient-form-data-上传文件" class="headerlink" title="使用 HttpClient form-data 上传文件"></a>使用 HttpClient form-data 上传文件</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>用户需求，通过 multipart/form-data 类型 HTTP 请求上传文件，原帮助类代码参考 <a href="https://liujiahua.com/blog/2018/08/27/csharp-WebApiHelper/">C/S端调用 WebApi 帮助类</a>，修改代码发送 HttpClient 表单文件上传请求。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 创建Post请求</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;url&quot;&gt;</span>Api访问地址<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;requestUrl&quot;&gt;</span>详细方法路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>Api返回值<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">CreatePostHttpClient</span>(<span class="params"><span class="built_in">string</span> url, <span class="built_in">string</span> requestUrl</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> filePath = <span class="string">&quot;1.jpg&quot;</span>;</span><br><span class="line">        <span class="built_in">string</span> savePath = <span class="string">&quot;/danger/reform/before/&quot;</span>;</span><br><span class="line"></span><br><span class="line">        HttpClient httpClient = <span class="keyword">new</span> HttpClient();</span><br><span class="line">        httpClient.BaseAddress = <span class="keyword">new</span> Uri(url);</span><br><span class="line">        <span class="comment">// 创建使用 multipart/form-data MIME 类型进行编码的内容提供容器。</span></span><br><span class="line">        MultipartFormDataContent form = <span class="keyword">new</span> MultipartFormDataContent();</span><br><span class="line">        <span class="comment">// 加载文件流</span></span><br><span class="line">        FileStream fs = File.OpenRead(filePath);</span><br><span class="line">        <span class="keyword">var</span> streamContent = <span class="keyword">new</span> StreamContent(fs);</span><br><span class="line">        <span class="comment">// 添加到基于字节数组的 HTTP 内容</span></span><br><span class="line">        <span class="keyword">var</span> imageContent = <span class="keyword">new</span> ByteArrayContent(streamContent.ReadAsByteArrayAsync().Result);</span><br><span class="line">        <span class="comment">// 设置 HTTP 响应上的 Content-Type 内容标头值为 multipart/form-data</span></span><br><span class="line">        imageContent.Headers.ContentType = MediaTypeHeaderValue.Parse(<span class="string">&quot;multipart/form-data&quot;</span>);</span><br><span class="line">        <span class="comment">// 添加文件类型数据</span></span><br><span class="line">        form.Add(imageContent, <span class="string">&quot;file&quot;</span>, Path.GetFileName(filePath));</span><br><span class="line">        <span class="comment">// 添加其他文本类型数据</span></span><br><span class="line">        form.Add(<span class="keyword">new</span> StringContent(savePath), <span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> result = httpClient.PostAsync(requestUrl, form).Result;</span><br><span class="line">        <span class="keyword">return</span> result.Content.ReadAsStringAsync().Result;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>helper</tag>
        <tag>webapi</tag>
      </tags>
  </entry>
  <entry>
    <title>C/S端调用 WebApi 帮助类</title>
    <url>/blog/2018/08/27/csharp-WebApiHelper/</url>
    <content><![CDATA[<h3 id="使用-HttpClient-与-HttpWebRequest-两种方式调用-WebApi-帮助类"><a href="#使用-HttpClient-与-HttpWebRequest-两种方式调用-WebApi-帮助类" class="headerlink" title="使用 HttpClient 与 HttpWebRequest 两种方式调用 WebApi 帮助类"></a>使用 HttpClient 与 HttpWebRequest 两种方式调用 WebApi 帮助类</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>现最常见的软件开发模式就是 <a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E7%AB%AF/6492316?fr=aladdin">服务端</a>（<a href="https://baike.baidu.com/item/B%2FS%E7%BB%93%E6%9E%84/4868588?fromtitle=BS&amp;fromid=2629117&amp;fr=aladdin">B/S</a>、<a href="https://baike.baidu.com/item/WeBAPI">WebApi</a>、<a href="https://baike.baidu.com/item/web%20server/9306055">WebServer</a>) + <a href="https://baike.baidu.com/item/%E5%AE%A2%E6%88%B7%E7%AB%AF">客户端</a>(<a href="https://baike.baidu.com/item/Client%2FServer/1504488?fromtitle=cs&amp;fromid=2852264">C/S</a>、<a href="https://baike.baidu.com/item/Android/60243?fromtitle=%E5%AE%89%E5%8D%93&amp;fromid=5389782">Android</a>、<a href="https://baike.baidu.com/item/ios/45705">IOS</a>)。<br>公司有部分新项目修改为逻辑在服务端处理，所以通过两种方法封装一个C/S端调用WebApi接口的帮助类。<br>调试WebApi推荐使用：<a href="https://www.getpostman.com/">Postman</a>。</p>
<h4 id="帮助类"><a href="#帮助类" class="headerlink" title="帮助类"></a>帮助类</h4><h5 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a>HttpClient</h5><p><a href="https://github.com/Sadness96/Sadness/blob/master/Code/Helper/Utils.Helper/WebApi/HttpClientHelper.cs">HttpClientHelper</a></p>
<h6 id="创建Get请求"><a href="#创建Get请求" class="headerlink" title="创建Get请求"></a>创建Get请求</h6><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 创建Get请求</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;url&quot;&gt;</span>Api访问地址<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;requestUrl&quot;&gt;</span>详细方法路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;parameters&quot;&gt;</span>请求参数<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>Api返回值<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">CreateGetHttpClient</span>(<span class="params"><span class="built_in">string</span> url, <span class="built_in">string</span> requestUrl, IDictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; parameters</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        builder.Append(url);</span><br><span class="line">        builder.Append(requestUrl);</span><br><span class="line">        <span class="keyword">if</span> (parameters != <span class="literal">null</span> &amp;&amp; parameters.Count &gt;= <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            builder.Append(<span class="string">&quot;?&quot;</span>);</span><br><span class="line">            <span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> parameters)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    builder.Append(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                builder.AppendFormat(<span class="string">&quot;&#123;0&#125;=&#123;1&#125;&quot;</span>, item.Key, item.Value);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        HttpClient httpClient = <span class="keyword">new</span> HttpClient();</span><br><span class="line">        httpClient.BaseAddress = <span class="keyword">new</span> Uri(url);</span><br><span class="line">        <span class="keyword">var</span> result = httpClient.GetAsync(builder.ToString()).Result;</span><br><span class="line">        <span class="keyword">return</span> result.Content.ReadAsStringAsync().Result;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="创建Post请求"><a href="#创建Post请求" class="headerlink" title="创建Post请求"></a>创建Post请求</h6><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 创建Post请求</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;url&quot;&gt;</span>Api访问地址<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;requestUrl&quot;&gt;</span>详细方法路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;parameters&quot;&gt;</span>请求参数<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>Api返回值<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">CreatePostHttpClient</span>(<span class="params"><span class="built_in">string</span> url, <span class="built_in">string</span> requestUrl, IDictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; parameters</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        HttpClient httpClient = <span class="keyword">new</span> HttpClient();</span><br><span class="line">        httpClient.BaseAddress = <span class="keyword">new</span> Uri(url);</span><br><span class="line">        <span class="keyword">var</span> result = httpClient.PostAsync(requestUrl, <span class="keyword">new</span> FormUrlEncodedContent(parameters)).Result;</span><br><span class="line">        <span class="keyword">return</span> result.Content.ReadAsStringAsync().Result;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="HttpWebRequest"><a href="#HttpWebRequest" class="headerlink" title="HttpWebRequest"></a>HttpWebRequest</h5><h6 id="创建Get请求-1"><a href="#创建Get请求-1" class="headerlink" title="创建Get请求"></a>创建Get请求</h6><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 创建Get请求</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;url&quot;&gt;</span>Api访问地址<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;requestUrl&quot;&gt;</span>详细方法路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;parameters&quot;&gt;</span>请求参数<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>Api返回值<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">CreateGetHttpWebRequest</span>(<span class="params"><span class="built_in">string</span> url, <span class="built_in">string</span> requestUrl, IDictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; parameters</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        builder.Append(url);</span><br><span class="line">        builder.Append(requestUrl);</span><br><span class="line">        <span class="keyword">if</span> (parameters != <span class="literal">null</span> &amp;&amp; parameters.Count &gt;= <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            builder.Append(<span class="string">&quot;?&quot;</span>);</span><br><span class="line">            <span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> parameters)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    builder.Append(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                builder.AppendFormat(<span class="string">&quot;&#123;0&#125;=&#123;1&#125;&quot;</span>, item.Key, item.Value);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        HttpWebRequest request = (HttpWebRequest)WebRequest.Create(builder.ToString());</span><br><span class="line">        request.Method = <span class="string">&quot;GET&quot;</span>;</span><br><span class="line">        request.ContentType = <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>;</span><br><span class="line">        StreamReader reader = <span class="keyword">new</span> StreamReader(request.GetResponse().GetResponseStream(), Encoding.UTF8);</span><br><span class="line">        <span class="keyword">return</span> reader.ReadToEnd();</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 创建Get请求</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;url&quot;&gt;</span>Api访问地址<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;requestUrl&quot;&gt;</span>详细方法路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;parameters&quot;&gt;</span>请求参数<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;encoding&quot;&gt;</span>字符编码<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;timout &quot;&gt;</span>请求超时前等待的毫秒数,默认值是 100,000 毫秒（100 秒）<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>Api返回值<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">CreateGetHttpWebRequest</span>(<span class="params"><span class="built_in">string</span> url, <span class="built_in">string</span> requestUrl, IDictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; parameters, Encoding encoding, <span class="built_in">int</span> timout</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        builder.Append(url);</span><br><span class="line">        builder.Append(requestUrl);</span><br><span class="line">        <span class="keyword">if</span> (parameters != <span class="literal">null</span> &amp;&amp; parameters.Count &gt;= <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            builder.Append(<span class="string">&quot;?&quot;</span>);</span><br><span class="line">            <span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> parameters)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    builder.Append(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                builder.AppendFormat(<span class="string">&quot;&#123;0&#125;=&#123;1&#125;&quot;</span>, item.Key, item.Value);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        HttpWebRequest request = (HttpWebRequest)WebRequest.Create(builder.ToString());</span><br><span class="line">        request.Method = <span class="string">&quot;GET&quot;</span>;</span><br><span class="line">        request.ContentType = <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>;</span><br><span class="line">        request.Timeout = timout;</span><br><span class="line">        StreamReader reader = <span class="keyword">new</span> StreamReader(request.GetResponse().GetResponseStream(), encoding);</span><br><span class="line">        <span class="keyword">return</span> reader.ReadToEnd();</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="创建Post请求-1"><a href="#创建Post请求-1" class="headerlink" title="创建Post请求"></a>创建Post请求</h6><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 创建Post请求</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;url&quot;&gt;</span>Api访问地址<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;requestUrl&quot;&gt;</span>详细方法路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;parameters&quot;&gt;</span>请求参数<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>Api返回值<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">CreatePostHttpWebRequest</span>(<span class="params"><span class="built_in">string</span> url, <span class="built_in">string</span> requestUrl, IDictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; parameters</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        HttpWebRequest request = WebRequest.Create(url + requestUrl) <span class="keyword">as</span> HttpWebRequest;</span><br><span class="line">        request.ProtocolVersion = HttpVersion.Version10;</span><br><span class="line">        request.Method = <span class="string">&quot;POST&quot;</span>;</span><br><span class="line">        request.ContentType = <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>;</span><br><span class="line">        <span class="comment">//如果需要POST数据</span></span><br><span class="line">        <span class="keyword">if</span> (!(parameters == <span class="literal">null</span> || parameters.Count == <span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            StringBuilder buffer = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">string</span> key <span class="keyword">in</span> parameters.Keys)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    buffer.AppendFormat(<span class="string">&quot;&amp;&#123;0&#125;=&#123;1&#125;&quot;</span>, key, parameters[key]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    buffer.AppendFormat(<span class="string">&quot;&#123;0&#125;=&#123;1&#125;&quot;</span>, key, parameters[key]);</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">byte</span>[] data = Encoding.GetEncoding(<span class="string">&quot;utf-8&quot;</span>).GetBytes(buffer.ToString());</span><br><span class="line">            <span class="keyword">using</span> (Stream stream = request.GetRequestStream())</span><br><span class="line">            &#123;</span><br><span class="line">                stream.Write(data, <span class="number">0</span>, data.Length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        StreamReader reader = <span class="keyword">new</span> StreamReader(request.GetResponse().GetResponseStream(), Encoding.UTF8);</span><br><span class="line">        <span class="keyword">return</span> reader.ReadToEnd();</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 创建Post请求</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;url&quot;&gt;</span>Api访问地址<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;requestUrl&quot;&gt;</span>详细方法路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;parameters&quot;&gt;</span>请求参数<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;encoding&quot;&gt;</span>字符编码<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;timout &quot;&gt;</span>请求超时前等待的毫秒数,默认值是 100,000 毫秒（100 秒）<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>Api返回值<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">CreatePostHttpWebRequest</span>(<span class="params"><span class="built_in">string</span> url, <span class="built_in">string</span> requestUrl, IDictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; parameters, Encoding encoding, <span class="built_in">int</span> timout</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        HttpWebRequest request = WebRequest.Create(url + requestUrl) <span class="keyword">as</span> HttpWebRequest;</span><br><span class="line">        request.ProtocolVersion = HttpVersion.Version10;</span><br><span class="line">        request.Method = <span class="string">&quot;POST&quot;</span>;</span><br><span class="line">        request.ContentType = <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>;</span><br><span class="line">        request.Timeout = timout;</span><br><span class="line">        <span class="comment">//如果需要POST数据</span></span><br><span class="line">        <span class="keyword">if</span> (!(parameters == <span class="literal">null</span> || parameters.Count == <span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            StringBuilder buffer = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">string</span> key <span class="keyword">in</span> parameters.Keys)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    buffer.AppendFormat(<span class="string">&quot;&amp;&#123;0&#125;=&#123;1&#125;&quot;</span>, key, parameters[key]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    buffer.AppendFormat(<span class="string">&quot;&#123;0&#125;=&#123;1&#125;&quot;</span>, key, parameters[key]);</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">byte</span>[] data = encoding.GetBytes(buffer.ToString());</span><br><span class="line">            <span class="keyword">using</span> (Stream stream = request.GetRequestStream())</span><br><span class="line">            &#123;</span><br><span class="line">                stream.Write(data, <span class="number">0</span>, data.Length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        StreamReader reader = <span class="keyword">new</span> StreamReader(request.GetResponse().GetResponseStream(), Encoding.UTF8);</span><br><span class="line">        <span class="keyword">return</span> reader.ReadToEnd();</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>helper</tag>
        <tag>webapi</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 7 下无法开启 Aero 主题</title>
    <url>/blog/2021/06/02/csharp-Win7Aero/</url>
    <content><![CDATA[<h3 id="多个高分屏导致-Aero-主题无法开启"><a href="#多个高分屏导致-Aero-主题无法开启" class="headerlink" title="多个高分屏导致 Aero 主题无法开启"></a>多个高分屏导致 Aero 主题无法开启</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><a href="https://baike.baidu.com/item/Windows%20Aero/6845089?fromtitle=Aero&amp;fromid=3554670&amp;fr=aladdin">Aero 主题</a> 仅仅是一个受人追捧的毛玻璃效果而已，但是在项目实际使用的时候却发现与 <a href="https://www.microsoft.com/zh-cn/download/details.aspx?id=35">DirectX</a> 渲染效率相关，在未开启 Aero 主题的情况下叠加透明窗体 <a href="https://docs.microsoft.com/en-us/previous-versions/bb324100(v=vs.85">Device.Present() 方法</a>) 延迟约在 00:00:00.1258071 相比开启了 Aero 主题的延迟约在 00:00:00.0000365，千倍的时间差。</p>
<h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p>换个主题并不是难事，但是面对一个早已不受微软支持的操作系统，对多屏幕的支持不是很好，目前也没什么解决办法，实际测试中 3 块 1080p 显示器及以上无法被动开启 Aero 主题，2 块 4k 显示器及以上无法被动开启 Aero 主题，试过多型号显卡（Quadro P1000、Quadro P2000、Quadro P4000、Gtx 1080、Rtx 2070、Rtx 4000），排除显卡性能问题，试过多版本驱动，但是不排除显卡驱动与 Windows 7 兼容不好。</p>
<h4 id="系统设置上的比对"><a href="#系统设置上的比对" class="headerlink" title="系统设置上的比对"></a>系统设置上的比对</h4><h5 id="桌面右键菜单个性化"><a href="#桌面右键菜单个性化" class="headerlink" title="桌面右键菜单个性化"></a>桌面右键菜单个性化</h5><p>异常情况左下角提示：解决透明度和其他 Aero 效果问题<br>证明此时 Windows 7 系统是知道显示存在问题的<br><img src="https://sadness96.github.io/images/blog/csharp-Win7Aero/Win7个性化设置-正常.png"/></p>
<p><img src="https://sadness96.github.io/images/blog/csharp-Win7Aero/Win7个性化设置-异常.png"/></p>
<h5 id="解决透明度和其他-Aero-效果问题"><a href="#解决透明度和其他-Aero-效果问题" class="headerlink" title="解决透明度和其他 Aero 效果问题"></a>解决透明度和其他 Aero 效果问题</h5><p>点击修复程序，结果却显示很多问题不存在，无法修复<br><img src="https://sadness96.github.io/images/blog/csharp-Win7Aero/Win7Aero修复程序.png"/></p>
<p><img src="https://sadness96.github.io/images/blog/csharp-Win7Aero/Win7Aero修复程序-结果.png"/></p>
<h5 id="点击个性化中的窗口颜色"><a href="#点击个性化中的窗口颜色" class="headerlink" title="点击个性化中的窗口颜色"></a>点击个性化中的窗口颜色</h5><p>此时点击个性化中的窗口颜色，弹出的窗口颜色外观界面不同，异常情况无法设置 Aero 效果<br><img src="https://sadness96.github.io/images/blog/csharp-Win7Aero/Win7个性化设置窗口和外观-正常.png"/></p>
<p><img src="https://sadness96.github.io/images/blog/csharp-Win7Aero/Win7个性化设置窗口和外观-异常.png"/></p>
<h5 id="系统性能选项"><a href="#系统性能选项" class="headerlink" title="系统性能选项"></a>系统性能选项</h5><p>在系统性能选项卡中异常情况缺少 启用 Aero Peek 选项与其他重要选项<br><img src="https://sadness96.github.io/images/blog/csharp-Win7Aero/Win7系统性能选项-正常.png"/></p>
<p><img src="https://sadness96.github.io/images/blog/csharp-Win7Aero/Win7系统性能选项-异常.png"/></p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>在 Windows 7 兼容（4块1080p显示器以下或2块4k显示器以下）允许的范围内解决显示器接入断开导致 Aero 效果失效，软件操作恢复而不用人工操作。</p>
<h5 id="处理方式"><a href="#处理方式" class="headerlink" title="处理方式"></a>处理方式</h5><ol>
<li>通过 dwmapi.dll 库的 DwmIsCompositionEnabled 检测 Aero 开启状态</li>
<li>通过系统 Environment.OSVersion.Version 方法获取 Windows 版本</li>
<li>通过 CMD 命令切换 Aero 主题和启动服务</li>
<li>通过 System.ServiceProcess.ServiceController 重启服务</li>
<li><p>涉及到的服务主要由 UxSms，或可能与 Themes也有关<br> <img src="https://sadness96.github.io/images/blog/csharp-Win7Aero/UxSms服务.png"/></p>
<p> <img src="https://sadness96.github.io/images/blog/csharp-Win7Aero/Themes服务.png"/></p>
</li>
</ol>
<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 检测 Aero 开启状态</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">[<span class="meta">DllImport(<span class="meta-string">&quot;dwmapi.dll&quot;</span>, PreserveSig = false)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">bool</span> <span class="title">DwmIsCompositionEnabled</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 是否为 Windows 7</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">IsWindows7</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Environment.OSVersion.Version.Major == <span class="number">6</span> &amp;&amp; Environment.OSVersion.Version.Minor == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 运行 Cmd 命令</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strCmdCommand&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">RunCmd</span>(<span class="params"><span class="built_in">string</span> strCmdCommand</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Process cmd = <span class="keyword">new</span> Process();</span><br><span class="line">    cmd.StartInfo.FileName = <span class="string">&quot;cmd&quot;</span>;</span><br><span class="line">    cmd.StartInfo.RedirectStandardInput = <span class="literal">true</span>;</span><br><span class="line">    cmd.StartInfo.RedirectStandardOutput = <span class="literal">true</span>;</span><br><span class="line">    cmd.StartInfo.CreateNoWindow = <span class="literal">true</span>;</span><br><span class="line">    cmd.StartInfo.UseShellExecute = <span class="literal">false</span>;</span><br><span class="line">    cmd.Start();</span><br><span class="line">    cmd.StandardInput.WriteLine(strCmdCommand);</span><br><span class="line">    cmd.StandardInput.Flush();</span><br><span class="line">    cmd.StandardInput.Close();</span><br><span class="line">    cmd.Close();</span><br><span class="line">    cmd.Dispose();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 恢复 Aero 效果</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">RecoveryAero</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (IsWindows7() &amp;&amp; !DwmIsCompositionEnabled())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 服务未启动 启动服务</span></span><br><span class="line">        ServiceController service = <span class="keyword">new</span> ServiceController(<span class="string">&quot;UxSms&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (service.Status == ServiceControllerStatus.Stopped)</span><br><span class="line">        &#123;</span><br><span class="line">            RunCmd(<span class="string">&quot;net start UxSms&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 未设置主题 修改主题</span></span><br><span class="line">        <span class="keyword">if</span> (!DwmIsCompositionEnabled())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> strAeroTheme = <span class="string">@&quot;C:\WINDOWS\Resources\Themes\aero.theme&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> strCmdCommand = <span class="built_in">string</span>.Format(<span class="string">@&quot;rundll32.exe %SystemRoot%\system32\shell32.dll,Control_RunDLL %SystemRoot%\system32\desk.cpl desk,@Themes /Action:OpenTheme /file:&quot;&quot;&#123;0&#125;&quot;&quot;&quot;</span>, strAeroTheme); <span class="comment">//cmd命令</span></span><br><span class="line">            RunCmd(strCmdCommand);</span><br><span class="line">            Thread.Sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 仍无法显示 重启服务</span></span><br><span class="line">        <span class="keyword">if</span> (!DwmIsCompositionEnabled())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                service.Stop();</span><br><span class="line">                service.WaitForStatus(ServiceControllerStatus.Stopped);</span><br><span class="line">                service.Start();</span><br><span class="line">                service.WaitForStatus(ServiceControllerStatus.Running);</span><br><span class="line">            &#125;</span><br><span class="line">            catch</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> DwmIsCompositionEnabled();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>windows 7</tag>
        <tag>aero</tag>
      </tags>
  </entry>
  <entry>
    <title>Xbox 控制器捕获</title>
    <url>/blog/2021/06/20/csharp-XInput/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/csharp-XInput/XboxOneController.png"/></p>
<span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>写这个帮助类是对 <a href="https://sadness96.github.io/blog/2021/05/22/csharp-DirectInput/">摇杆控制器捕获</a> 接口的一个延伸，之前有了解到 OBS 插件 <a href="https://github.com/univrsal/input-overlay">input-overlay</a> 可以显示手柄信息用于直播，所以我也做了一个UI用于显示。</p>
<h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><p>手柄型号为 Xbox One，使用 <a href="https://docs.microsoft.com/en-us/windows/win32/xinput/getting-started-with-xinput">XInput API</a> 与手柄通信。</p>
<h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><p>完整代码查看：<a href="https://github.com/Sadness96/GamepadController">GamepadController</a><br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 从Windows的Xbox控制器接收输入</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> https://docs.microsoft.com/en-us/windows/win32/xinput/getting-started-with-xinput</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">XInputHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 是否连接控制器</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> isGetJoystick = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 连接到的控制器</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> Controller controller;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 控制器状态捕获计时器</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> Timer _timer;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 当前按键状态</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 用于判断两次按键差异</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> GamepadButtonFlags ButtonsData;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> LT 按键状态</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 用于判断两次按键差异</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">byte</span> LeftTriggerData;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> RT 按键状态</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 用于判断两次按键差异</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">byte</span> RightTriggerData;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 左摇杆 X 坐标状态</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 用于判断两次摇杆坐标差异</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">short</span> LeftThumbXData;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 左摇杆 Y 坐标状态</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 用于判断两次摇杆坐标差异</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">short</span> LeftThumbYData;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 右摇杆 X 坐标状态</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 用于判断两次摇杆坐标差异</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">short</span> RightThumbXData;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 右摇杆 Y 坐标状态</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 用于判断两次摇杆坐标差异</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">short</span> RightThumbYData;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 按钮变化事件</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;GamepadButtonFlags&gt; ButtonsChange;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> LT 按键变化事件</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;<span class="built_in">byte</span>&gt; LeftTriggerChange;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> LT 按键变化事件</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;<span class="built_in">byte</span>&gt; RightTriggerChange;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 左摇杆 X 变化事件</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;<span class="built_in">short</span>&gt; LeftThumbXChange;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 左摇杆 Y 变化事件</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;<span class="built_in">short</span>&gt; LeftThumbYChange;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 右摇杆 X 变化事件</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;<span class="built_in">short</span>&gt; RightThumbXChange;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 右摇杆 Y 变化事件</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action&lt;<span class="built_in">short</span>&gt; RightThumbYChange;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 连接控制器</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">ConnectGamepad</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isGetJoystick &amp;&amp; _timer == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            controller = <span class="keyword">new</span> Controller(UserIndex.One);</span><br><span class="line">            <span class="keyword">if</span> (controller != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                isGetJoystick = <span class="literal">true</span>;</span><br><span class="line">                _timer = <span class="keyword">new</span> Timer(obj =&gt; Update());</span><br><span class="line">                _timer.Change(<span class="number">0</span>, <span class="number">1000</span> / <span class="number">60</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isGetJoystick;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 断开控制器</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BreakOffGamepad</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_timer != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            _timer.Dispose();</span><br><span class="line">            _timer = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isGetJoystick)</span><br><span class="line">        &#123;</span><br><span class="line">            isGetJoystick = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 捕获控制器数据</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="meta">#<span class="meta-keyword">region</span> 其他功能</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span>/ 获取电池电量和电池类型</span></span><br><span class="line">            <span class="comment">//var vGetBatteryInformation = controller.GetBatteryInformation(BatteryDeviceType.Gamepad);</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span>/ 获取功能按钮和震动马达信息(1)</span></span><br><span class="line">            <span class="comment">//var vGetCapabilities = controller.GetCapabilities(DeviceQueryType.Any);</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span>/ 获取功能按钮和震动马达信息(2) </span></span><br><span class="line">            <span class="comment">//Capabilities vCapabilities;</span></span><br><span class="line">            <span class="comment">//var vIsGetCapabilities = controller.GetCapabilities(DeviceQueryType.Any, out vCapabilities);</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span>/ 获取按键信息</span></span><br><span class="line">            <span class="comment">//Keystroke vKeystroke;</span></span><br><span class="line">            <span class="comment">//var vGetKeystroke = controller.GetKeystroke(DeviceQueryType.Any, out vKeystroke);</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span>/ 获取状态(1)</span></span><br><span class="line">            <span class="comment">//var vGetState = controller.GetState();</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span>/ 获取状态(2)</span></span><br><span class="line">            <span class="comment">//State vState;</span></span><br><span class="line">            <span class="comment">//var vIsGetState = controller.GetState(out vState);</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span>/ 设置震动马达</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span>/var vVibration = vGetCapabilities.Vibration;</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span>/var vSetVibration = controller.SetVibration(vGetCapabilities.Vibration);</span></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取状态</span></span><br><span class="line">            <span class="keyword">var</span> vGetState = controller.GetState();</span><br><span class="line">            <span class="comment">// 按钮</span></span><br><span class="line">            <span class="keyword">var</span> vButtons = vGetState.Gamepad.Buttons;</span><br><span class="line">            <span class="keyword">if</span> (ButtonsData != vButtons)</span><br><span class="line">            &#123;</span><br><span class="line">                ButtonsData = vButtons;</span><br><span class="line">                ButtonsChange?.Invoke(ButtonsData);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// LT 按键 0-255</span></span><br><span class="line">            <span class="keyword">var</span> vLeftTrigger = vGetState.Gamepad.LeftTrigger;</span><br><span class="line">            <span class="keyword">if</span> (LeftTriggerData != vLeftTrigger)</span><br><span class="line">            &#123;</span><br><span class="line">                LeftTriggerData = vLeftTrigger;</span><br><span class="line">                LeftTriggerChange?.Invoke(LeftTriggerData);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// RT 按键 0-255</span></span><br><span class="line">            <span class="keyword">var</span> vRightTrigger = vGetState.Gamepad.RightTrigger;</span><br><span class="line">            <span class="keyword">if</span> (RightTriggerData != vRightTrigger)</span><br><span class="line">            &#123;</span><br><span class="line">                RightTriggerData = vRightTrigger;</span><br><span class="line">                RightTriggerChange?.Invoke(RightTriggerData);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 左摇杆 X</span></span><br><span class="line">            <span class="keyword">var</span> vLeftThumbX = vGetState.Gamepad.LeftThumbX;</span><br><span class="line">            <span class="keyword">if</span> (!LeftThumbXData.Equals(vLeftThumbX))</span><br><span class="line">            &#123;</span><br><span class="line">                LeftThumbXData = vLeftThumbX;</span><br><span class="line">                LeftThumbXChange?.Invoke(LeftThumbXData);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 左摇杆 Y</span></span><br><span class="line">            <span class="keyword">var</span> vLeftThumbY = vGetState.Gamepad.LeftThumbY;</span><br><span class="line">            <span class="keyword">if</span> (!LeftThumbYData.Equals(vLeftThumbY))</span><br><span class="line">            &#123;</span><br><span class="line">                LeftThumbYData = vLeftThumbY;</span><br><span class="line">                LeftThumbYChange?.Invoke(LeftThumbYData);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 右摇杆 X</span></span><br><span class="line">            <span class="keyword">var</span> vRightThumbX = vGetState.Gamepad.RightThumbX;</span><br><span class="line">            <span class="keyword">if</span> (!RightThumbXData.Equals(vRightThumbX))</span><br><span class="line">            &#123;</span><br><span class="line">                RightThumbXData = vRightThumbX;</span><br><span class="line">                RightThumbXChange?.Invoke(RightThumbXData);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 右摇杆 Y</span></span><br><span class="line">            <span class="keyword">var</span> vRightThumbY = vGetState.Gamepad.RightThumbY;</span><br><span class="line">            <span class="keyword">if</span> (!RightThumbYData.Equals(vRightThumbY))</span><br><span class="line">            &#123;</span><br><span class="line">                RightThumbYData = vRightThumbY;</span><br><span class="line">                RightThumbYChange?.Invoke(RightThumbYData);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            BreakOffGamepad();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="游戏演示"><a href="#游戏演示" class="headerlink" title="游戏演示"></a>游戏演示</h3><p><img src="https://sadness96.github.io/images/blog/csharp-XInput/CupheadRecord.gif"/></p>
]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>helper</tag>
        <tag>wpf</tag>
      </tags>
  </entry>
  <entry>
    <title>数据分析-航空公司</title>
    <url>/blog/2019/08/20/data-AirlineCompany/</url>
    <content><![CDATA[<h3 id="航空公司数据分析"><a href="#航空公司数据分析" class="headerlink" title="航空公司数据分析"></a>航空公司数据分析</h3><span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>为便于组织运输生产，每个航班都按照一定的规律编有不同的号码以便于区别和管理，这种号码称为航班号。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>航班号编排方式参考 2004 年中国民用航空局发布政府公文：<a href="http://www.caac.gov.cn/XXGK/XXGK/ZFGW/201601/t20160122_27543.html">关于印发《中国民航航班号分配和使用方案》的通知</a></p>
<h3 id="航班号组成"><a href="#航班号组成" class="headerlink" title="航班号组成"></a>航班号组成</h3><p>航空公司代码由民航局规定发布，包含 <a href="https://www.iata.org/">IATA</a> 发布的<a href="https://baike.baidu.com/item/%E4%BA%8C%E5%AD%97%E7%A0%81/8016030?fr=aladdin">二字码</a>和 <a href="https://www.icao.int/Pages/default.aspx">ICAO</a> 发布的<a href="https://baike.baidu.com/item/%E4%B8%89%E5%AD%97%E4%BB%A3%E7%A0%81/19936463?fr=aladdin">三字码</a>，航班号使用的是二字码加四或三位阿拉伯数字组成(不同的设备可能使用不同的标准)，还有各个航空公司向民航局自己登记的呼号，用于无线电通讯中使用的代号。</p>
<h3 id="爬虫爬取携程网航空公司二字码LOGO"><a href="#爬虫爬取携程网航空公司二字码LOGO" class="headerlink" title="爬虫爬取携程网航空公司二字码LOGO"></a>爬虫爬取携程网航空公司二字码LOGO</h3><h4 id="爬虫地址"><a href="#爬虫地址" class="headerlink" title="爬虫地址"></a>爬虫地址</h4><ol>
<li>携程旅行 32x32 864个有效图标<br> <a href="http://pic.c-ctrip.com/AssetCatalog/airline/32/MU.png">http://pic.c-ctrip.com/AssetCatalog/airline/32/MU.png</a></li>
<li>同程旅行 SVG 66个有效图标<br> <a href="https://m.elongstatic.com/flight/configmng/prod/airline/logo/MU.svg">https://m.elongstatic.com/flight/configmng/prod/airline/logo/MU.svg</a></li>
<li>飞友科技（字母小写） 50x50 313个有效图标<br> <a href="https://static.variflight.com/assets/image/aircorp/mu.png">https://static.variflight.com/assets/image/aircorp/mu.png</a></li>
</ol>
<h4 id="爬虫代码"><a href="#爬虫代码" class="headerlink" title="爬虫代码"></a>爬虫代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _*_coding:utf-8_*_</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetImage</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url</span>):</span></span><br><span class="line">        self.url = url</span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        self.dir_path = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">        self.path = self.dir_path+<span class="string">&#x27;/imgs&#x27;</span></span><br><span class="line">        isExists = os.path.exists(self.dir_path+<span class="string">&#x27;/imgs&#x27;</span>)</span><br><span class="line">        <span class="comment"># 创建目录</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isExists:</span><br><span class="line">            os.makedirs(self.path)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">self, url</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res = requests.get(url, headers=self.headers)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(url+<span class="string">&#x27;下载失败,原因:&#x27;</span>+e.args)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span>(<span class="params">self, res_img, file_name</span>):</span></span><br><span class="line">        <span class="keyword">if</span> res_img:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(res_img.content)</span><br><span class="line">            <span class="built_in">print</span>(url+<span class="string">&#x27;下载成功&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 下载图片</span></span><br><span class="line">        res_img = self.download(self.url)</span><br><span class="line">        name = self.url.strip().split(<span class="string">&#x27;/&#x27;</span>).pop()</span><br><span class="line">        file_name = self.path+<span class="string">&#x27;/&#x27;</span>+name</span><br><span class="line">        <span class="comment"># 保存</span></span><br><span class="line">        self.save(res_img, file_name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url_list = []</span><br><span class="line">    Letter = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;L&#x27;</span>,</span><br><span class="line">                     <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;0&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> Letter:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> Letter:</span><br><span class="line">            url_list.append(</span><br><span class="line">                <span class="string">&quot;http://pic.c-ctrip.com/AssetCatalog/airline/32/&quot;</span> + i + j + <span class="string">&quot;.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">        <span class="built_in">print</span>(url)</span><br><span class="line">        text = GetImage(url)</span><br><span class="line">        text.run()</span><br></pre></td></tr></table></figure>
<h3 id="航空公司信息查询"><a href="#航空公司信息查询" class="headerlink" title="航空公司信息查询"></a>航空公司信息查询</h3><p>下载：<a href="https://raw.githubusercontent.com/Sadness96/sadness96.github.io/master/file/data-AirlineCompany/航空公司信息.xlsx">航空公司信息.xlsx</a></p>
<iframe src="https://view.officeapps.live.com/op/view.aspx?src=https://raw.githubusercontent.com/Sadness96/sadness96.github.io/master/file/data-AirlineCompany/航空公司信息.xlsx" style="width:100%; height:1500px;" frameborder="0"></iframe>]]></content>
      <categories>
        <category>Data</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>data</tag>
        <tag>aviation</tag>
      </tags>
  </entry>
  <entry>
    <title>数据分析-身份证号码</title>
    <url>/blog/2017/08/01/data-IdNumber/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/data-IdNumber/IDLogo.png"/></p>
<span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><style>
table {
    width: 490px;
}
</style>

<table>
<thead>
<tr>
<th>XX</th>
<th>XX</th>
<th>XX</th>
<th>XXXX</th>
<th>XX</th>
<th>XX</th>
<th>XXX</th>
<th>X</th>
</tr>
</thead>
<tbody>
<tr>
<td>省</td>
<td>市</td>
<td>区(县)</td>
<td>出生年</td>
<td>月</td>
<td>日</td>
<td>顺序码</td>
<td>校验码</td>
</tr>
</tbody>
</table>
<p>*现身份证由 <a href="http://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=080D6FBF2BB468F9007657F26D60013E">GB 11643-1999</a> 标准规定的 18 位数字或字母(仅结尾X)组成。<br>1.前六位表示为常驻户口所在地的行政区划代码，由 <a href="http://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=C9C488FD717AFDCD52157F41C3302C6D">GB/T 2260-2007</a> 标准执行。<br>2.第七位至第十四位为出生年、月、日。<br>3.第十五位至第十七位为顺序码(其中包含派出所代码，第十七位也用来表示性别:奇数表示男性，偶数表示女性)<br>4.第18位数字是校检码：用来检验身份证的正确性。校检码可以是0~10的数字，10用X表示。</p>
<h3 id="空白正反面"><a href="#空白正反面" class="headerlink" title="空白正反面"></a>空白正反面</h3><p><img src="https://sadness96.github.io/images/blog/data-IdNumber/Clip1.bmp"/></p>
<p><img src="https://sadness96.github.io/images/blog/data-IdNumber/Clip2.bmp"/></p>
<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><h4 id="正则表达式校验"><a href="#正则表达式校验" class="headerlink" title="正则表达式校验"></a>正则表达式校验</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 效验身份证号码</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strIDNumber&quot;&gt;</span>身份证号码<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>效验通过返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">CheckIDNumber</span>(<span class="params"><span class="built_in">string</span> strIDNumber</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (strIDNumber.Length == <span class="number">15</span> &amp;&amp; CheckIDCard15(strIDNumber))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (strIDNumber.Length == <span class="number">18</span> &amp;&amp; CheckIDCard18(strIDNumber))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 15位身份证号验证</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;idNumber&quot;&gt;</span>身份证号<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>效验通过返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">CheckIDCard15</span>(<span class="params"><span class="built_in">string</span> idNumber</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">long</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">long</span>.TryParse(idNumber, <span class="keyword">out</span> n) == <span class="literal">false</span> || n &lt; Math.Pow(<span class="number">10</span>, <span class="number">14</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//数字验证  </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> address = <span class="string">&quot;11x22x35x44x53x12x23x36x45x54x13x31x37x46x61x14x32x41x50x62x15x33x42x51x63x21x34x43x52x64x65x71x81x82x91&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (address.IndexOf(idNumber.Remove(<span class="number">2</span>)) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//省份验证  </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> birth = idNumber.Substring(<span class="number">6</span>, <span class="number">6</span>).Insert(<span class="number">4</span>, <span class="string">&quot;-&quot;</span>).Insert(<span class="number">2</span>, <span class="string">&quot;-&quot;</span>);</span><br><span class="line">    DateTime time = <span class="keyword">new</span> DateTime();</span><br><span class="line">    <span class="keyword">if</span> (DateTime.TryParse(birth, <span class="keyword">out</span> time) == <span class="literal">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//生日验证  </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//符合15位身份证标准  </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>  </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 18位身份证号码验证  </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span>  </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;idNumber&quot;&gt;</span>身份证号<span class="doctag">&lt;/param&gt;</span>  </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>效验通过返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span>  </span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">CheckIDCard18</span>(<span class="params"><span class="built_in">string</span> idNumber</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">long</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">long</span>.TryParse(idNumber.Remove(<span class="number">17</span>), <span class="keyword">out</span> n) == <span class="literal">false</span> || n &lt; Math.Pow(<span class="number">10</span>, <span class="number">16</span>) || <span class="built_in">long</span>.TryParse(idNumber.Replace(<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;0&#x27;</span>).Replace(<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), <span class="keyword">out</span> n) == <span class="literal">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//数字验证    </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> address = <span class="string">&quot;11x22x35x44x53x12x23x36x45x54x13x31x37x46x61x14x32x41x50x62x15x33x42x51x63x21x34x43x52x64x65x71x81x82x91&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (address.IndexOf(idNumber.Remove(<span class="number">2</span>)) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//省份验证    </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> birth = idNumber.Substring(<span class="number">6</span>, <span class="number">8</span>).Insert(<span class="number">6</span>, <span class="string">&quot;-&quot;</span>).Insert(<span class="number">4</span>, <span class="string">&quot;-&quot;</span>);</span><br><span class="line">    DateTime time = <span class="keyword">new</span> DateTime();</span><br><span class="line">    <span class="keyword">if</span> (DateTime.TryParse(birth, <span class="keyword">out</span> time) == <span class="literal">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//生日验证    </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span>[] arrVarifyCode = (<span class="string">&quot;1,0,x,9,8,7,6,5,4,3,2&quot;</span>).Split(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">    <span class="built_in">string</span>[] Wi = (<span class="string">&quot;7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2&quot;</span>).Split(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">    <span class="built_in">char</span>[] Ai = idNumber.Remove(<span class="number">17</span>).ToCharArray();</span><br><span class="line">    <span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">17</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += <span class="built_in">int</span>.Parse(Wi[i]) * <span class="built_in">int</span>.Parse(Ai[i].ToString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> y = <span class="number">-1</span>;</span><br><span class="line">    Math.DivRem(sum, <span class="number">11</span>, <span class="keyword">out</span> y);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Y的理论值: &quot;</span> + y);</span><br><span class="line">    <span class="keyword">if</span> (arrVarifyCode[y] != idNumber.Substring(<span class="number">17</span>, <span class="number">1</span>).ToLower())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//校验码验证    </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//符合GB11643-1999标准    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="补全身份证号"><a href="#补全身份证号" class="headerlink" title="补全身份证号"></a>补全身份证号</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="built_in">string</span> SavePath = <span class="string">@&quot;C:\test.txt&quot;</span>;</span><br><span class="line">        <span class="comment">//在很多场景会获得不完整身份证号，例如火车票或APP上的社保信息</span></span><br><span class="line">        <span class="comment">//通过校验的方式推算出正确的身份证号范围，至少输入校验位</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;输入18位身份证号码（至少输入校验位）不知道的用*代替&quot;</span>);</span><br><span class="line">        <span class="built_in">string</span> strIDNumber = Console.ReadLine();</span><br><span class="line">        List&lt;<span class="built_in">int</span>&gt; listSubscript = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">        List&lt;<span class="built_in">char</span>&gt; listChar = strIDNumber.ToList();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; listChar.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (listChar[i].Equals(<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                listSubscript.Add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt;= <span class="built_in">int</span>.Parse(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;9&#x27;</span>, listSubscript.Count)); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> vString = i.ToString().PadLeft(listSubscript.Count, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; listSubscript.Count; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                listChar[listSubscript[j]] = <span class="built_in">char</span>.Parse(vString.Substring(j, <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> vIDNumber = <span class="built_in">string</span>.Join(<span class="string">&quot;&quot;</span>, listChar.ToArray());</span><br><span class="line">            <span class="keyword">if</span> (CheckCorrectnessHelper.CheckIDNumber(vIDNumber))</span><br><span class="line">            &#123;</span><br><span class="line">                Console.ForegroundColor = ConsoleColor.Green;</span><br><span class="line">                AdoptIDNumber.Add(vIDNumber);</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;生成身份证号：<span class="subst">&#123;vIDNumber&#125;</span>&quot;</span>);</span><br><span class="line">                TXTHelper.AppendFile(SavePath, vIDNumber, <span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//Console.ForegroundColor = ConsoleColor.Red;</span></span><br><span class="line">                <span class="comment">//Console.WriteLine($&quot;生成身份证号：&#123;vIDNumber&#125;&quot;);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 测试通过的全局保存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">List</span>&lt;<span class="title">string</span>&gt; AdoptIDNumber</span> = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="行政区划查询"><a href="#行政区划查询" class="headerlink" title="行政区划查询"></a>行政区划查询</h3><p>下载：<a href="https://raw.githubusercontent.com/Sadness96/sadness96.github.io/master/file/data-IdNumber/areacodebase.xlsb">areacodebase.xlsb</a></p>
<iframe src="https://view.officeapps.live.com/op/view.aspx?src=https://raw.githubusercontent.com/Sadness96/sadness96.github.io/master/file/data-IdNumber/areacodebase.xlsb" style="width:100%; height:1500px;" frameborder="0"></iframe>]]></content>
      <categories>
        <category>Data</category>
      </categories>
      <tags>
        <tag>data</tag>
        <tag>idnumber</tag>
      </tags>
  </entry>
  <entry>
    <title>数据分析-手机号</title>
    <url>/blog/2017/08/01/data-PhoneNumber/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/data-PhoneNumber/PhoneLogo.png"/></p>
<span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><style>
table {
    width: 300px;
}
</style>

<table>
<thead>
<tr>
<th>+86</th>
<th>XXX - XXXX</th>
<th>XXXX</th>
</tr>
</thead>
<tbody>
<tr>
<td>中国</td>
<td>运营商及归属地</td>
<td>随机号码</td>
</tr>
</tbody>
</table>
<h3 id="正则表达式校验"><a href="#正则表达式校验" class="headerlink" title="正则表达式校验"></a>正则表达式校验</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 效验中国大陆手机号码</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strPhoneNumber&quot;&gt;</span>中国大陆手机号码<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>效验通过返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">CheckPhoneNumber</span>(<span class="params"><span class="built_in">string</span> strPhoneNumber</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//+86替换成空(只考虑中国大陆手机号)</span></span><br><span class="line">        <span class="keyword">if</span> (strPhoneNumber.Length == <span class="number">14</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            strPhoneNumber.Replace(<span class="string">&quot;+86&quot;</span>, <span class="built_in">string</span>.Empty);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//中国电信正则表达式匹配</span></span><br><span class="line">        <span class="built_in">string</span> strRegexChinaTelecom = <span class="string">@&quot;^1[3578][01379]\d&#123;8&#125;$&quot;</span>;</span><br><span class="line">        Regex regexChinaTelecom = <span class="keyword">new</span> Regex(strRegexChinaTelecom);</span><br><span class="line">        <span class="comment">//中国移动正则表达式匹配</span></span><br><span class="line">        <span class="built_in">string</span> strRegexChinaMobile = <span class="string">@&quot;^(134[012345678]\d&#123;7&#125;|1[34578][012356789]\d&#123;8&#125;)$&quot;</span>;</span><br><span class="line">        Regex regexChinaMobile = <span class="keyword">new</span> Regex(strRegexChinaMobile);</span><br><span class="line">        <span class="comment">//中国联通正则表达式匹配</span></span><br><span class="line">        <span class="built_in">string</span> strRegexChinaUnicom = <span class="string">@&quot;^1[34578][01256]\d&#123;8&#125;$&quot;</span>;</span><br><span class="line">        Regex regexChinaUnicom = <span class="keyword">new</span> Regex(strRegexChinaUnicom);</span><br><span class="line">        <span class="comment">//验证手机号</span></span><br><span class="line">        <span class="keyword">if</span> (regexChinaTelecom.IsMatch(strPhoneNumber) || regexChinaMobile.IsMatch(strPhoneNumber) || regexChinaUnicom.IsMatch(strPhoneNumber))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="归属地查询"><a href="#归属地查询" class="headerlink" title="归属地查询"></a>归属地查询</h3><p>下载：<a href="https://raw.githubusercontent.com/Sadness96/sadness96.github.io/master/file/data-PhoneNumber/mobile.xlsb">mobile.xlsb</a></p>
<iframe src="https://view.officeapps.live.com/op/view.aspx?src=https://raw.githubusercontent.com/Sadness96/sadness96.github.io/master/file/data-PhoneNumber/mobile.xlsb" style="width:100%; height:1500px;" frameborder="0"></iframe>]]></content>
      <categories>
        <category>Data</category>
      </categories>
      <tags>
        <tag>data</tag>
        <tag>phonenumber</tag>
      </tags>
  </entry>
  <entry>
    <title>Html 中嵌入 Office 文件</title>
    <url>/blog/2017/08/05/html-HtmlEmbed/</url>
    <content><![CDATA[<h3 id="Html-静态网页中嵌入-Word、Excel、PPT、PDF-文件"><a href="#Html-静态网页中嵌入-Word、Excel、PPT、PDF-文件" class="headerlink" title="Html 静态网页中嵌入 Word、Excel、PPT、PDF 文件"></a>Html 静态网页中嵌入 Word、Excel、PPT、PDF 文件</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>整理了两篇博客文章，想要把两个 Excel 文件嵌入到网页中显示，遇到了一点小麻烦。<br>由于博客文件比较精简，尽量避开项目中调用大量脚本。<br><a href="https://sadness96.github.io/blog/2017/08/01/data-PhoneNumber/">数据分析-手机号</a><br><a href="https://sadness96.github.io/blog/2017/08/01/data-IdNumber/">数据分析-身份证号码</a></p>
<h4 id="Office-Web-Apps-Viewer"><a href="#Office-Web-Apps-Viewer" class="headerlink" title="Office Web Apps Viewer"></a>Office Web Apps Viewer</h4><p>使用微软提供的 <a href="https://docs.microsoft.com/zh-cn/office365/servicedescriptions/office-online-service-description/office-online-service-description">Office Online</a> 实现 Office 文档的在线查看</p>
<h5 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">http://view.officeapps.live.com/op/view.aspx?src=[OFFICE_FILE_URL]</span><br></pre></td></tr></table></figure>
<h5 id="嵌入方法"><a href="#嵌入方法" class="headerlink" title="嵌入方法"></a>嵌入方法</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;http://view.officeapps.live.com/op/view.aspx?src=[OFFICE_FILE_URL]&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:100%; height:1500px;&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h5><p>Microsoft 限制文件大小 Worder、PPT 文件上限为 10MB，Excel 文件上限为 5MB。<br>由于我保存的 Excel 文件由 MySQL 数据库导出纯文本，没有压缩的空间。<br>解决：Excel 文件另存为 .xlsb 后缀(二进制工作簿要比正常格式大小小得多)</p>
<h4 id="Google-Docs-Viewer"><a href="#Google-Docs-Viewer" class="headerlink" title="Google Docs Viewer"></a>Google Docs Viewer</h4><h5 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://docs.google.com/viewer?url=[OFFICE_FILE_URL]</span><br></pre></td></tr></table></figure>
<h5 id="嵌入方法-1"><a href="#嵌入方法-1" class="headerlink" title="嵌入方法"></a>嵌入方法</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://docs.google.com/viewer?url=[OFFICE_FILE_URL]&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:100%; height:1500px;&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="存在问题-1"><a href="#存在问题-1" class="headerlink" title="存在问题"></a>存在问题</h5><p>国内对于 Google 并不太友好，有时访问可能需要个<a href="https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E4%B8%93%E7%94%A8%E7%BD%91%E7%BB%9C/8747869?fromtitle=VPN&amp;fromid=382304&amp;fr=aladdin">梯子</a></p>
]]></content>
      <categories>
        <category>Html</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>office</tag>
      </tags>
  </entry>
  <entry>
    <title>网页使用 iframe 嵌入部分其他网页</title>
    <url>/blog/2021/01/02/html-IframeEmbed/</url>
    <content><![CDATA[<h3 id="在网页中嵌入其他网页中的一部分"><a href="#在网页中嵌入其他网页中的一部分" class="headerlink" title="在网页中嵌入其他网页中的一部分"></a>在网页中嵌入其他网页中的一部分</h3><span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://www.w3school.com.cn/tags/tag_iframe.asp">iframe</a> 元素会创建包含另外一个文档的内联框架，平时使用不多，但是也确实蛮好用的，比如在<a href="https://sadness96.github.io/blog/about/">博客关于页面</a>中嵌入了一个<a href="https://music.163.com/#/outchain/2/28445602/">网易云音乐的播放插件</a>，但是有时在嵌入其他页面时直想截取部分嵌入，再此解决。</p>
<h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><h4 id="最简单的加载"><a href="#最简单的加载" class="headerlink" title="最简单的加载"></a>最简单的加载</h4><p>加载一个北京的天气预报，伴随着一堆广告与热搜。</p>
<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://www.baidu.com/s?wd=天气预报&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400px&quot;</span> <span class="attr">sframeborder</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><iframe src="https://www.baidu.com/s?wd=天气预报" width="100%" height="400px" sframeborder="0"></iframe>

<h4 id="仅截取天气预报地图部分并嵌入在网页中"><a href="#仅截取天气预报地图部分并嵌入在网页中" class="headerlink" title="仅截取天气预报地图部分并嵌入在网页中"></a>仅截取天气预报地图部分并嵌入在网页中</h4><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><ol>
<li>加载一个 iframe 标签，设置网页长度宽度拉伸网页确保样式符合预期，重要内容无广告遮挡。<br> <img src="https://sadness96.github.io/images/blog/html-IframeEmbed/iframe1.jpg"/></li>
<li>iframe 外层添加 div 标签，用于移动 iframe 嵌入网页的坐标，宽度高度为实际选取内容宽度高度，参考 <a href="https://www.w3school.com.cn/cssref/pr_margin.asp">CSS margin 属性</a> 设置偏移量</li>
<li>div 外层在添加一层 div 标签作为遮罩层，用于遮罩偏移量产生的多余信息，宽度高度为实际选取内容宽度高度，设置边框 0 与溢出隐藏 <a href="https://www.w3school.com.cn/css/pr_pos_overflow.asp">CSS overflow 属性</a><br> <img src="https://sadness96.github.io/images/blog/html-IframeEmbed/iframe2.jpg"/></li>
</ol>
<h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width:540px;height:422px;overflow:hidden;border:0px;&quot;</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width:720px;height:440px;margin:-238px 0px 0px -150px;&quot;</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://www.baidu.com/s?wd=天气预报&quot;</span> <span class="attr">height</span>=<span class="string">&quot;600&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1280&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><div style="width:540px;height:424px;overflow:hidden;border:0px;"><br>  <div style="width:720px;height:440px;margin:-238px 0px 0px -150px;"><br>   <iframe src="https://www.baidu.com/s?wd=天气预报" height="610" width="1280" frameborder="0"></iframe><br>  </div><br></div>

<h4 id="其他示例-嵌入可交互网页"><a href="#其他示例-嵌入可交互网页" class="headerlink" title="其他示例(嵌入可交互网页)"></a>其他示例(嵌入可交互网页)</h4><p>另一篇博客 <a href="https://sadness96.github.io/blog/2021/01/02/repair-Luminox8821/">Luminox 8821 更换电池</a> 中嵌入日本官网(瑞士官网仅有文档美国官网被跳转成某东了)中的可交互页面</p>
<h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width:100%;height:820px;overflow:hidden;border:0px;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width:100%;height:820px;margin:-152px 0px 0px 0px;&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://luminox.jp/watch-collection/land/recon-point-man-8820-series-ref8821-km/&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">height</span>=<span class="string">&quot;900&quot;</span> <span class="attr">width</span>=<span class="string">&quot;767&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h5><div style="width:100%;height:820px;overflow:hidden;border:0px;"><br>  <div style="width:100%;height:820px;margin:-152px 0px 0px 0px;"><br>   <iframe src="https://luminox.jp/watch-collection/land/recon-point-man-8820-series-ref8821-km/" scrolling="no" height="900" width="767" frameborder="0"></iframe><br>  </div><br></div>]]></content>
      <categories>
        <category>Html</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>iframe</tag>
      </tags>
  </entry>
  <entry>
    <title>网页嵌入 Bilibili 视频</title>
    <url>/blog/2022/08/30/html-IframeEmbedBilibili/</url>
    <content><![CDATA[<h3 id="网页使用-iframe-嵌入-Bilibili-视频"><a href="#网页使用-iframe-嵌入-Bilibili-视频" class="headerlink" title="网页使用 iframe 嵌入 Bilibili 视频"></a>网页使用 iframe 嵌入 Bilibili 视频</h3><span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://sadness96.github.io/blog/2021/01/02/html-IframeEmbed/">网页使用 iframe 嵌入部分其他网页</a><br>嵌入 <a href="https://www.bilibili.com">Bilibili</a> 视频需要使用增加额外的宽高才能显示，并且有一些参数可以配置。通过视频下的 转发 -&gt; 嵌入代码 可以获取到嵌入链接，修改参数后嵌入网页。</p>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><table>
<thead>
<tr>
<th>key</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>aid</td>
<td>视频ID</td>
</tr>
<tr>
<td>bvid</td>
<td>没什么用</td>
</tr>
<tr>
<td>cid</td>
<td>没什么用</td>
</tr>
<tr>
<td>page</td>
<td>第几个视频, 起始下标为 1 (默认值也是为1)</td>
</tr>
<tr>
<td>as_wide</td>
<td>是否宽屏 1: 宽屏, 0: 小屏</td>
</tr>
<tr>
<td>high_quality</td>
<td>是否高清 1: 高清, 0: 最低视频质量(默认)</td>
</tr>
<tr>
<td>danmaku</td>
<td>是否开启弹幕 1: 开启(默认), 0: 关闭</td>
</tr>
<tr>
<td>allowfullscreen</td>
<td>是否全屏 true：全屏</td>
</tr>
</tbody>
</table>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://player.bilibili.com/player.html?aid=706&amp;page=1&amp;high_quality=1&amp;danmaku=0&amp;allowfullscreen=true&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500px&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><iframe src="https://player.bilibili.com/player.html?aid=706&page=1&high_quality=1&danmaku=0&allowfullscreen=true" width="100%" height="500px" scrolling="no" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>]]></content>
      <categories>
        <category>Html</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>iframe</tag>
        <tag>bilibili</tag>
      </tags>
  </entry>
  <entry>
    <title>VR 全景图展示</title>
    <url>/blog/2022/03/16/html-PhotoSphereViewer/</url>
    <content><![CDATA[<h3 id="通过-Photo-Sphere-Viewer-展示全景图"><a href="#通过-Photo-Sphere-Viewer-展示全景图" class="headerlink" title="通过 Photo Sphere Viewer 展示全景图"></a>通过 Photo Sphere Viewer 展示全景图</h3><span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>VR 图片广泛应用于房产、车辆、景区等展示推销和宣传作用，介于 360 全景相机较为昂贵，收费模式竟然按平米收取渲染费，国内这些厂家就很离谱。所以先以最低成本尝试实现一个 Demo，以后逐步完善成一个成品。</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="下楼拍一组照片"><a href="#下楼拍一组照片" class="headerlink" title="下楼拍一组照片"></a>下楼拍一组照片</h4><p>下楼拍摄一组照片，全景相机的原理也是多个相机同时拍摄后拼接到一起，但是全景相机内使用的应该是鱼眼镜头，拥有超大广角，减少镜头数量就可以减少成本，如果使用手机拍摄就需要多拍一些了，把周身一圈 360 度拍满。<br><img src="https://sadness96.github.io/images/blog/html-PhotoSphereViewer/PhoneCamera.jpg"/></p>
<h4 id="拼接图像"><a href="#拼接图像" class="headerlink" title="拼接图像"></a>拼接图像</h4><p>图像的拼接流程大概是：提取特征点 -&gt; 特征点匹配 -&gt; 对图片进行圆柱投影 -&gt; 图片拼接 -&gt; 色差矫正。<br>不过这里才不会实现这些内容呢，大部分软件都是集成了 <a href="https://opencv.org/">OpenCV</a> 的 <a href="https://docs.opencv.org/4.x/d8/d19/tutorial_stitcher.html">Stitching</a> 库。<br>可以使用以下软件：</p>
<ol>
<li><a href="http://matthewalunbrown.com/autostitch/autostitch.html">AutoStitch</a> （推荐）</li>
<li><a href="https://ptgui.com/">PTGui</a> （效果应该更好，但是付费）</li>
<li><a href="https://www.adobe.com/">Photoshop</a> Photomerge (图片过多时效果不尽人意)</li>
<li><a href="http://hugin.sourceforge.net/">Hugin</a> （不好用）</li>
</ol>
<p>以 <a href="http://matthewalunbrown.com/autostitch/autostitch.html">AutoStitch</a> 举例，简单的添加所有图片后等待即可获得拼接后图片<br><img src="https://sadness96.github.io/images/blog/html-PhotoSphereViewer/AutoStitch.jpg"/></p>
<p><img src="https://sadness96.github.io/images/blog/html-PhotoSphereViewer/pano.jpg"/></p>
<h4 id="使用-PS-修复缺失部分（可选）"><a href="#使用-PS-修复缺失部分（可选）" class="headerlink" title="使用 PS 修复缺失部分（可选）"></a>使用 PS 修复缺失部分（可选）</h4><p>由于手动拍摄难免出现缝隙，或者上下存在黑洞，就算使用全景相机架着三脚架拍摄，也难免把三脚架拍摄在内，可通过 PS 的 3D 功能修复。<br>PS 打开全景图片 -&gt; 3D -&gt; 球面全景 -&gt; 通过选中的图层新建全景图图层 -&gt; 拖拽到瑕疵的区域覆盖或修复（就像普通的P图一样） -&gt; 导出全景图（PS会把内容自动抻展为平面）<br><img src="https://sadness96.github.io/images/blog/html-PhotoSphereViewer/PSRestore.jpg"/></p>
<h4 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h4><p>使用 <a href="https://photo-sphere-viewer.js.org/">Photo Sphere Viewer</a> 库渲染</p>
<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- for optimal display on high DPI devices --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/photo-sphere-viewer@4/dist/photo-sphere-viewer.min.css&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/three/build/three.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/uevent@2/browser.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/photo-sphere-viewer@4/dist/photo-sphere-viewer.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;viewer&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100vw; height: 100vh;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> viewer = <span class="keyword">new</span> PhotoSphereViewer.Viewer(&#123;</span></span><br><span class="line"><span class="javascript">      container: <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#viewer&#x27;</span>),</span></span><br><span class="line"><span class="javascript">      panorama: <span class="string">&#x27;image/pano.jpg&#x27;</span>,</span></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">html</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-tag">body</span>,</span></span><br><span class="line">    #viewer &#123;</span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h5><p><meta name="viewport" content="width=device-width, initial-scale=1.0"></p>
<p><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/photo-sphere-viewer@4/dist/photo-sphere-viewer.min.css"/></p>
<script src="https://cdn.jsdelivr.net/npm/three/build/three.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/uevent@2/browser.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/photo-sphere-viewer@4/dist/photo-sphere-viewer.min.js"></script>
<div id="viewer" style="margin: 0;width: 100%; height: 75vh;"></div>
<script>
    const viewer = new PhotoSphereViewer.Viewer({
        container: document.querySelector('#viewer'),
        panorama: '/images/blog/html-PhotoSphereViewer/pano.jpg',
    });
</script>
]]></content>
      <categories>
        <category>Html</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>vr</tag>
        <tag>stitching</tag>
      </tags>
  </entry>
  <entry>
    <title>Html Video 截图和录像</title>
    <url>/blog/2021/11/26/html-VideoTape/</url>
    <content><![CDATA[<h3 id="Video-视频画面截图与录像"><a href="#Video-视频画面截图与录像" class="headerlink" title="Video 视频画面截图与录像"></a>Video 视频画面截图与录像</h3><span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>项目需要在视频上截图与录像，功能已实现，我在迁移时整理一遍。</p>
<h3 id="演示视频"><a href="#演示视频" class="headerlink" title="演示视频"></a>演示视频</h3><video width="640px" height="360px" crossorigin="anonymous" controls playsinline></video>

<script>
  const startDrawing = () => {
    const video = document.querySelector("video");
    video.src = "../../../../../video/test.mp4";
    video.muted = true;
    video.loop = 'loop';
    video.play();
  };

  window.addEventListener('load', startDrawing);
</script>

<h3 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>视频的一帧图像写入临时的 canvas 中，通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement/toDataURL">toDataURL</a> 方法转换为 Base64 数据，下载 Base64 即可截图。<br>注：toDataURL 方法引用外部文件会报 CORS 跨域错误，需要单独解决 CORS 跨域。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 截图</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Screenshot</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> video = <span class="built_in">document</span>.querySelector(<span class="string">&quot;video&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> imgRecordCanvas = <span class="built_in">document</span>.createElement(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line">  imgRecordCanvas.width = video.videoWidth;</span><br><span class="line">  imgRecordCanvas.height = video.videoHeight;</span><br><span class="line">  imgRecordCanvas.getContext(<span class="string">&quot;2d&quot;</span>).drawImage(</span><br><span class="line">    video,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    imgRecordCanvas.width,</span><br><span class="line">    imgRecordCanvas.height</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">var</span> img_base64 = imgRecordCanvas.toDataURL(<span class="string">&quot;image/png&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> savename = <span class="string">&quot;img_&quot;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">  DownloadBase64ImageFile(img_base64, savename)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下载 Base64 图片</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DownloadBase64ImageFile</span>(<span class="params">content, fileName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> base64ToBlob = <span class="function"><span class="keyword">function</span> (<span class="params">code</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> parts = code.split(<span class="string">&quot;;base64,&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> contentType = parts[<span class="number">0</span>].split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">const</span> raw = <span class="built_in">window</span>.atob(parts[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">const</span> rawLength = raw.length;</span><br><span class="line">  <span class="keyword">const</span> uInt8Array = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(rawLength);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; rawLength; ++i) &#123;</span><br><span class="line">    uInt8Array[i] = raw.charCodeAt(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Blob([uInt8Array], &#123;</span><br><span class="line">      type: contentType,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> aLink = <span class="built_in">document</span>.createElement(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> blob = base64ToBlob(content);</span><br><span class="line">  <span class="keyword">const</span> evt = <span class="built_in">document</span>.createEvent(<span class="string">&quot;HTMLEvents&quot;</span>);</span><br><span class="line">  evt.initEvent(<span class="string">&quot;click&quot;</span>, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">  aLink.download = fileName;</span><br><span class="line">  aLink.href = URL.createObjectURL(blob);</span><br><span class="line">  aLink.click();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h4><button type="button" onclick="Screenshot()">截图</button>

<script>
// 截图
function Screenshot() {
  const video = document.querySelector("video");
  var imgRecordCanvas = document.createElement('canvas');
  imgRecordCanvas.width = video.videoWidth;
  imgRecordCanvas.height = video.videoHeight;
  imgRecordCanvas.getContext("2d").drawImage(
    video,
    0,
    0,
    imgRecordCanvas.width,
    imgRecordCanvas.height
  );
  var img_base64 = imgRecordCanvas.toDataURL("image/png");
  var savename = "img_" + new Date().getTime();
  DownloadBase64ImageFile(img_base64, savename)
}

// 下载 Base64 图片
function DownloadBase64ImageFile(content, fileName) {
  var base64ToBlob = function (code) {
  const parts = code.split(";base64,");
  const contentType = parts[0].split(":")[1];
  const raw = window.atob(parts[1]);
  const rawLength = raw.length;
  const uInt8Array = new Uint8Array(rawLength);
  for (let i = 0; i < rawLength; ++i) {
    uInt8Array[i] = raw.charCodeAt(i);
  }
  return new Blob([uInt8Array], {
      type: contentType,
    });
  };
  const aLink = document.createElement("a");
  const blob = base64ToBlob(content);
  const evt = document.createEvent("HTMLEvents");
  evt.initEvent("click", true, true);
  aLink.download = fileName;
  aLink.href = URL.createObjectURL(blob);
  aLink.click();
}
</script>

<h3 id="录像"><a href="#录像" class="headerlink" title="录像"></a>录像</h3><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><p>视频录制与截图方式差不多，把图像缓存到 canvas 标签，然后通过接口 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MediaRecorder/MediaRecorder">MediaRecorder</a> 录制视频。</p>
<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isVideotape = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> videoRecordCanvas = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> videoCanvasContext = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> videoRecorder = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> videoFrameId = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> videoChunks = [];</span><br><span class="line"><span class="keyword">const</span> video = <span class="built_in">document</span>.querySelector(<span class="string">&quot;video&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> StartVideotape = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;StartVideotape&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> StopVideotape = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;StopVideotape&#x27;</span>);</span><br><span class="line"><span class="comment">// 开始录像</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">VideotapeStart</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  StartVideotape.disabled = <span class="string">&quot;disabled&quot;</span>;</span><br><span class="line">  StopVideotape.disabled = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  isVideotape = <span class="literal">true</span>;</span><br><span class="line">  <span class="comment">// 开始录制</span></span><br><span class="line">  videoRecordCanvas = <span class="built_in">document</span>.createElement(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line">  videoRecordCanvas.width = video.videoWidth;</span><br><span class="line">  videoRecordCanvas.height = video.videoHeight;</span><br><span class="line">  videoCanvasContext = videoRecordCanvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">  videoCanvasContext.fillStyle = <span class="string">&quot;deepskyblue&quot;</span>;</span><br><span class="line">  videoCanvasContext.fillRect(<span class="number">0</span>, <span class="number">0</span>, videoRecordCanvas.videoWidth, videoRecordCanvas.videoHeight);</span><br><span class="line">  <span class="comment">// 创建MediaRecorder，设置媒体参数</span></span><br><span class="line">  <span class="keyword">var</span> frameRate = <span class="number">60</span>;</span><br><span class="line">  <span class="keyword">var</span> stream = videoRecordCanvas.captureStream(frameRate);</span><br><span class="line">  videoRecorder = <span class="keyword">new</span> MediaRecorder(stream, &#123;</span><br><span class="line">    mimeType: <span class="string">&quot;video/webm;codecs=vp8&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 收集录制数据</span></span><br><span class="line">  videoRecorder.ondataavailable = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    videoChunks.push(e.data);</span><br><span class="line">  &#125;;</span><br><span class="line">  videoRecorder.start(<span class="number">10</span>);</span><br><span class="line">  <span class="comment">// 播放视频</span></span><br><span class="line">  DrawFrame();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 播放视频</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DrawFrame</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (videoCanvasContext &amp;&amp; videoRecordCanvas) &#123;</span><br><span class="line">    videoCanvasContext.drawImage(</span><br><span class="line">      video,</span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">      video.videoWidth,</span><br><span class="line">      video.videoHeight</span><br><span class="line">    );</span><br><span class="line">    videoFrameId = requestAnimationFrame(<span class="built_in">this</span>.DrawFrame);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 停止录像</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">VideotapeStop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  StartVideotape.disabled = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  StopVideotape.disabled = <span class="string">&quot;disabled&quot;</span>;</span><br><span class="line">  isVideotape = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 停止录制</span></span><br><span class="line">  videoRecorder.stop();</span><br><span class="line">  cancelAnimationFrame(videoFrameId);</span><br><span class="line">  <span class="comment">// 下载录制内容</span></span><br><span class="line">  <span class="keyword">if</span> (videoChunks.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob(videoChunks);</span><br><span class="line">    <span class="keyword">const</span> url = <span class="built_in">window</span>.URL.createObjectURL(blob);</span><br><span class="line">    <span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    link.href = url;</span><br><span class="line">    link.download = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() + <span class="string">&quot;.mp4&quot;</span>;</span><br><span class="line">    link.style.display = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(link);</span><br><span class="line">    link.click();</span><br><span class="line">    link.remove();</span><br><span class="line">    <span class="keyword">const</span> lenght = videoChunks.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= lenght; i++) &#123;</span><br><span class="line">      videoChunks.pop();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="演示-1"><a href="#演示-1" class="headerlink" title="演示"></a>演示</h4><div><br><button type="button" id="StartVideotape" onclick='VideotapeStart()'>录像</button><br><button type="button" id="StopVideotape" disabled='disabled' onclick='VideotapeStop()'>停止</button><br></div>

<script>
var isVideotape = false;
var videoRecordCanvas = null;
var videoCanvasContext = null;
var videoRecorder = null;
var videoFrameId = null;
var videoChunks = [];
const video = document.querySelector("video");
var StartVideotape = document.getElementById('StartVideotape');
var StopVideotape = document.getElementById('StopVideotape');
// 开始录像
function VideotapeStart() {
  StartVideotape.disabled = "disabled";
  StopVideotape.disabled = "";
  isVideotape = true;
  // 开始录制
  videoRecordCanvas = document.createElement('canvas');
  videoRecordCanvas.width = video.videoWidth;
  videoRecordCanvas.height = video.videoHeight;
  videoCanvasContext = videoRecordCanvas.getContext("2d");
  videoCanvasContext.fillStyle = "deepskyblue";
  videoCanvasContext.fillRect(0, 0, videoRecordCanvas.videoWidth, videoRecordCanvas.videoHeight);
  // 创建MediaRecorder，设置媒体参数
  var frameRate = 60;
  var stream = videoRecordCanvas.captureStream(frameRate);
  videoRecorder = new MediaRecorder(stream, {
    mimeType: "video/webm;codecs=vp8",
  });
  // 收集录制数据
  videoRecorder.ondataavailable = (e) => {
    videoChunks.push(e.data);
  };
  videoRecorder.start(10);
  // 播放视频
  DrawFrame();
}
// 播放视频
function DrawFrame() {
  if (videoCanvasContext && videoRecordCanvas) {
    videoCanvasContext.drawImage(
      video,
      0,
      0,
      video.videoWidth,
      video.videoHeight
    );
    videoFrameId = requestAnimationFrame(this.DrawFrame);
  }
}
// 停止录像
function VideotapeStop() {
  StartVideotape.disabled = "";
  StopVideotape.disabled = "disabled";
  isVideotape = false;
  // 停止录制
  videoRecorder.stop();
  cancelAnimationFrame(videoFrameId);
  // 下载录制内容
  if (videoChunks.length > 0) {
    const blob = new Blob(videoChunks);
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = 'video_' + new Date().getTime() + ".mp4";
    link.style.display = "none";
    document.body.appendChild(link);
    link.click();
    link.remove();
    const lenght = videoChunks.length;
    for (let i = 0; i <= lenght; i++) {
      videoChunks.pop();
    }
  }
}
</script>]]></content>
      <categories>
        <category>Html</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>video</tag>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>Html Video 显示到 Canvas 中</title>
    <url>/blog/2021/12/02/html-VideoToCanvas/</url>
    <content><![CDATA[<h3 id="Video-视频画面加载到-Canvas-中并限制显示区域与缩放"><a href="#Video-视频画面加载到-Canvas-中并限制显示区域与缩放" class="headerlink" title="Video 视频画面加载到 Canvas 中并限制显示区域与缩放"></a>Video 视频画面加载到 Canvas 中并限制显示区域与缩放</h3><span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>由于项目需要在视频上放大指定区域播放、视频滚轮缩放、绘制特定内容，H5 原生的 <a href="https://www.w3school.com.cn/tags/tag_video.asp">Video</a> 控件无法满足需求。但是同样的 Canvas 也有不如 Video 的弊端，比如全屏。</p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="requestVideoFrameCallback"><a href="#requestVideoFrameCallback" class="headerlink" title="requestVideoFrameCallback"></a>requestVideoFrameCallback</h4><p><a href="https://wicg.github.io/video-rvfc/">HTMLVideoElement.requestVideoFrameCallback()</a> 用于注册回调，在渲染一帧图像时触发。<br>参考博客：<a href="https://blog.tomayac.com/2020/05/15/the-requestvideoframecallback-api/">The requestVideoFrameCallback API</a></p>
<h5 id="回调播放核心代码"><a href="#回调播放核心代码" class="headerlink" title="回调播放核心代码"></a>回调播放核心代码</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> video = <span class="built_in">document</span>.querySelector(<span class="string">&quot;video&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> updateCanvas = <span class="function">(<span class="params">now, metadata</span>) =&gt;</span> &#123;</span><br><span class="line">  ctx.drawImage(video, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">  video.requestVideoFrameCallback(updateCanvas);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">video.requestVideoFrameCallback(updateCanvas);</span><br></pre></td></tr></table></figure>
<h5 id="回调播放演示"><a href="#回调播放演示" class="headerlink" title="回调播放演示"></a>回调播放演示</h5><p><video width="640px" height="360px" controls playsinline></video></p>
<canvas width="640px" height="360px" style="border: 1px solid Gray;"></canvas>

<style>
  video,canvas {
    max-width: 100%;
    height: auto;
    display: initial;
 }
</style>

<script>
  const startDrawing = () => {
    const video = document.querySelector("video");
    const canvas = document.querySelector("canvas");
    const ctx = canvas.getContext("2d");

    let width = canvas.width;
    let height = canvas.height;

    const updateCanvas = (now, metadata) => {
      ctx.drawImage(video, 0, 0, width, height);
      video.requestVideoFrameCallback(updateCanvas);
    };

    video.src = "../../../../../video/test.mp4";
    video.muted = true;
    video.loop = 'loop';
    video.requestVideoFrameCallback(updateCanvas);
    video.play();
  };

  window.addEventListener('load', startDrawing);
</script>

<h4 id="基于回调的区域裁切"><a href="#基于回调的区域裁切" class="headerlink" title="基于回调的区域裁切"></a>基于回调的区域裁切</h4><p>通过创建 Canvas 控件时的 drawImage 方法控制裁切显示区域<br>参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage">Web Api drawImage</a><br>例如：裁切起始坐标 150,150，裁切大小 576x324，显示坐标 0,0，显示大小 384x216</p>
<h5 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> startDrawingCutting = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> video = <span class="built_in">document</span>.querySelector(<span class="string">&quot;video&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;videoCutting&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> updateCanvasCutting = <span class="function">(<span class="params">now, metadata</span>) =&gt;</span> &#123;</span><br><span class="line">    ctx.drawImage(video, <span class="number">150</span>, <span class="number">150</span>, <span class="number">576</span>, <span class="number">324</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">384</span>, <span class="number">216</span>);</span><br><span class="line">    video.requestVideoFrameCallback(updateCanvasCutting);</span><br><span class="line">  &#125;;</span><br><span class="line">  video.requestVideoFrameCallback(updateCanvasCutting);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;load&#x27;</span>, startDrawingCutting);</span><br></pre></td></tr></table></figure>
<h5 id="回调裁切演示"><a href="#回调裁切演示" class="headerlink" title="回调裁切演示"></a>回调裁切演示</h5><canvas id="videoCutting" ></canvas>

<script>
  const startDrawingCutting = () => {
    const video = document.querySelector("video");
    const canvas = document.getElementById('videoCutting');
    const ctx = canvas.getContext("2d");

    const updateCanvasCutting = (now, metadata) => {
      ctx.drawImage(video, 150, 150, 576, 324, 0, 0, 384, 216);
      video.requestVideoFrameCallback(updateCanvasCutting);
    };
    video.requestVideoFrameCallback(updateCanvasCutting);
  };
  window.addEventListener('load', startDrawingCutting);
</script>

<h4 id="Konva-js"><a href="#Konva-js" class="headerlink" title="Konva.js"></a>Konva.js</h4><p><a href="https://konvajs.org/">Konva.js</a> 是适用于桌面/移动端应用的 HTML5 2d canvas 库，将视频添加到 Konva 的舞台中，更适合后期操作。<br>参考：<a href="https://konvajs.org/docs/sandbox/Video_On_Canvas.html">VideoOnCanvas</a> 将视频加载到 Konva Canvas 中</p>
<h5 id="Konva-播放核心代码"><a href="#Konva-播放核心代码" class="headerlink" title="Konva 播放核心代码"></a>Konva 播放核心代码</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stage = <span class="keyword">new</span> Konva.Stage(&#123;</span><br><span class="line">  container: <span class="string">&#x27;container&#x27;</span>,</span><br><span class="line">  width: width,</span><br><span class="line">  height: height,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> layer = <span class="keyword">new</span> Konva.Layer();</span><br><span class="line">stage.add(layer);</span><br><span class="line"><span class="keyword">var</span> video = <span class="built_in">document</span>.createElement(<span class="string">&#x27;video&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> image = <span class="keyword">new</span> Konva.Image(&#123;</span><br><span class="line">  image: video,</span><br><span class="line">  draggable: <span class="literal">true</span>,</span><br><span class="line">  x: <span class="number">0</span>,</span><br><span class="line">  y: <span class="number">0</span>,</span><br><span class="line">&#125;);</span><br><span class="line">layer.add(image);</span><br><span class="line"><span class="keyword">var</span> anim = <span class="keyword">new</span> Konva.Animation(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do nothing, animation just need to update the layer</span></span><br><span class="line">&#125;, layer);</span><br><span class="line"><span class="comment">// update Konva.Image size when meta is loaded</span></span><br><span class="line">video.addEventListener(<span class="string">&#x27;loadedmetadata&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  image.width(width);</span><br><span class="line">  image.height(height);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h5 id="Konva-播放演示"><a href="#Konva-播放演示" class="headerlink" title="Konva 播放演示"></a>Konva 播放演示</h5><script src="https://unpkg.com/konva@8/konva.min.js"></script>

<div id="container"></div>

<style>
  #container {
    width: 640px;
    height: 360px;
    border: 1px solid Gray;
 }
</style>

<script>
  var width = 640;
  var height = 360;

  var stage = new Konva.Stage({
    container: 'container',
    width: width,
    height: height,
  });
  var layer = new Konva.Layer();
  stage.add(layer);
  var video = document.createElement('video');
  video.src = '../../../../../video/test.mp4';
  var image = new Konva.Image({
    image: video,
    draggable: false,
    x: 0,
    y: 0,
  });
  layer.add(image);
  var anim = new Konva.Animation(function () {
    // do nothing, animation just need to update the layer
  }, layer);
  // update Konva.Image size when meta is loaded
  video.addEventListener('loadedmetadata', function (e) {
    image.width(width);
    image.height(height);
  });

  video.muted = true;
  video.loop = 'loop';
  video.play();
  anim.start();
</script>

<h4 id="基于-Konva-js-的拖拽和鼠标滚轮缩放"><a href="#基于-Konva-js-的拖拽和鼠标滚轮缩放" class="headerlink" title="基于 Konva.js 的拖拽和鼠标滚轮缩放"></a>基于 Konva.js 的拖拽和鼠标滚轮缩放</h4><ol>
<li>拖拽：创建 Konva 对象时设置 draggable: true 即可拖动<br> 参考 <a href="http://konvajs-doc.bluehymn.com/docs/drag_and_drop/Complex_Drag_and_Drop.html">复杂的拖拽区域</a> 可以设置更为详细的拖拽规则</li>
<li>缩放：监听 wheel 方法进行缩放操作</li>
</ol>
<h5 id="鼠标滚轮缩放核心代码"><a href="#鼠标滚轮缩放核心代码" class="headerlink" title="鼠标滚轮缩放核心代码"></a>鼠标滚轮缩放核心代码</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> scaleBy = <span class="number">1.04</span>;</span><br><span class="line">stageZoom.on(<span class="string">&#x27;wheel&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  e.evt.preventDefault();</span><br><span class="line">  <span class="keyword">var</span> oldScale = stageZoom.scaleX();</span><br><span class="line">  <span class="keyword">var</span> mousePointTo = &#123;</span><br><span class="line">    x: stageZoom.getPointerPosition().x / oldScale - stageZoom.x() / oldScale,</span><br><span class="line">    y: stageZoom.getPointerPosition().y / oldScale - stageZoom.y() / oldScale</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> newScale =</span><br><span class="line">    e.evt.deltaY &lt; <span class="number">0</span> ? oldScale * scaleBy : oldScale / scaleBy;</span><br><span class="line">  stageZoom.scale(&#123; <span class="attr">x</span>: newScale, <span class="attr">y</span>: newScale &#125;);</span><br><span class="line">  <span class="keyword">var</span> newPos = &#123;</span><br><span class="line">    x:</span><br><span class="line">      -(mousePointTo.x - stageZoom.getPointerPosition().x / newScale) *</span><br><span class="line">      newScale,</span><br><span class="line">    y:</span><br><span class="line">      -(mousePointTo.y - stageZoom.getPointerPosition().y / newScale) *</span><br><span class="line">      newScale</span><br><span class="line">  &#125;;</span><br><span class="line">  stageZoom.position(newPos);</span><br><span class="line">  stageZoom.batchDraw();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h5 id="拖拽和鼠标滚轮缩放演示"><a href="#拖拽和鼠标滚轮缩放演示" class="headerlink" title="拖拽和鼠标滚轮缩放演示"></a>拖拽和鼠标滚轮缩放演示</h5><div id="containerZoom"></div>

<style>
  #containerZoom {
    width: 640px;
    height: 360px;
    border: 1px solid Gray;
 }
</style>

<script>
  var widthZoom = 640;
  var heightZoom = 360;

  var stageZoom = new Konva.Stage({
    container: 'containerZoom',
    width: widthZoom,
    height: heightZoom,
  });
  var layerZoom = new Konva.Layer();
  stageZoom.add(layerZoom);
  var videoZoom = document.createElement('video');
  videoZoom.src = '../../../../../video/test.mp4';
  var imageZoom = new Konva.Image({
    image: videoZoom,
    draggable: true,
    x: 0,
    y: 0,
  });
  layerZoom.add(imageZoom);
  var animZoom = new Konva.Animation(function () {
    // do nothing, animation just need to update the layer
  }, layerZoom);
  // update Konva.Image size when meta is loaded
  videoZoom.addEventListener('loadedmetadata', function (e) {
    imageZoom.width(widthZoom);
    imageZoom.height(heightZoom);
  });

  videoZoom.muted = true;
  videoZoom.loop = 'loop';
  videoZoom.play();
  animZoom.start();

  var scaleBy = 1.04;
  stageZoom.on('wheel', e => {
    e.evt.preventDefault();
    var oldScale = stageZoom.scaleX();
    var mousePointTo = {
      x: stageZoom.getPointerPosition().x / oldScale - stageZoom.x() / oldScale,
      y: stageZoom.getPointerPosition().y / oldScale - stageZoom.y() / oldScale
    };
    var newScale =
      e.evt.deltaY < 0 ? oldScale * scaleBy : oldScale / scaleBy;
    stageZoom.scale({ x: newScale, y: newScale });
    var newPos = {
      x:
        -(mousePointTo.x - stageZoom.getPointerPosition().x / newScale) *
        newScale,
      y:
        -(mousePointTo.y - stageZoom.getPointerPosition().y / newScale) *
        newScale
    };
    stageZoom.position(newPos);
    stageZoom.batchDraw();
  });
</script>]]></content>
      <categories>
        <category>Html</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>video</tag>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>IJoy 5th</title>
    <url>/blog/2021/10/03/photo-IJoy5/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/photo-IJoy5/ijoy5logo.jpg"/></p>
<span id="more"></span>
<ul class="grid effect-1" id="grid"><br><br></ul>

<p><link rel="stylesheet" type="text/css" href="/blog/lib/masonry/default.css" /></p>
<p><link rel="stylesheet" type="text/css" href="/blog/lib/masonry/component.css" /></p>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="/blog/lib/masonry/modernizr.custom.js"></script>
<script src="/blog/lib/masonry/masonry.pkgd.min.js"></script>
<script src="/blog/lib/masonry/imagesloaded.pkgd.min.js"></script>
<script src="/blog/lib/masonry/classie.js"></script>
<script src="/blog/lib/masonry/AnimOnScroll.js"></script>
<script src="/blog/lib/masonry/ImgPreview.js"></script>

<script>
    var vOssPath = 'https://sadness.oss-cn-beijing.aliyuncs.com/';
    var vOssProcess = '?x-oss-process=image/resize,m_lfit,w_348';
    var vPhotos = [
        'images/photo-IJoy5/554A0930.jpg',
        'images/photo-IJoy5/554A0938.jpg',
        'images/photo-IJoy5/554A0950.jpg',
        'images/photo-IJoy5/554A0954.jpg',
        'images/photo-IJoy5/554A0958.jpg',
        'images/photo-IJoy5/554A0969.jpg',
        'images/photo-IJoy5/554A0998.jpg',
        'images/photo-IJoy5/554A1025.jpg',
        'images/photo-IJoy5/554A1049.jpg',
        'images/photo-IJoy5/554A1055.jpg',
        'images/photo-IJoy5/554A1061.jpg',
        'images/photo-IJoy5/554A1076.jpg',
        'images/photo-IJoy5/554A1080.jpg',
        'images/photo-IJoy5/554A1092.jpg',
        'images/photo-IJoy5/554A1103.jpg',
        'images/photo-IJoy5/554A1110.jpg',
        'images/photo-IJoy5/554A1173.jpg',
        'images/photo-IJoy5/554A1184.jpg',
        'images/photo-IJoy5/554A1301.jpg',
        'images/photo-IJoy5/554A1366.jpg',
        'images/photo-IJoy5/554A1379.jpg',
        'images/photo-IJoy5/554A1387.jpg',
        'images/photo-IJoy5/554A1393.jpg',
        'images/photo-IJoy5/554A1421.jpg',
        'images/photo-IJoy5/554A1424.jpg',
        'images/photo-IJoy5/554A1444.jpg',
        'images/photo-IJoy5/554A1491.jpg',
        'images/photo-IJoy5/554A1505.jpg',
        'images/photo-IJoy5/554A1510.jpg',
        'images/photo-IJoy5/554A1528.jpg',
        'images/photo-IJoy5/554A1535.jpg',
        'images/photo-IJoy5/554A1552.jpg',
        'images/photo-IJoy5/554A1557.jpg',
        'images/photo-IJoy5/554A1578.jpg',
        'images/photo-IJoy5/554A1585.jpg',
        'images/photo-IJoy5/554A1591.jpg',
        'images/photo-IJoy5/554A1595.jpg',
        'images/photo-IJoy5/554A1615.jpg',
        'images/photo-IJoy5/554A1625.jpg',
        'images/photo-IJoy5/554A1633.jpg',
        'images/photo-IJoy5/554A1637.jpg',
        'images/photo-IJoy5/554A1642.jpg',
        'images/photo-IJoy5/554A1650.jpg',
        'images/photo-IJoy5/554A1657.jpg',
        'images/photo-IJoy5/554A1658.jpg',
        'images/photo-IJoy5/554A1663.jpg',
        'images/photo-IJoy5/554A1670.jpg',
        'images/photo-IJoy5/554A1681.jpg',
        'images/photo-IJoy5/554A1708.jpg',
        'images/photo-IJoy5/554A1749.jpg',
        'images/photo-IJoy5/554A1754.jpg',
        'images/photo-IJoy5/554A1767.jpg',
        'images/photo-IJoy5/554A1773.jpg',
        'images/photo-IJoy5/554A1782.jpg'
    ];
    vPhotos.forEach(element => {
        $("#grid").append('<li><img class="photo" src="' + vOssPath + element + vOssProcess + '" alt="' + vOssPath + element + '" style="cursor: pointer;"></li>');
    });

    new AnimOnScroll(document.getElementById('grid'), {
        minDuration : 0.4,
        maxDuration : 0.7,
        viewportFactor : 0.2
    });

    $(function(){  
        $(".photo").click(function(){  
            imgShow("#outerdiv", "#innerdiv", "#bigimg", $(this));
        });  
    });  
</script>]]></content>
      <categories>
        <category>Photo</category>
      </categories>
      <tags>
        <tag>photo</tag>
        <tag>ijoy</tag>
      </tags>
  </entry>
  <entry>
    <title>IDO 35th</title>
    <url>/blog/2021/07/18/photo-Ido35/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/photo-Ido35/ido35logo.jpg"/></p>
<span id="more"></span>
<ul class="grid effect-1" id="grid"><br><br></ul>

<p><link rel="stylesheet" type="text/css" href="/blog/lib/masonry/default.css" /></p>
<p><link rel="stylesheet" type="text/css" href="/blog/lib/masonry/component.css" /></p>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="/blog/lib/masonry/modernizr.custom.js"></script>
<script src="/blog/lib/masonry/masonry.pkgd.min.js"></script>
<script src="/blog/lib/masonry/imagesloaded.pkgd.min.js"></script>
<script src="/blog/lib/masonry/classie.js"></script>
<script src="/blog/lib/masonry/AnimOnScroll.js"></script>
<script src="/blog/lib/masonry/ImgPreview.js"></script>

<script>
    var vOssPath = 'https://sadness.oss-cn-beijing.aliyuncs.com/';
    var vOssProcess = '?x-oss-process=image/resize,m_lfit,w_348';
    var vPhotos = [
        'images/photo-Ido35/554A0541.jpg',
        'images/photo-Ido35/554A0557.jpg',
        'images/photo-Ido35/554A0565.jpg',
        'images/photo-Ido35/554A0570.jpg',
        'images/photo-Ido35/554A0585.jpg',
        'images/photo-Ido35/554A0590.jpg',
        'images/photo-Ido35/554A0612.jpg',
        'images/photo-Ido35/554A0645.jpg',
        'images/photo-Ido35/554A0652.jpg',
        'images/photo-Ido35/554A0665.jpg',
        'images/photo-Ido35/554A0670.jpg',
        'images/photo-Ido35/554A0672.jpg'
    ];
    vPhotos.forEach(element => {
        $("#grid").append('<li><img class="photo" src="' + vOssPath + element + vOssProcess + '" alt="' + vOssPath + element + '" style="cursor: pointer;"></li>');
    });

    new AnimOnScroll(document.getElementById('grid'), {
        minDuration : 0.4,
        maxDuration : 0.7,
        viewportFactor : 0.2
    });

    $(function(){  
        $(".photo").click(function(){  
            imgShow("#outerdiv", "#innerdiv", "#bigimg", $(this));
        });  
    });  
</script>]]></content>
      <categories>
        <category>Photo</category>
      </categories>
      <tags>
        <tag>photo</tag>
        <tag>ido</tag>
      </tags>
  </entry>
  <entry>
    <title>IDO 36th</title>
    <url>/blog/2021/10/02/photo-Ido36/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/photo-Ido36/ido36logo.jpg"/></p>
<span id="more"></span>
<ul class="grid effect-1" id="grid"><br><br></ul>

<p><link rel="stylesheet" type="text/css" href="/blog/lib/masonry/default.css" /></p>
<p><link rel="stylesheet" type="text/css" href="/blog/lib/masonry/component.css" /></p>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="/blog/lib/masonry/modernizr.custom.js"></script>
<script src="/blog/lib/masonry/masonry.pkgd.min.js"></script>
<script src="/blog/lib/masonry/imagesloaded.pkgd.min.js"></script>
<script src="/blog/lib/masonry/classie.js"></script>
<script src="/blog/lib/masonry/AnimOnScroll.js"></script>
<script src="/blog/lib/masonry/ImgPreview.js"></script>

<script>
    var vOssPath = 'https://sadness.oss-cn-beijing.aliyuncs.com/';
    var vOssProcess = '?x-oss-process=image/resize,m_lfit,w_348';
    var vPhotos = [
        'images/photo-Ido36/554A0778.jpg',
        'images/photo-Ido36/554A0781.jpg',
        'images/photo-Ido36/554A0788.jpg',
        'images/photo-Ido36/554A0796.jpg',
        'images/photo-Ido36/554A0799.jpg',
        'images/photo-Ido36/554A0809.jpg',
        'images/photo-Ido36/554A0850.jpg',
        'images/photo-Ido36/554A0853.jpg',
        'images/photo-Ido36/554A0860.jpg',
        'images/photo-Ido36/554A0862.jpg',
        'images/photo-Ido36/554A0868.jpg',
        'images/photo-Ido36/554A0889.jpg',
        'images/photo-Ido36/554A0897.jpg'
    ];
    vPhotos.forEach(element => {
        $("#grid").append('<li><img class="photo" src="' + vOssPath + element + vOssProcess + '" alt="' + vOssPath + element + '" style="cursor: pointer;"></li>');
    });

    new AnimOnScroll(document.getElementById('grid'), {
        minDuration : 0.4,
        maxDuration : 0.7,
        viewportFactor : 0.2
    });

    $(function(){  
        $(".photo").click(function(){  
            imgShow("#outerdiv", "#innerdiv", "#bigimg", $(this));
        });  
    });  
</script>]]></content>
      <categories>
        <category>Photo</category>
      </categories>
      <tags>
        <tag>photo</tag>
        <tag>ido</tag>
      </tags>
  </entry>
  <entry>
    <title>山东 - 青岛</title>
    <url>/blog/2022/10/07/photo-Qingdao/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/photo-Qingdao/qingdaologo.jpg"/></p>
<span id="more"></span>
<ul class="grid effect-1" id="grid"><br><br></ul>

<p><link rel="stylesheet" type="text/css" href="/blog/lib/masonry/default.css" /></p>
<p><link rel="stylesheet" type="text/css" href="/blog/lib/masonry/component.css" /></p>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="/blog/lib/masonry/modernizr.custom.js"></script>
<script src="/blog/lib/masonry/masonry.pkgd.min.js"></script>
<script src="/blog/lib/masonry/imagesloaded.pkgd.min.js"></script>
<script src="/blog/lib/masonry/classie.js"></script>
<script src="/blog/lib/masonry/AnimOnScroll.js"></script>
<script src="/blog/lib/masonry/ImgPreview.js"></script>

<script>
    var vOssPath = 'https://sadness.oss-cn-beijing.aliyuncs.com/';
    var vOssProcess = '?x-oss-process=image/resize,m_lfit,w_348';
    var vPhotos = [
        'images/photo-Qingdao/554A5824.JPG',
        'images/photo-Qingdao/554A5833.JPG',
        'images/photo-Qingdao/554A5835.JPG',
        'images/photo-Qingdao/554A5836.JPG',
        'images/photo-Qingdao/554A5837.JPG',
        'images/photo-Qingdao/554A5841.JPG',
        'images/photo-Qingdao/554A5842.JPG',
        'images/photo-Qingdao/554A5844.JPG',
        'images/photo-Qingdao/554A5845.JPG',
        'images/photo-Qingdao/554A5848.JPG',
        'images/photo-Qingdao/554A5849.JPG',
        'images/photo-Qingdao/554A5853.JPG',
        'images/photo-Qingdao/554A5854.JPG',
        'images/photo-Qingdao/554A5855.JPG',
        'images/photo-Qingdao/554A5858.JPG',
        'images/photo-Qingdao/554A5861.JPG',
        'images/photo-Qingdao/554A5863.JPG',
        'images/photo-Qingdao/554A5867.JPG',
        'images/photo-Qingdao/554A5868.JPG',
        'images/photo-Qingdao/554A5872.JPG',
        'images/photo-Qingdao/554A5875.JPG',
        'images/photo-Qingdao/554A5886.JPG',
        'images/photo-Qingdao/554A5888.JPG',
        'images/photo-Qingdao/554A5890.JPG',
        'images/photo-Qingdao/554A5908.JPG',
        'images/photo-Qingdao/554A5914.JPG',
        'images/photo-Qingdao/554A5916.JPG',
        'images/photo-Qingdao/554A5918.JPG',
        'images/photo-Qingdao/554A5920.JPG',
        'images/photo-Qingdao/554A5921.JPG',
        'images/photo-Qingdao/554A5923.JPG',
        'images/photo-Qingdao/554A5932.JPG',
        'images/photo-Qingdao/554A5933.JPG',
        'images/photo-Qingdao/554A5934.JPG',
        'images/photo-Qingdao/554A5940.JPG',
        'images/photo-Qingdao/554A5944.JPG',
        'images/photo-Qingdao/554A5947.JPG',
        'images/photo-Qingdao/554A5956.JPG',
        'images/photo-Qingdao/554A5963.JPG',
        'images/photo-Qingdao/554A5982.JPG',
        'images/photo-Qingdao/554A6000.JPG',
        'images/photo-Qingdao/554A6001.JPG',
        'images/photo-Qingdao/554A6004.JPG',
        'images/photo-Qingdao/554A6006.JPG',
        'images/photo-Qingdao/554A6007.JPG',
        'images/photo-Qingdao/554A6008.JPG',
        'images/photo-Qingdao/554A6012.JPG',
        'images/photo-Qingdao/554A6016.JPG',
        'images/photo-Qingdao/554A6017.JPG',
        'images/photo-Qingdao/554A6022.JPG',
        'images/photo-Qingdao/554A6028.JPG'
    ];
    vPhotos.forEach(element => {
        $("#grid").append('<li><img class="photo" src="' + vOssPath + element + vOssProcess + '" alt="' + vOssPath + element + '" style="cursor: pointer;"></li>');
    });

    new AnimOnScroll(document.getElementById('grid'), {
        minDuration : 0.4,
        maxDuration : 0.7,
        viewportFactor : 0.2
    });

    $(function(){  
        $(".photo").click(function(){  
            imgShow("#outerdiv", "#innerdiv", "#bigimg", $(this));
        });  
    });  
</script>]]></content>
      <categories>
        <category>Photo</category>
      </categories>
      <tags>
        <tag>photo</tag>
      </tags>
  </entry>
  <entry>
    <title>天津</title>
    <url>/blog/2022/11/06/photo-Tianjin/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/photo-Tianjin/tianjinlogo.jpg"/></p>
<span id="more"></span>
<ul class="grid effect-1" id="grid"><br><br></ul>

<p><link rel="stylesheet" type="text/css" href="/blog/lib/masonry/default.css" /></p>
<p><link rel="stylesheet" type="text/css" href="/blog/lib/masonry/component.css" /></p>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="/blog/lib/masonry/modernizr.custom.js"></script>
<script src="/blog/lib/masonry/masonry.pkgd.min.js"></script>
<script src="/blog/lib/masonry/imagesloaded.pkgd.min.js"></script>
<script src="/blog/lib/masonry/classie.js"></script>
<script src="/blog/lib/masonry/AnimOnScroll.js"></script>
<script src="/blog/lib/masonry/ImgPreview.js"></script>

<script>
    var vOssPath = 'https://sadness.oss-cn-beijing.aliyuncs.com/';
    var vOssProcess = '?x-oss-process=image/resize,m_lfit,w_348';
    var vPhotos = [
        'images/photo-Tianjin/554A6031.JPG',
        'images/photo-Tianjin/554A6033.JPG',
        'images/photo-Tianjin/554A6035.JPG',
        'images/photo-Tianjin/554A6039.JPG',
        'images/photo-Tianjin/554A6043.JPG',
        'images/photo-Tianjin/554A6052.JPG',
        'images/photo-Tianjin/554A6056.JPG',
        'images/photo-Tianjin/554A6064.JPG',
        'images/photo-Tianjin/554A6065.JPG',
        'images/photo-Tianjin/554A6071.JPG',
        'images/photo-Tianjin/554A6075.JPG',
        'images/photo-Tianjin/554A6077.JPG',
        'images/photo-Tianjin/554A6079.JPG',
        'images/photo-Tianjin/554A6080.JPG',
        'images/photo-Tianjin/554A6082.JPG',
        'images/photo-Tianjin/554A6083.JPG',
        'images/photo-Tianjin/554A6088.JPG',
        'images/photo-Tianjin/554A6105.JPG',
        'images/photo-Tianjin/554A6106.JPG',
        'images/photo-Tianjin/554A6111.JPG',
        'images/photo-Tianjin/554A6115.JPG',
        'images/photo-Tianjin/554A6127.JPG',
        'images/photo-Tianjin/554A6142.JPG',
        'images/photo-Tianjin/554A6143.JPG',
        'images/photo-Tianjin/554A6147.JPG',
        'images/photo-Tianjin/554A6158.JPG',
        'images/photo-Tianjin/554A6189.JPG',
        'images/photo-Tianjin/20221022_180444.jpg'
    ];
    vPhotos.forEach(element => {
        $("#grid").append('<li><img class="photo" src="' + vOssPath + element + vOssProcess + '" alt="' + vOssPath + element + '" style="cursor: pointer;"></li>');
    });

    new AnimOnScroll(document.getElementById('grid'), {
        minDuration : 0.4,
        maxDuration : 0.7,
        viewportFactor : 0.2
    });

    $(function(){  
        $(".photo").click(function(){  
            imgShow("#outerdiv", "#innerdiv", "#bigimg", $(this));
        });  
    });  
</script>]]></content>
      <categories>
        <category>Photo</category>
      </categories>
      <tags>
        <tag>photo</tag>
      </tags>
  </entry>
  <entry>
    <title>磁盘分配单元大小</title>
    <url>/blog/2021/12/15/repair-DiskSector/</url>
    <content><![CDATA[<h3 id="由于分配过大导致文件实际大小与占用空间大小不符"><a href="#由于分配过大导致文件实际大小与占用空间大小不符" class="headerlink" title="由于分配过大导致文件实际大小与占用空间大小不符"></a>由于分配过大导致文件实际大小与占用空间大小不符</h3><span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>由于格式化硬盘的时候设置分配单元大小过大，导致文件在存储的时候文件大小与在硬盘中占用的空间大小不符，占用的空间可能是实际大小的几倍不止，现在的硬盘一般还是比较大的，所以这是一个短时间可能无法发现的问题。<br>所谓分配单元大小，即是系统对磁盘设备进行读写的最小单位。在极限速度以内，分配单元大小越大读写速度越快，反之则越慢。但同时单元分配越大越会造成空间的浪费。现在 Windows 与其他磁盘工具格式化默认 4096 字节。<br><img src="https://sadness96.github.io/images/blog/repair-DiskSector/磁盘分区异常文件属性.jpg"/></p>
<h3 id="排查问题"><a href="#排查问题" class="headerlink" title="排查问题"></a>排查问题</h3><p>通过命令可以得到磁盘分区当前状态<br><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">fsutil fsinfo ntfsinfo 盘符:</span><br></pre></td></tr></table></figure></p>
<h4 id="异常盘符信息"><a href="#异常盘符信息" class="headerlink" title="异常盘符信息"></a>异常盘符信息</h4><p>其中每物理扇区字节数为 4096，每群集字节数却为 2097152，严重超出正常范围。<br><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">NTFS 卷序列号 ：        <span class="number">0</span>xac249e45249e1306</span><br><span class="line">NTFS 版本      ：                <span class="number">3</span>.<span class="number">1</span></span><br><span class="line">LFS 版本       ：                <span class="number">2</span>.<span class="number">0</span></span><br><span class="line">总扇区     ：                <span class="number">1</span>,<span class="number">000</span>,<span class="number">212</span>,<span class="number">479</span>  (<span class="number">476</span>.<span class="number">9</span> GB)</span><br><span class="line">总群集    ：                      <span class="number">244</span>,<span class="number">192</span>  (<span class="number">476</span>.<span class="number">9</span> GB)</span><br><span class="line">空余群集     ：                        <span class="number">4</span>,<span class="number">988</span>  (  <span class="number">9</span>.<span class="number">7</span> GB)</span><br><span class="line">总保留群集 ：                      <span class="number">2</span>  (  <span class="number">4</span>.<span class="number">0</span> MB)</span><br><span class="line">用于存储备用的保留 ：                 <span class="number">0</span>  (  <span class="number">0</span>.<span class="number">0</span> KB)</span><br><span class="line">每扇区字节数  ：                <span class="number">512</span></span><br><span class="line">每物理扇区字节数 ：        <span class="number">4096</span></span><br><span class="line">每群集字节数 ：                <span class="number">2097152</span></span><br><span class="line">每 FileRecord 分段字节数    ：  <span class="number">1024</span></span><br><span class="line">每 FileRecord 分段群集数 ：  <span class="number">0</span></span><br><span class="line">Mft 有效数据长度 ：            <span class="number">348</span>.<span class="number">00</span> MB</span><br><span class="line">Mft 开始 Lcn  ：                   <span class="number">0</span>x0000000000000600</span><br><span class="line">Mft2 开始 Lcn ：                   <span class="number">0</span>x0000000000000001</span><br><span class="line">Mft 区域开始 ：                   <span class="number">0</span>x000000000003b820</span><br><span class="line">Mft 区域结束   ：                   <span class="number">0</span>x000000000003b8a0</span><br><span class="line">MFT 区域大小  ：                   <span class="number">256</span>.<span class="number">00</span> MB</span><br><span class="line">最大设备修剪程度计数 ：     <span class="number">256</span></span><br><span class="line">最大设备修剪字节计数 ：       <span class="number">0</span>xffffffff</span><br><span class="line">最大卷修剪程度计数 ：     <span class="number">62</span></span><br><span class="line">最大卷修剪字节计数 ：       <span class="number">0</span>x40000000</span><br><span class="line">Resource Manager 标识符:     <span class="number">3</span>EFE31B9-FB44-<span class="number">11</span>EB-<span class="number">8</span>AD1-<span class="number">00</span>E04C3605F3</span><br></pre></td></tr></table></figure></p>
<h4 id="重新格式化盘符信息"><a href="#重新格式化盘符信息" class="headerlink" title="重新格式化盘符信息"></a>重新格式化盘符信息</h4><p>经过尝试发现分配单元大小只能通过重新格式化修改，修改后其中每物理扇区字节数为 4096，每群集字节数却为 4096，测试文件存储显示占用空间正常。<br><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">NTFS 卷序列号 ：        <span class="number">0</span>x65f33762c14d581b</span><br><span class="line">NTFS 版本      ：                <span class="number">3</span>.<span class="number">1</span></span><br><span class="line">LFS 版本       ：                <span class="number">2</span>.<span class="number">0</span></span><br><span class="line">总扇区     ：                <span class="number">1</span>,<span class="number">000</span>,<span class="number">212</span>,<span class="number">479</span>  (<span class="number">476</span>.<span class="number">9</span> GB)</span><br><span class="line">总群集    ：                  <span class="number">125</span>,<span class="number">026</span>,<span class="number">559</span>  (<span class="number">476</span>.<span class="number">9</span> GB)</span><br><span class="line">空余群集     ：                  <span class="number">122</span>,<span class="number">800</span>,<span class="number">585</span>  (<span class="number">468</span>.<span class="number">4</span> GB)</span><br><span class="line">总保留群集 ：                  <span class="number">1</span>,<span class="number">024</span>  (  <span class="number">4</span>.<span class="number">0</span> MB)</span><br><span class="line">用于存储备用的保留 ：                 <span class="number">0</span>  (  <span class="number">0</span>.<span class="number">0</span> KB)</span><br><span class="line">每扇区字节数  ：                <span class="number">512</span></span><br><span class="line">每物理扇区字节数 ：        <span class="number">4096</span></span><br><span class="line">每群集字节数 ：                <span class="number">4096</span></span><br><span class="line">每 FileRecord 分段字节数    ：  <span class="number">1024</span></span><br><span class="line">每 FileRecord 分段群集数 ：  <span class="number">0</span></span><br><span class="line">Mft 有效数据长度 ：            <span class="number">69</span>.<span class="number">25</span> MB</span><br><span class="line">Mft 开始 Lcn  ：                   <span class="number">0</span>x00000000000c0000</span><br><span class="line">Mft2 开始 Lcn ：                   <span class="number">0</span>x0000000000000002</span><br><span class="line">Mft 区域开始 ：                   <span class="number">0</span>x0000000000000000</span><br><span class="line">Mft 区域结束   ：                   <span class="number">0</span>x0000000000000000</span><br><span class="line">MFT 区域大小  ：                   <span class="number">0</span>.<span class="number">00</span> KB</span><br><span class="line">最大设备修剪程度计数 ：     <span class="number">256</span></span><br><span class="line">最大设备修剪字节计数 ：       <span class="number">0</span>xffffffff</span><br><span class="line">最大卷修剪程度计数 ：     <span class="number">62</span></span><br><span class="line">最大卷修剪字节计数 ：       <span class="number">0</span>x40000000</span><br><span class="line">Resource Manager 标识符:     <span class="number">7</span>F073C2D-<span class="number">7</span>C25-<span class="number">11</span>ED-<span class="number">9084</span>-D85ED3244FF6</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Repair</category>
      </categories>
      <tags>
        <tag>repair</tag>
        <tag>computer</tag>
      </tags>
  </entry>
  <entry>
    <title>Luminox 8821 更换电池</title>
    <url>/blog/2021/01/02/repair-Luminox8821/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/repair-Luminox8821/BlogLogo.png"/></p>
<span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://luminox.com/">Luminox 8821</a> 最开始是13年在蚂蚁甩棍论坛看到棍友发的，一直很喜欢这块石英表，工作后17年才买到手，就在前几天没电了，戴了三年多，简单的换一下电池。<br><img src="https://sadness96.github.io/images/blog/repair-Luminox8821/20210102_130609.jpg"/></p>
<h3 id="氚气发光还是很不错的"><a href="#氚气发光还是很不错的" class="headerlink" title="氚气发光还是很不错的"></a>氚气发光还是很不错的</h3><p>官网的展示，可以拖动显示正常和夜间的效果</p>
<div style="width:100%;height:820px;overflow:hidden;border:0px;"><br>  <div style="width:100%;height:820px;margin:-90px 0px 0px 0px;"><br>   <iframe src="https://luminox.jp/watch-collection/land/recon-point-man-8820-series-ref8821-km/" scrolling="no" height="900" width="767" frameborder="0"></iframe><br>  </div><br></div>

<h3 id="更换电池"><a href="#更换电池" class="headerlink" title="更换电池"></a>更换电池</h3><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>背后四颗螺丝，型号：十字 PH00。<br>机芯：Swiss Ronda 515 HH6<br>电池型号：371, SR920SW (1.5 V)</p>
<p><img src="https://sadness96.github.io/images/blog/repair-Luminox8821/20210102_134945.jpg"/></p>
<h4 id="更换"><a href="#更换" class="headerlink" title="更换"></a>更换</h4><p>螺丝拧开后盖后向上拨开电池上的压片换上新电池后复原就好，可以在防水胶圈上涂一层防水膏。<br><img src="https://sadness96.github.io/images/blog/repair-Luminox8821/20210102_132517.jpg"/><br><img src="https://sadness96.github.io/images/blog/repair-Luminox8821/20210102_132846.jpg"/></p>
]]></content>
      <categories>
        <category>Repair</category>
      </categories>
      <tags>
        <tag>repair</tag>
        <tag>watch</tag>
        <tag>luminox</tag>
      </tags>
  </entry>
  <entry>
    <title>齐齐哈尔职业教育中心学校</title>
    <url>/blog/2014/10/05/school-HighSchool/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/memory-HighSchool/school.png"/></p>
<span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>简介里删掉了很多内容，随着成长，我不在那么悲观厌世，我很自豪来自这里，这是一个很不错的起点。希望所有迷茫的人，终究能找到属于自己的位置。</p>
<h4 id="在此记录曾经做过的，即是幼稚的回忆，又代表了成长："><a href="#在此记录曾经做过的，即是幼稚的回忆，又代表了成长：" class="headerlink" title="在此记录曾经做过的，即是幼稚的回忆，又代表了成长："></a>在此记录曾经做过的，即是幼稚的回忆，又代表了成长：</h4><h5 id="photoshop"><a href="#photoshop" class="headerlink" title="photoshop"></a>photoshop</h5><p><img src="https://sadness96.github.io/images/blog/memory-HighSchool/LG.gif"/><br><img src="https://sadness96.github.io/images/blog/memory-HighSchool/%E4%B8%B9%E9%A1%B6%E9%B9%A4.jpg"/><br><img src="https://sadness96.github.io/images/blog/memory-HighSchool/%E9%9B%B7%E9%94%8B.jpg"/><br><img src="https://sadness96.github.io/images/blog/memory-HighSchool/%E8%8A%B11.jpg"/><br><img src="https://sadness96.github.io/images/blog/memory-HighSchool/%E8%8A%B12.jpg"/></p>
<h5 id="flash"><a href="#flash" class="headerlink" title="flash"></a>flash</h5><p>移动端浏览器和部分浏览器已不支持Flash播放<br>访问速度慢或网页不兼容可能导致无法访问，可单独下载<br>储存地址：<a href="https://github.com/Sadness96/sadness96.github.io/tree/master/flash/memory-HighSchool">https://github.com/Sadness96/sadness96.github.io/tree/master/flash/memory-HighSchool</a></p>
<p><embed src="https://sadness96.github.io//flash//memory-HighSchool//苏宁.swf" width="550" height="200" type="application/x-shockwave-flash" allowNetworking="all"/></p>
<p><embed src="https://sadness96.github.io//flash//memory-HighSchool//期末.swf" width="550" height="400" type="application/x-shockwave-flash" allowNetworking="all"/></p>
<embed src="https://sadness96.github.io//flash//memory-HighSchool//粮.swf" width="550" height="400" type="application/x-shockwave-flash" allowNetworking="all"/>]]></content>
      <categories>
        <category>School</category>
      </categories>
      <tags>
        <tag>photoshop</tag>
        <tag>flash</tag>
      </tags>
  </entry>
  <entry>
    <title>哈尔滨信息工程学院</title>
    <url>/blog/2016/05/10/school-University/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/memory-University/school.png"/></p>
<span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>我不喜欢这个学校，因为在我来这之前，就已经发生了很多让人厌恶的故事。但是我还是来了，人生总要伴随着痛苦嘛。接受了，就是成长。但是我也很感谢这里，让我拥有两年的时间，得到足够成长，一切都按照计划进行着，下一步…等发生了再去记录吧！</p>
<h4 id="记录做过的成品，真正成长的开始："><a href="#记录做过的成品，真正成长的开始：" class="headerlink" title="记录做过的成品，真正成长的开始："></a>记录做过的成品，真正成长的开始：</h4><h5 id="c（企业员工信息管理系统）"><a href="#c（企业员工信息管理系统）" class="headerlink" title="c（企业员工信息管理系统）"></a>c（企业员工信息管理系统）</h5><p>使用C语言编写简易的控制台管理程序，实训有录像剪辑视频（使用会声会影）。由于涉及到她人肖像问题，不方便发布。<br>插曲：制作视频的时候很赶工，几个小女生视频录一半着急忙慌就回家放假了，我带着朋友跑网吧通宵剪辑视频，他玩着联盟看我剪了一宿…然后在最后渲染的时候已经凌晨五点了，非常幸运的死机了，我凭着记忆快速重启电脑，安装好软件后重新剪辑，在通宵下机之前完成了。<br><img src="https://sadness96.github.io/images/blog/memory-University/c-登录.png"/><br><img src="https://sadness96.github.io/images/blog/memory-University/c-主界面.png"/><br><img src="https://sadness96.github.io/images/blog/memory-University/c-主界面2.png"/><br><img src="https://sadness96.github.io/images/blog/memory-University/c-查询.png"/><br><img src="https://sadness96.github.io/images/blog/memory-University/c-修改.png"/></p>
<h5 id="java（学生成绩管理系统）"><a href="#java（学生成绩管理系统）" class="headerlink" title="java（学生成绩管理系统）"></a>java（学生成绩管理系统）</h5><p>使用Java的awt和swing设计开发C/S端程序，使用SQL Server数据库管理，exe4j打包为exe程序。<br><img src="https://sadness96.github.io/images/blog/memory-University/java-Login.png"/><br><img src="https://sadness96.github.io/images/blog/memory-University/java-主界面.png"/><br><img src="https://sadness96.github.io/images/blog/memory-University/java-查询界面.png"/><br><img src="https://sadness96.github.io/images/blog/memory-University/java-添加界面.png"/><br><img src="https://sadness96.github.io/images/blog/memory-University/java-删除界面.png"/></p>
]]></content>
      <categories>
        <category>School</category>
      </categories>
      <tags>
        <tag>c</tag>
        <tag>java</tag>
        <tag>会声会影</tag>
      </tags>
  </entry>
  <entry>
    <title>ArcGIS API for JavaScript 使用介绍</title>
    <url>/blog/2019/11/04/software-ArcGisForJS/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/software-ArcGisForJS/ArcGISForJavaScript.png"/></p>
<span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>现工作中 GIS 地图使用客户提供的 AutoCAD 图纸提取图层到 ArcGIS 中导出图片模拟 GIS 显示，存在一定弊端（1.不包含经纬度数据，需要进行图像标定坐标转换；2.图像中边线粗的越放大越粗，边线细的缩放时不足一像素颜色减淡。），尝试以客户端加载 WebJS 的方式使用 GIS。</p>
<h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><p>基于 ArcGIS 提供的桌面端（用于编辑地图），服务端（用于发布地图服务）以及 ArcGIS API for JavaScript（开发 WebJS）。</p>
<h4 id="搭建-ArcGIS-Server-10-2"><a href="#搭建-ArcGIS-Server-10-2" class="headerlink" title="搭建 ArcGIS Server 10.2"></a>搭建 ArcGIS Server 10.2</h4><p><a href="https://blog.csdn.net/qq_36213352/article/details/80646940">参考资料</a></p>
<h5 id="安装后默认值"><a href="#安装后默认值" class="headerlink" title="安装后默认值"></a>安装后默认值</h5><p>地图服务地址：<a href="http://localhost:6080/arcgis/manager/">http://localhost:6080/arcgis/manager/</a><br>地图服务账号：siteadmin</p>
<h4 id="搭建-ArcGIS-Desktop-10-2"><a href="#搭建-ArcGIS-Desktop-10-2" class="headerlink" title="搭建 ArcGIS Desktop 10.2"></a>搭建 ArcGIS Desktop 10.2</h4><p><a href="https://blog.csdn.net/bigemap/article/details/81131840">参考资料</a></p>
<h5 id="地图服务发布"><a href="#地图服务发布" class="headerlink" title="地图服务发布"></a>地图服务发布</h5><h6 id="1-编辑好的地图保存为-mxd-格式"><a href="#1-编辑好的地图保存为-mxd-格式" class="headerlink" title="1.编辑好的地图保存为 .mxd 格式"></a>1.编辑好的地图保存为 .mxd 格式</h6><p><img src="https://sadness96.github.io/images/blog/software-ArcGisForJS/SaveMxd.png"/></p>
<h6 id="2-在-ArcMap-目录中选择-GIS-服务器-→-添加-ArcGIS-Server-→-发布-GIS-服务"><a href="#2-在-ArcMap-目录中选择-GIS-服务器-→-添加-ArcGIS-Server-→-发布-GIS-服务" class="headerlink" title="2.在 ArcMap 目录中选择 GIS 服务器 → 添加 ArcGIS Server → 发布 GIS 服务"></a>2.在 ArcMap 目录中选择 GIS 服务器 → 添加 ArcGIS Server → 发布 GIS 服务</h6><p>选择发布 GIS 服务<br><img src="https://sadness96.github.io/images/blog/software-ArcGisForJS/PublishingService1.png"/></p>
<p>设置服务器 URL 与用户名密码<br><img src="https://sadness96.github.io/images/blog/software-ArcGisForJS/PublishingService2.png"/></p>
<h6 id="4-在-ArcMap-目录中选择-mxd-文件右键选择：共享为服务-S-…"><a href="#4-在-ArcMap-目录中选择-mxd-文件右键选择：共享为服务-S-…" class="headerlink" title="4.在 ArcMap 目录中选择 .mxd 文件右键选择：共享为服务(S)…"></a>4.在 ArcMap 目录中选择 .mxd 文件右键选择：共享为服务(S)…</h6><p>选择发布服务<br><img src="https://sadness96.github.io/images/blog/software-ArcGisForJS/ShareForService1.png"/></p>
<p>设置服务名称<br><img src="https://sadness96.github.io/images/blog/software-ArcGisForJS/ShareForService2.png"/></p>
<p>默认发布为根<br><img src="https://sadness96.github.io/images/blog/software-ArcGisForJS/ShareForService3.png"/></p>
<p>1.点击分析，解决错误（例：图层坐标系异常）；2.发布<br><img src="https://sadness96.github.io/images/blog/software-ArcGisForJS/ShareForService4.png"/></p>
<p>选择发布图层等待服务发布<br><img src="https://sadness96.github.io/images/blog/software-ArcGisForJS/ShareForService5.png"/></p>
<p><a href="http://localhost:6080/arcgis/manager/">ArcGIS Server Manager</a> 中查看服务<br><img src="https://sadness96.github.io/images/blog/software-ArcGisForJS/ShareForService6.png"/></p>
<h4 id="搭建-ArcGIS-API-for-JavaScript"><a href="#搭建-ArcGIS-API-for-JavaScript" class="headerlink" title="搭建 ArcGIS API for JavaScript"></a>搭建 ArcGIS API for JavaScript</h4><p>未完成</p>
]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>software</tag>
        <tag>arcgis</tag>
      </tags>
  </entry>
  <entry>
    <title>构建 OpenCV</title>
    <url>/blog/2021/09/16/software-BuildOpenCV/</url>
    <content><![CDATA[<h3 id="从源代码构建支持-CUDA-的-OpenCV"><a href="#从源代码构建支持-CUDA-的-OpenCV" class="headerlink" title="从源代码构建支持 CUDA 的 OpenCV"></a>从源代码构建支持 CUDA 的 OpenCV</h3><span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://opencv.org/">OpenCV</a> 是一个开源的计算机视觉和机器学习软件库，图像算法必备！<br>编译 OpenCV 一般对相关软件版本都有要求，请谨慎选择版本，本文编译的 OpenCV 版本是 3.4.2。</p>
<h3 id="构建环境"><a href="#构建环境" class="headerlink" title="构建环境"></a>构建环境</h3><ul>
<li>Windows 10</li>
<li><a href="https://visualstudio.microsoft.com/zh-hans/">Visual Studio 2019</a></li>
<li><a href="https://developer.nvidia.com/cuda-10.2-download-archive">CUDA Toolkit 10.2</a></li>
<li><a href="https://github.com/Kitware/CMake/releases/tag/v3.17.2">CMake 3.17.2</a></li>
<li><a href="https://github.com/opencv/opencv/releases/tag/3.4.2">OpenCV 3.4.2</a></li>
<li><a href="https://github.com/opencv/opencv_contrib/releases/tag/3.4.2">opencv_contrib 3.4.2</a></li>
</ul>
<h3 id="构建步骤"><a href="#构建步骤" class="headerlink" title="构建步骤"></a>构建步骤</h3><h4 id="预安装软件"><a href="#预安装软件" class="headerlink" title="预安装软件"></a>预安装软件</h4><ol>
<li>Visual Studio、CUDA Toolkit、CMake 提前安装好。</li>
<li>下载解压 OpenCV 与 opencv_contrib 源代码并解压。<br><img src="https://sadness96.github.io/images/blog/software-BuildOpenCV/1.解压OpenCV源码.jpg"/></li>
</ol>
<h4 id="运行-CMake"><a href="#运行-CMake" class="headerlink" title="运行 CMake"></a>运行 CMake</h4><p>运行 CMake 选择 OpenCV 源代码路径与编译生成路径<br><img src="https://sadness96.github.io/images/blog/software-BuildOpenCV/2.运行CMake.jpg"/></p>
<h4 id="选择编译环境"><a href="#选择编译环境" class="headerlink" title="选择编译环境"></a>选择编译环境</h4><p>点击 Configure 配置选择编译环境<br><img src="https://sadness96.github.io/images/blog/software-BuildOpenCV/3.配置选择编译环境.jpg"/></p>
<h4 id="配置编译内容"><a href="#配置编译内容" class="headerlink" title="配置编译内容"></a>配置编译内容</h4><p>点完第一次 Configure 后界面一片红，不用在意，先根据需要配置编译内容</p>
<ul>
<li>勾选 “with_cuda”：支持 CUDA 环境的 OpenCV。</li>
<li>勾选 “build_opencv_world”：会把所有的库生成为一个 dll 与 lib，很方便使用，但不建议勾选，如果编译时报错又未完成的编译库，依旧可以生成，但是使用时会报：“无法解析的外部符号”，却又很难找出原因。</li>
<li>勾选 “opencv_enable_nonfree”：可以使用具有专利保护的算法。</li>
<li>配置 “opencv_extra_modules_path” 为扩展模块的源码路径 “…/opencv_contrib-3.4.2/modules”：可以使用 OpenCV 一些受专利保护算法的扩展模块。</li>
</ul>
<p><img src="https://sadness96.github.io/images/blog/software-BuildOpenCV/4.配置编译内容.jpg"/></p>
<h4 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h4><p>点击 Configure 直至没有红色部分，点击 Generate 生成项目<br><img src="https://sadness96.github.io/images/blog/software-BuildOpenCV/5.生成.jpg"/></p>
<h4 id="下载缺失的文件"><a href="#下载缺失的文件" class="headerlink" title="下载缺失的文件"></a>下载缺失的文件</h4><p>CMake 构建期间会联网下载一些库，如果下载失败了，此时直接编译代码，有些库会编译失败。找到生成目录下 “CMakeDownloadLog.txt” 文件，里边记录了下载失败的文件名称，以及下载地址与下载位置。<br><img src="https://sadness96.github.io/images/blog/software-BuildOpenCV/6.CMakeDownloadLog.jpg"/></p>
<p>可以手动下载并拷贝到指定位置，或者使用一段简单的代码解析文件内容，批量下载，使用 C# 编写较为容易，想使用其他语言编写自行修改。<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CMakeDownLoadErrorFile</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// 解决下载异常：未能创建 SSL/TLS 安全通道</span></span><br><span class="line">            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">string</span> fileCMakeDownloadLog = <span class="string">@&quot;D:\Software\opencv\CMakeDownloadLog.txt&quot;</span>;</span><br><span class="line">            <span class="keyword">var</span> vFileList = GetFileList(fileCMakeDownloadLog).Where(o =&gt; o.StartsWith(<span class="string">&quot;do_copy&quot;</span>) || o.StartsWith(<span class="string">&quot;do_unpack&quot;</span>)).ToList();</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; vFileList.Count; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> vItemSplit = vFileList[i].Split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">                <span class="keyword">var</span> vItemType = vItemSplit[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">var</span> vItemFileName = vItemSplit[<span class="number">1</span>].Replace(<span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                <span class="keyword">var</span> vItemMD5 = vItemSplit[<span class="number">2</span>].Replace(<span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                <span class="keyword">var</span> vItemUrl = vItemSplit[<span class="number">3</span>].Replace(<span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                <span class="keyword">var</span> vItemPath = vItemSplit[<span class="number">4</span>].Replace(<span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> vSavePath = <span class="string">$&quot;<span class="subst">&#123;vItemPath&#125;</span>/<span class="subst">&#123;vItemFileName&#125;</span>&quot;</span>;</span><br><span class="line">                <span class="comment">//如果路径下的文件不存在，自动创建</span></span><br><span class="line">                <span class="built_in">string</span> strFolderPath = Path.GetDirectoryName(vSavePath);</span><br><span class="line">                <span class="keyword">if</span> (!Directory.Exists(strFolderPath))</span><br><span class="line">                &#123;</span><br><span class="line">                    Directory.CreateDirectory(strFolderPath);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;DateTime.Now&#125;</span> 下载文件：<span class="subst">&#123;vItemFileName&#125;</span>\t(<span class="subst">&#123;i + <span class="number">1</span>&#125;</span>/<span class="subst">&#123;vFileList.Count&#125;</span>)&quot;</span>);</span><br><span class="line">                DownLoadFile(vItemUrl, <span class="string">$&quot;<span class="subst">&#123;vSavePath&#125;</span>&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;下载完成！&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 读取TXT文件中的文本(按照每行存到listString中)</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strPath&quot;&gt;</span>TXT文件路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>TXT文件中的文本(listString)<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;<span class="built_in">string</span>&gt; <span class="title">GetFileList</span>(<span class="params"><span class="built_in">string</span> strPath</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">string</span>[] strText = <span class="literal">null</span>;</span><br><span class="line">            List&lt;<span class="built_in">string</span>&gt; listText = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                strText = File.ReadAllLines(strPath);</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="built_in">string</span> strLine <span class="keyword">in</span> strText)</span><br><span class="line">                &#123;</span><br><span class="line">                    listText.Add(strLine);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception)</span><br><span class="line">            &#123; &#125;</span><br><span class="line">            <span class="keyword">return</span> listText;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 下载文件</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;fileUrl&quot;&gt;</span>文件 URL<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;savePath&quot;&gt;</span>保存路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DownLoadFile</span>(<span class="params"><span class="built_in">string</span> fileUrl, <span class="built_in">string</span> savePath</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> web = <span class="keyword">new</span> WebClient())</span><br><span class="line">            &#123;</span><br><span class="line">                web.DownloadFile(fileUrl, savePath);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://sadness96.github.io/images/blog/software-BuildOpenCV/7.CMakeDownLoadErrorFile.jpg"/></p>
<p>下载完成后测试有一处需要手动拷贝文件，否则编译时找不到文件，拷贝：”…/{生成目录}/downloads/xfeatures2d” 目录下文件至 “…/opencv_contrib-3.4.2/modules/xfeatures2d/src”。</p>
<h4 id="编译项目"><a href="#编译项目" class="headerlink" title="编译项目"></a>编译项目</h4><p>运行 Visual Studio 打开生成目录下 “OpenCV.sln”，点击菜单栏：生成 -&gt; 批生成，勾选 Debug 模式与 Release 模式的 ALL_BUILD 与 INSTALL 项目，点击生成即可生成最完整的项目包，也可根据实际需要勾选，或者直接在项目中右键生成。等待生成完成即可。<br><img src="https://sadness96.github.io/images/blog/software-BuildOpenCV/8.编译项目.jpg"/></p>
<h4 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h4><p>如果出现编译失败，可以尝试保证网络完好后再次生成，有些文件似乎还是会通过联网下载。<br>编译完成后：”…/{生成目录}/install” 即为最后生成文件，我这里生成的 install 中的 bin 目录配置环境变量后就可以正常使用，include 与 lib 目录则引用到开发项目中。</p>
<h5 id="项目引用"><a href="#项目引用" class="headerlink" title="项目引用"></a>项目引用</h5><p>C++ 项目在引用 OpenCV 附加依赖项时需要区分 Debug 与 Release 库：<br>其中以 <em>342d.lib 结尾的文件为 Debug 生成；<br>其中以 </em>342.lib 结尾的文件为 Release 生成；<br>可以使用以下命令生成文件名，方便项目引用时拷贝。<br><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dir</span> *<span class="number">342</span>d.lib &gt; lib_debug_file.txt</span><br><span class="line"><span class="built_in">dir</span> *<span class="number">342</span>.lib &gt; lib_release_file.txt</span><br></pre></td></tr></table></figure></p>
<h5 id="不同的目录"><a href="#不同的目录" class="headerlink" title="不同的目录"></a>不同的目录</h5><p>可能由于软件版本问题，有人生成的目录会是：”…/{生成目录}/install/x64/vc15/bin”，环境变量引用即可，似乎没有什么区别。</p>
]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>opencv</tag>
        <tag>software</tag>
        <tag>cmake</tag>
      </tags>
  </entry>
  <entry>
    <title>Clumsy 使用介绍</title>
    <url>/blog/2020/03/20/software-Clumsy/</url>
    <content><![CDATA[<p><img src="http://jagt.github.io/clumsy/clumsy-demo.gif"/></p>
<span id="more"></span>
<h3 id="用于模拟极端网络环境的网络干扰软件"><a href="#用于模拟极端网络环境的网络干扰软件" class="headerlink" title="用于模拟极端网络环境的网络干扰软件"></a>用于模拟极端网络环境的网络干扰软件</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><a href="https://github.com/jagt/clumsy">Clumsy</a> makes your network condition on Windows significantly worse, but in a controlled and interactive manner.<br>公司工作需要，使用该软件模拟测试极端网络情况下的软件稳定性。</p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>官方手册：<a href="http://jagt.github.io/clumsy/manual.html">http://jagt.github.io/clumsy/manual.html</a></p>
<h5 id="配置过滤条件"><a href="#配置过滤条件" class="headerlink" title="配置过滤条件"></a>配置过滤条件</h5><p>参考 <a href="https://reqrypt.org/windivert-doc.html#filter_language">WinDivert</a> 配置文档</p>
<h5 id="干扰方式"><a href="#干扰方式" class="headerlink" title="干扰方式"></a>干扰方式</h5><table>
<thead>
<tr>
<th>Function</th>
<th>翻译</th>
<th>功能说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Lag</td>
<td>滞后</td>
<td>将数据包保留一小段时间以模拟网络滞后</td>
</tr>
<tr>
<td>Dorp</td>
<td>丢弃</td>
<td>随机丢弃数据包</td>
</tr>
<tr>
<td>Throttle</td>
<td>节流阀</td>
<td>在给定的时间段内阻塞流量，然后分批发送</td>
</tr>
<tr>
<td>Duplicate</td>
<td>复制</td>
<td>将克隆后的数据包立即发送到原始数据包</td>
</tr>
<tr>
<td>Out of order</td>
<td>乱序</td>
<td>重新排列数据包的顺序</td>
</tr>
<tr>
<td>Tamper</td>
<td>篡改</td>
<td>微调数据包内容的位</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>software</tag>
        <tag>clumsy</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins 使用介绍</title>
    <url>/blog/2019/12/26/software-Jenkins/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/software-Jenkins/jenkins.png"/></p>
<span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://jenkins.io/zh/">Jenkins</a> 是一个持续集成（CI&amp;CD）工具，用以构建、部署、自动化。</p>
<h3 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a>运行流程</h3><p>以部署PC客户端软件为例：<br>1.连接 <a href="https://about.gitlab.com/">GitLab</a> 仓库 pull 最新代码<br>2.使用 <a href="https://www.nuget.org/">NuGet</a> 还原引用库<br>3.使用 <a href="https://msdn.microsoft.com/zh-CN/library/dd393574.aspx">MSBuild</a> 编译项目工程<br>4.使用 <a href="https://nsis.sourceforge.io/Main_Page">NSIS</a> 打包软件为安装包<br>5.以邮件方式将打包文件发送(未完成)</p>
<h3 id="软件部署"><a href="#软件部署" class="headerlink" title="软件部署"></a>软件部署</h3><p>软件安装参考 <a href="https://jenkins.io/zh/doc/pipeline/tour/getting-started/">官方文档</a></p>
<h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><h5 id="插件安装失败"><a href="#插件安装失败" class="headerlink" title="插件安装失败"></a>插件安装失败</h5><p>登录重启页重启后重试<br><a href="http://localhost:8081/restart">http://localhost:8081/restart</a></p>
<h5 id="需安装-Jenkins-插件"><a href="#需安装-Jenkins-插件" class="headerlink" title="需安装 Jenkins 插件"></a>需安装 Jenkins 插件</h5><p>Git、MSBuild、NuGet、PowerShell</p>
<h5 id="配置系统环境变量"><a href="#配置系统环境变量" class="headerlink" title="配置系统环境变量"></a>配置系统环境变量</h5><p>Path 下增加 MSBuild 路径：<br>..\Microsoft Visual Studio\2019\Preview\MSBuild\Current\Bin\amd64</p>
<h5 id="NuGet-控制台程序下载"><a href="#NuGet-控制台程序下载" class="headerlink" title="NuGet 控制台程序下载"></a>NuGet 控制台程序下载</h5><p><a href="https://www.nuget.org/downloads">https://www.nuget.org/downloads</a><br>下载后拷贝至 Path 环境变量中</p>
<h4 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h4><h5 id="Pull-Git-代码"><a href="#Pull-Git-代码" class="headerlink" title="Pull Git 代码"></a>Pull Git 代码</h5><p>填写 Git 地址以及分支名称即可<br><img src="https://sadness96.github.io/images/blog/software-Jenkins/%E6%BA%90%E7%A0%81%E7%AE%A1%E7%90%86.png"/></p>
<h6 id="设置-Git-用户名密码"><a href="#设置-Git-用户名密码" class="headerlink" title="设置 Git 用户名密码"></a>设置 Git 用户名密码</h6><p>如果本地 Git 记录用户无权限访问则会报错：<br><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">Failed to connect to repository : Command &quot;git.exe ls-remote -h -- http://192.168.5.188:9090/***/***.git HEAD&quot; returned status code 128:</span><br><span class="line"><span class="function">stdout:</span></span><br><span class="line"><span class="function"><span class="title">stderr</span>: <span class="title">remote</span>: <span class="title">HTTP</span> <span class="title">Basic</span>: <span class="title">Access</span> <span class="title">denied</span></span></span><br><span class="line"><span class="function"><span class="title">fatal</span>: <span class="title">Authentication</span> <span class="title">failed</span> <span class="title">for</span> &#x27;<span class="title">http</span>://192.168.5.188:9090/***/***.<span class="title">git</span>/&#x27;</span></span><br></pre></td></tr></table></figure><br>选择：凭据→系统→全局凭据<br><img src="https://sadness96.github.io/images/blog/software-Jenkins/CredentialConfig1.png"/></p>
<p>选择：添加凭据<br><img src="https://sadness96.github.io/images/blog/software-Jenkins/CredentialConfig2.png"/></p>
<p>配置：Git 用户名密码<br><img src="https://sadness96.github.io/images/blog/software-Jenkins/CredentialConfig3.png"/></p>
<p>配置：Credentials 中选择添加的凭据<br><img src="https://sadness96.github.io/images/blog/software-Jenkins/CredentialConfig4.png"/></p>
<h5 id="还原-NuGet-包"><a href="#还原-NuGet-包" class="headerlink" title="还原 NuGet 包"></a>还原 NuGet 包</h5><p>构建中选择：执行 Windows 批处理程序<br><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">:: 清空项目中多余文件</span><br><span class="line">git checkout . &amp;&amp; git clean -xdf</span><br><span class="line">:: nuget 引用</span><br><span class="line">nuget <span class="built_in">restore</span> project.sln</span><br></pre></td></tr></table></figure><br><img src="https://sadness96.github.io/images/blog/software-Jenkins/nuget.png"/></p>
<h5 id="编译代码-客户端"><a href="#编译代码-客户端" class="headerlink" title="编译代码(客户端)"></a>编译代码(客户端)</h5><p>构建中选择：Build a Visual Studio project or solution using MSBuild</p>
<table>
<thead>
<tr>
<th>function</th>
<th>value</th>
</tr>
</thead>
<tbody>
<tr>
<td>MSBuild Version</td>
<td>Default</td>
</tr>
<tr>
<td>MSBuild Build File</td>
<td>project.sln</td>
</tr>
<tr>
<td>Command Line Arguments</td>
<td>/t:Build /p:Configuration=Release;VisualStudioVersion=16.3</td>
</tr>
</tbody>
</table>
<p><img src="https://sadness96.github.io/images/blog/software-Jenkins/msbuild.png"/></p>
<p>编译时如需选择解决方案配置和解决方案平台<br><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">:: 解决方案配置“Release|Any CPU”</span><br><span class="line">MSBuild project.sln /property:Configuration=Release</span><br><span class="line">:: 解决方案配置“Debug|x86”</span><br><span class="line">MSBuild project.sln /property:Configuration=Debug /property:Platform=x86</span><br><span class="line">:: 解决方案配置“Release|x64”</span><br><span class="line">MSBuild project.sln /property:Configuration=Release /property:Platform=x64</span><br></pre></td></tr></table></figure></p>
<h5 id="编译代码-服务端"><a href="#编译代码-服务端" class="headerlink" title="编译代码(服务端)"></a>编译代码(服务端)</h5><p>调用发布文件 .\Properties\PublishProfiles\FolderProfile.pubxml<br>测试 MSBuild 命令中加入 VisualStudioVersion=16.3 会导致不会生成发布目录<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">此文件由 Web 项目的发布/打包过程使用。可以通过编辑此 MSBuild 文件</span></span><br><span class="line"><span class="comment">自定义此过程的行为。为了解与此相关的更多内容，请访问 https://go.microsoft.com/fwlink/?LinkID=208121。 </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">ToolsVersion</span>=<span class="string">&quot;4.0&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">WebPublishMethod</span>&gt;</span>FileSystem<span class="tag">&lt;/<span class="name">WebPublishMethod</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PublishProvider</span>&gt;</span>FileSystem<span class="tag">&lt;/<span class="name">PublishProvider</span>&gt;</span>3</span><br><span class="line">    <span class="tag">&lt;<span class="name">LastUsedBuildConfiguration</span>&gt;</span>Release<span class="tag">&lt;/<span class="name">LastUsedBuildConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LastUsedPlatform</span>&gt;</span>Any CPU<span class="tag">&lt;/<span class="name">LastUsedPlatform</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SiteUrlToLaunchAfterPublish</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LaunchSiteAfterPublish</span>&gt;</span>True<span class="tag">&lt;/<span class="name">LaunchSiteAfterPublish</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ExcludeApp_Data</span>&gt;</span>False<span class="tag">&lt;/<span class="name">ExcludeApp_Data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">publishUrl</span>&gt;</span>.\bin\Release\PublishOutput<span class="tag">&lt;/<span class="name">publishUrl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DeleteExistingFiles</span>&gt;</span>True<span class="tag">&lt;/<span class="name">DeleteExistingFiles</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th>function</th>
<th>value</th>
</tr>
</thead>
<tbody>
<tr>
<td>MSBuild Version</td>
<td>Default</td>
</tr>
<tr>
<td>MSBuild Build File</td>
<td>project.sln</td>
</tr>
<tr>
<td>Command Line Arguments</td>
<td>/t:Build /p:Configuration=Release /p:DeployOnBuild=True /p:PublishProfile=FolderProfile</td>
</tr>
</tbody>
</table>
<p><img src="https://sadness96.github.io/images/blog/software-Jenkins/msbuildasp.png"/></p>
<h5 id="拷贝或删除多余文件"><a href="#拷贝或删除多余文件" class="headerlink" title="拷贝或删除多余文件"></a>拷贝或删除多余文件</h5><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">:: 拷贝文件</span><br><span class="line"><span class="built_in">xcopy</span> /s/c/h/y .\<span class="number">9</span>.Reference\MediaAccessSDK\Release .\bin\Release\MediaAccessSDK\Release\</span><br><span class="line"></span><br><span class="line">:: 删除多余的pdb和xml</span><br><span class="line"><span class="built_in">del</span> /s bin\Release\*.pdb</span><br><span class="line"><span class="built_in">del</span> /s bin\Release\*.xml</span><br></pre></td></tr></table></figure>
<p><img src="https://sadness96.github.io/images/blog/software-Jenkins/copydel.png"/></p>
<h5 id="程序打包"><a href="#程序打包" class="headerlink" title="程序打包"></a>程序打包</h5><p>构建中选择：执行 Windows 批处理程序<br><a href="https://nsis.sourceforge.io/Main_Page">NSIS</a> 使用参考：<a href="http://sadness96.github.io/blog/2018/11/24/software-Nsis/">使用介绍</a><br><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">:: 调用 makensis 命令构建 NSI</span><br><span class="line">makensis PanoramaClientSetup.nsi</span><br></pre></td></tr></table></figure><br><img src="https://sadness96.github.io/images/blog/software-Jenkins/nsis.png"/></p>
<h5 id="压缩文件打包"><a href="#压缩文件打包" class="headerlink" title="压缩文件打包"></a>压缩文件打包</h5><p>构建中选择：PowerShell<br><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 调用 PowerShell 命令压缩文件</span><br><span class="line"></span><br><span class="line"># 压缩文件</span><br><span class="line">Compress-Archive -<span class="built_in">Path</span> .\test -DestinationPath .\test.zip</span><br><span class="line"># 解压缩文件</span><br><span class="line">Expand-Archive -<span class="built_in">Path</span> .\test.zip -DestinationPath .\test</span><br></pre></td></tr></table></figure><br><img src="https://sadness96.github.io/images/blog/software-Jenkins/zipfile.png"/></p>
<h4 id="构建后操作"><a href="#构建后操作" class="headerlink" title="构建后操作"></a>构建后操作</h4><h5 id="归档成品"><a href="#归档成品" class="headerlink" title="归档成品"></a>归档成品</h5><p>在归档成品中直接写入打包好的安装包名称，会在构建结束后在结果中显示并可以直接下载<br><img src="https://sadness96.github.io/images/blog/software-Jenkins/归档成品.png"/></p>
<p><img src="https://sadness96.github.io/images/blog/software-Jenkins/结果.png"/></p>
<p><span id='SonarQube'/></p>
<h4 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h4><h5 id="提示-‘xxx’-不是内部或外部命令，也不是可运行的程序或批处理文件。"><a href="#提示-‘xxx’-不是内部或外部命令，也不是可运行的程序或批处理文件。" class="headerlink" title="提示 ‘xxx’ 不是内部或外部命令，也不是可运行的程序或批处理文件。"></a>提示 ‘xxx’ 不是内部或外部命令，也不是可运行的程序或批处理文件。</h5><p>通常这个提示代表着环境变量配置错误，但是检测时发现系统环境变量配置正常，可以在 Jenkins 目录中手动执行命令操作，重启电脑和 Jenkins 后依然无效。<br>解决方式：选择 Jenkins → 左下角“构建执行状态” → 右侧齿轮标志“设置” → 节点属性 → 新增“Environment variables” → 拷贝报错(或全部)的环境变量到此处 → 保存</p>
<ul>
<li>无法识别环境变量中的：%SystemRoot%\，改用绝对路径。</li>
</ul>
<p><img src="https://sadness96.github.io/images/blog/software-Jenkins/PathError.png"/></p>
<h4 id="集成-SonarQube"><a href="#集成-SonarQube" class="headerlink" title="集成 SonarQube"></a>集成 SonarQube</h4><p>安装使用 SonarQube 参考博客：<a href="http://sadness96.github.io/blog/2020/01/16/software-SonarQube/">SonarQube 使用介绍</a></p>
<h5 id="SonarQube-创建-Jenkins-ToKen"><a href="#SonarQube-创建-Jenkins-ToKen" class="headerlink" title="SonarQube 创建 Jenkins ToKen"></a>SonarQube 创建 Jenkins ToKen</h5><p><img src="https://sadness96.github.io/images/blog/software-Jenkins/SonarQubeJenkinsToKens.png"/></p>
<h5 id="下载插件-SonarQube-Scanner"><a href="#下载插件-SonarQube-Scanner" class="headerlink" title="下载插件 SonarQube Scanner"></a>下载插件 SonarQube Scanner</h5><p><img src="https://sadness96.github.io/images/blog/software-Jenkins/SonarQubeScanner.png"/></p>
<h5 id="Jenkins-配置-SonarQube"><a href="#Jenkins-配置-SonarQube" class="headerlink" title="Jenkins 配置 SonarQube"></a>Jenkins 配置 SonarQube</h5><p>添加凭据：<br><img src="https://sadness96.github.io/images/blog/software-Jenkins/SonarQubeCredentials.png"/></p>
<h5 id="配置插件-SonarQube-Scanner"><a href="#配置插件-SonarQube-Scanner" class="headerlink" title="配置插件 SonarQube Scanner"></a>配置插件 SonarQube Scanner</h5><p>系统管理→系统配置→SonarQube servers<br><img src="https://sadness96.github.io/images/blog/software-Jenkins/ConfigSonarQubeServers1.png"/></p>
<h5 id="配置插件-SonarQube-Scanner-1"><a href="#配置插件-SonarQube-Scanner-1" class="headerlink" title="配置插件 SonarQube Scanner"></a>配置插件 SonarQube Scanner</h5><p>系统管理→全局工具配置→SonarQube Scanner<br><img src="https://sadness96.github.io/images/blog/software-Jenkins/ConfigSonarQubeServers2.png"/></p>
<h5 id="配置插件-SonarScanner-for-MSBuild"><a href="#配置插件-SonarScanner-for-MSBuild" class="headerlink" title="配置插件 SonarScanner for MSBuild"></a>配置插件 SonarScanner for MSBuild</h5><p>系统管理→全局工具配置→SonarScanner for MSBuild<br><img src="https://sadness96.github.io/images/blog/software-Jenkins/ConfigSonarScannerForMSBuild.png"/></p>
<h5 id="配置插件-JDK"><a href="#配置插件-JDK" class="headerlink" title="配置插件 JDK"></a>配置插件 JDK</h5><p>系统管理→全局工具配置→JDK<br><img src="https://sadness96.github.io/images/blog/software-Jenkins/ConfigJDK.png"/></p>
<h5 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h5><p>增加配置：<br>构建中选择：SonarScanner for MSBuild - Begin Analyoio<br>配置项 Project key 与 Project name 与 创建 SonarQube 中的 Project key 与 Project name 对应<br>在 MSBuild 后选择： SonarScanner for MSBuild - End Analyoio<br><img src="https://sadness96.github.io/images/blog/software-Jenkins/SonarScannerforMSBuild.png"/></p>
<h4 id="2022年3月15日补充"><a href="#2022年3月15日补充" class="headerlink" title="2022年3月15日补充"></a>2022年3月15日补充</h4><h5 id="通过-WebHook-触发-tag-自动构建"><a href="#通过-WebHook-触发-tag-自动构建" class="headerlink" title="通过 WebHook 触发 tag 自动构建"></a>通过 WebHook 触发 tag 自动构建</h5><p>确保安装 <a href="https://plugins.jenkins.io/gitlab-plugin/">GitLab</a> 插件<br>先在 Jenkins 中创建构建触发器：<br>构建触发器 -&gt; 勾选：Build when a change is pushed to GitLab。<br>右侧显示：GitLab webhook URL:…… 为 WebHook API 地址，用于填写到 GitLab 中。<br><img src="https://sadness96.github.io/images/blog/software-Jenkins/构建触发器.jpg"/></p>
<p>点击标签内高级按钮 -&gt; Allowed branches 选择触发的分支（默认 Allow all branches to trigger this job 为所有分支都可以触发） -&gt; Secret token 点击 Generate 按钮 生成 Token，用于填写到 GitLab 中。<br><img src="https://sadness96.github.io/images/blog/software-Jenkins/构建触发器高级.jpg"/></p>
<p>GitLab 中项目仓库：设置 -&gt; 集成 -&gt; 填写从 Jenkins 中获取的 WebHook Url 和 Secret Token -&gt; 勾选 Trigger 中的触发类型，当前项目仅需要 Tag 触发。<br><img src="https://sadness96.github.io/images/blog/software-Jenkins/设置Hook.jpg"/></p>
<p>点击 Add webhook 按钮 保存设置，在下方 Project Hooks 中显示所有已有信息，点击 Test 可测试请求。<br><img src="https://sadness96.github.io/images/blog/software-Jenkins/测试请求.jpg"/></p>
<h5 id="构建后上传至-FTP"><a href="#构建后上传至-FTP" class="headerlink" title="构建后上传至 FTP"></a>构建后上传至 FTP</h5><p>确保安装 <a href="https://plugins.jenkins.io/publish-over-ftp/">Publish Over FTP</a> 插件<br>Jenkins 配置中添加：FTP repository hosts<br><img src="https://sadness96.github.io/images/blog/software-Jenkins/设置FTP.jpg"/></p>
<p>项目构建后操作中添加：Send build artifacts over FTP -&gt; 选择 FTP Name -&gt; 填写匹配上传的 Source files -&gt; 填写 Remote directory<br><img src="https://sadness96.github.io/images/blog/software-Jenkins/配置FTP.jpg"/></p>
]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>software</tag>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Depends 使用介绍</title>
    <url>/blog/2018/08/01/software-Depends/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/software-Depends/depends.jpg"/></p>
<span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><a href="http://www.dependencywalker.com/">Depends</a>：可以扫描任何32位或64位Windows模块（exe，dll，ocx，sys等），并构建所有相关模块的分层树形图。对于找到的每个模块，它列出了该模块导出的所有函数，以及其他模块实际调用了哪些函数。另一个视图显示所需文件的最小集合，以及每个文件的详细信息，包括文件的完整路径，基本地址，版本号，机器类型，调试信息等。对于解决与加载和执行模块相关的系统错误也非常有用。Dependency Walker检测到许多常见的应用程序问题，例如缺少模块，模块无效，导入/导出不匹配，循环依赖性错误，模块的机器类型不匹配以及模块初始化失败。<br>工作中需要使用到 <a href="/blog/2018/08/01/cpp-HybridCSharp/">C#/C++ 混合编程</a>，或者安装一个软件后提示丢失某些类库导致无法运行时，Depends是最好的选择。</p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><h5 id="引用类库缺少"><a href="#引用类库缺少" class="headerlink" title="引用类库缺少"></a>引用类库缺少</h5><p>软件安装包或开发环境提示错误：无法加载 DLL“xxx.dll”: 找不到指定的模块。使用Depends检查缺少模块，模块无效的库。<br>下图：<a href="https://opencv.org/">OpenCV</a> 使用 <a href="https://visualstudio.microsoft.com/zh-hans/downloads/">Visual Studio</a> 2015 开发缺少mfc120d.dll、msvcr120d.dll、msvcp120d.dll库<br><img src="https://sadness96.github.io/images/blog/software-Depends/LackDLL.png"/></p>
<h5 id="C-C-开发"><a href="#C-C-开发" class="headerlink" title="C/C++开发"></a>C/C++开发</h5><p>方法声明为C++方法时，<a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.dllimportattribute?redirectedfrom=MSDN&amp;view=netframework-4.8">DllImport</a> 引用被不明方法加密，调用时需拷贝对应方法的Function名字粘贴到EntryPoint。<br><img src="https://sadness96.github.io/images/blog/software-Depends/C-CPP.jpg"/></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">DllImport(@<span class="meta-string">&quot;CPP_Demo.dll&quot;</span>, EntryPoint = <span class="meta-string">&quot;?filePath@@YAPADPAD@Z&quot;</span>, CallingConvention = CallingConvention.Cdecl, CharSet = CharSet.Unicode)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">filePath</span>(<span class="params">IntPtr filePath</span>)</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>depends</tag>
        <tag>software</tag>
      </tags>
  </entry>
  <entry>
    <title>Jmeter 使用介绍</title>
    <url>/blog/2020/12/25/software-Jmeter/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/software-Jmeter/JMeterLogo.png"/></p>
<span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://jmeter.apache.org/">Apache JMeter</a> 是Apache组织开发的基于Java的压力测试工具。用于对软件做压力测试，它最初被设计用于Web应用测试，但后来扩展到其他测试领域。<br>对测试并不是很熟悉，跟朋友聊天时提到了这个软件，正好也想对自己原来做的东西做一下压力测试，结果实实在在的发现了不少问题。</p>
<h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><h4 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h4><p><a href="https://www.oracle.com/java/technologies/">Java 8+</a></p>
<h4 id="下载安装-Jmeter"><a href="#下载安装-Jmeter" class="headerlink" title="下载安装 Jmeter"></a>下载安装 Jmeter</h4><p><a href="https://jmeter.apache.org/download_jmeter.cgi">apache jmeter</a><br>解压文件</p>
<h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><table>
<thead>
<tr>
<th>变量名</th>
<th>变量值</th>
</tr>
</thead>
<tbody>
<tr>
<td>JMETER_HOME</td>
<td>解压路径</td>
</tr>
<tr>
<td>Path</td>
<td>%JMETER_HOME%\bin</td>
</tr>
</tbody>
</table>
<h4 id="控制台输入-jmeter-即可运行"><a href="#控制台输入-jmeter-即可运行" class="headerlink" title="控制台输入 jmeter 即可运行"></a>控制台输入 jmeter 即可运行</h4><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">PS C:\Users\Administrator&gt; jmeter</span><br><span class="line">================================================================================</span><br><span class="line">Don&#x27;t use GUI <span class="built_in">mode</span> <span class="keyword">for</span> load testing !, only <span class="keyword">for</span> Test creation and Test debugging.</span><br><span class="line"><span class="keyword">For</span> load testing, use CLI <span class="built_in">Mode</span> (was NON GUI):</span><br><span class="line">   jmeter -n -t [jmx file] -l [results file] -e -o [<span class="built_in">Path</span> to web report folder]</span><br><span class="line">&amp; increase Java Heap to meet your test requirements:</span><br><span class="line">   Modify current env variable HEAP=&quot;-Xms1g -Xmx1g -XX:MaxMetaspaceSize=<span class="number">256</span>m&quot; <span class="keyword">in</span> the jmeter batch file</span><br><span class="line">Check : https://jmeter.apache.org/usermanual/best-practices.html</span><br><span class="line">================================================================================</span><br></pre></td></tr></table></figure>
<h4 id="初步使用"><a href="#初步使用" class="headerlink" title="初步使用"></a>初步使用</h4><h5 id="添加线程组"><a href="#添加线程组" class="headerlink" title="添加线程组"></a>添加线程组</h5><p>可在线程组中设置压力测试线程数量以及重复次数<br><img src="https://sadness96.github.io/images/blog/software-Jmeter/添加线程组.png"/></p>
<h5 id="添加自定义变量"><a href="#添加自定义变量" class="headerlink" title="添加自定义变量"></a>添加自定义变量</h5><p>创建自定义变量，在后续的配置中使用可随时调用<br><img src="https://sadness96.github.io/images/blog/software-Jmeter/添加自定义变量.png"/></p>
<h5 id="添加信息头管理器"><a href="#添加信息头管理器" class="headerlink" title="添加信息头管理器"></a>添加信息头管理器</h5><p>用于请求默认信息头，例如：<br>content-type：application/json; charset=UTF-8<br><img src="https://sadness96.github.io/images/blog/software-Jmeter/添加信息头管理器.png"/></p>
<h5 id="http-请求"><a href="#http-请求" class="headerlink" title="http 请求"></a>http 请求</h5><p>可直接用 “${}” 的方式直接使用前面添加的自定义变量<br><img src="https://sadness96.github.io/images/blog/software-Jmeter/http请求_用户登录.png"/></p>
<h5 id="正则表达式提取-Token"><a href="#正则表达式提取-Token" class="headerlink" title="正则表达式提取 Token"></a>正则表达式提取 Token</h5><p>正常情况下多数接口都需要通过 Token 认证在能访问，但是 Token 通常从登录接口中返回，通过正则表达式匹配到 Token 数据存为自定义变量使用<br><img src="https://sadness96.github.io/images/blog/software-Jmeter/正则提取器_提取token存为变量.png"/></p>
<h5 id="提取到的-Token-变量存入信息头管理器"><a href="#提取到的-Token-变量存入信息头管理器" class="headerlink" title="提取到的 Token 变量存入信息头管理器"></a>提取到的 Token 变量存入信息头管理器</h5><p>Token 的使用方法可能不仅限于通过参数传递，也可能通过信息头来传递<br><img src="https://sadness96.github.io/images/blog/software-Jmeter/Token添加至头信息管理器.png"/></p>
<h5 id="调用带-Token-认证的-http-请求"><a href="#调用带-Token-认证的-http-请求" class="headerlink" title="调用带 Token 认证的 http 请求"></a>调用带 Token 认证的 http 请求</h5><p><img src="https://sadness96.github.io/images/blog/software-Jmeter/需要Token认证的http请求.png"/></p>
<h5 id="添加结果树与报告"><a href="#添加结果树与报告" class="headerlink" title="添加结果树与报告"></a>添加结果树与报告</h5><p>可在线程组下添加结果树与报告树图标等统计结果，点击顶部绿色三角等待完成压力测试<br><img src="https://sadness96.github.io/images/blog/software-Jmeter/添加结果树与报告.png"/></p>
<h4 id="使用-Badboy-录制"><a href="#使用-Badboy-录制" class="headerlink" title="使用 Badboy 录制"></a>使用 Badboy 录制</h4><p>个人感觉配置 Jmeter 是一件很麻烦的事情，可以使用第三方工具 <a href="http://www.badboy.com.au/">Badboy</a> 录制操作并导出为 .jmx 格式后由 Jmeter 测试。<br>官方网站打不开可以从 <a href="https://badboy.en.softonic.com/">softonic</a> 下载</p>
]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>software</tag>
        <tag>jmeter</tag>
      </tags>
  </entry>
  <entry>
    <title>Locale-Emulator 使用介绍</title>
    <url>/blog/2021/12/28/software-LocaleEmulator/</url>
    <content><![CDATA[<p><img src="https://camo.githubusercontent.com/bc5745f2fc88d0dd190453dd2bb6b55bd4bf69c14a9b5a85a1e68b2ddeb14d73/68747470733a2f2f692e696d6775722e636f6d2f45344771796c792e706e67"/></p>
<span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>近日旧友邀请一起玩新改版的<a href="https://la.mangot5.com/la/index">彩虹岛物语(台服)</a>，运行之后就遇到了问题，由于系统语言时区与程序不符导致的乱码，虽然可以通过修改系统默认语言和时区达到显示正常，但是显然不是长久之计，而且很麻烦，最后找到开源项目：<a href="https://github.com/xupefei/Locale-Emulator">Locale-Emulator</a> 解决。</p>
<p><a href="https://github.com/xupefei/Locale-Emulator">Locale-Emulator</a> 是一种类似于 MS AppLocale 和 NTLEA 的工具，提供了一种模拟功能，可以使应用程序将您的操作系统识别为使用不同于真实语言的语言。当您尝试玩特定国家/地区的游戏时，它非常有用。</p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ol>
<li>运行 LEInstaller.exe 并按“安装/升级”按钮。</li>
<li><p>配置程序：对需要模拟的程序或快捷方式右键菜单 → Locale Emulator → 修改此程序的配置。例：设置为台服修改繁体与时区。<br> <img src="https://sadness96.github.io/images/blog/software-LocaleEmulator/LeguiConfig.png"/></p>
</li>
<li><p>运行程序：对需要模拟的程序或快捷方式右键菜单 → Locale Emulator → 以此程序配置运行。<br> <img src="https://sadness96.github.io/images/blog/software-LocaleEmulator/LeguiRun.png"/></p>
</li>
</ol>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><h4 id="修改前"><a href="#修改前" class="headerlink" title="修改前"></a>修改前</h4><p><img src="https://sadness96.github.io/images/blog/software-LocaleEmulator/style1.jpg"/></p>
<h4 id="修改后"><a href="#修改后" class="headerlink" title="修改后"></a>修改后</h4><p><img src="https://sadness96.github.io/images/blog/software-LocaleEmulator/style2.jpg"/></p>
]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>software</tag>
        <tag>localeemulator</tag>
      </tags>
  </entry>
  <entry>
    <title>Nsis 使用介绍</title>
    <url>/blog/2018/11/24/software-Nsis/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/software-Nsis/HM-VNISEdit.jpg"/></p>
<span id="more"></span>
<h3 id="基于-NSIS-的-Windows-桌面端打包程序"><a href="#基于-NSIS-的-Windows-桌面端打包程序" class="headerlink" title="基于 NSIS 的 Windows 桌面端打包程序"></a>基于 NSIS 的 Windows 桌面端打包程序</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><a href="https://nsis.sourceforge.io/Main_Page">NSIS（Nullsoft Scriptable Install System）</a>是一个专业的开源系统，用于创建Windows安装程序。它的设计尽可能小巧灵活，因此非常适合互联网分发。<br>只做了一个最基础安装包程序，如需定制样式可查阅官方网站。</p>
<h4 id="安装包截图"><a href="#安装包截图" class="headerlink" title="安装包截图"></a>安装包截图</h4><p><img src="https://sadness96.github.io/images/blog/software-Nsis/install1.png"/><br><img src="https://sadness96.github.io/images/blog/software-Nsis/install2.png"/><br><img src="https://sadness96.github.io/images/blog/software-Nsis/install3.png"/><br><img src="https://sadness96.github.io/images/blog/software-Nsis/install4.png"/></p>
<h4 id="脚本代码"><a href="#脚本代码" class="headerlink" title="脚本代码"></a>脚本代码</h4><p>替换脚本中 “#” 开头的部分即可<br><figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line"><span class="comment">; 自定义常量</span></span><br><span class="line"><span class="keyword">!define</span> MainWindow <span class="string">&quot;#主程序名称&quot;</span></span><br><span class="line"><span class="keyword">!define</span> /date PRODUCT_TIME %Y%m%d%H%M</span><br><span class="line"><span class="keyword">!if</span>def ClientVersion</span><br><span class="line"><span class="keyword">!else</span></span><br><span class="line">  <span class="keyword">!define</span> ClientVersion <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="keyword">!endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 安装程序初始定义常量</span></span><br><span class="line"><span class="keyword">!define</span> PRODUCT_NAME <span class="string">&quot;#产品名称&quot;</span></span><br><span class="line"><span class="keyword">!define</span> PRODUCT_VERSION <span class="variable">$&#123;ClientVersion&#125;</span></span><br><span class="line"><span class="keyword">!define</span> PRODUCT_PUBLISHER <span class="string">&quot;#产品发布者&quot;</span></span><br><span class="line"><span class="keyword">!define</span> PRODUCT_WEB_SITE <span class="string">&quot;#产品官网&quot;</span></span><br><span class="line"><span class="keyword">!define</span> PRODUCT_DIR_REGKEY <span class="string">&quot;Software\Microsoft\Windows\CurrentVersion\App Paths\<span class="variable">$&#123;MainWindow&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">!define</span> PRODUCT_UNINST_KEY <span class="string">&quot;Software\Microsoft\Windows\CurrentVersion\Uninstall\<span class="variable">$&#123;PRODUCT_NAME&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">!define</span> PRODUCT_UNINST_ROOT_KEY <span class="string">&quot;HKLM&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SetCompressor</span> <span class="literal">lzma</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; ------ MUI 现代界面定义 (1.67 版本以上兼容) ------</span></span><br><span class="line"><span class="keyword">!include</span> <span class="string">&quot;MUI.nsh&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; MUI 预定义常量</span></span><br><span class="line"><span class="keyword">!define</span> MUI_ABORTWARNING</span><br><span class="line"><span class="keyword">!define</span> MUI_ICON <span class="string">&quot;<span class="variable">$&#123;NSISDIR&#125;</span>\Contrib\Graphics\Icons\modern-install.ico&quot;</span></span><br><span class="line"><span class="keyword">!define</span> MUI_UNICON <span class="string">&quot;<span class="variable">$&#123;NSISDIR&#125;</span>\Contrib\Graphics\Icons\modern-uninstall.ico&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 欢迎页面</span></span><br><span class="line"><span class="keyword">!insertmacro</span> MUI_PAGE_WELCOME</span><br><span class="line"><span class="comment">; 许可协议页面</span></span><br><span class="line"><span class="keyword">!insertmacro</span> MUI_PAGE_LICENSE <span class="string">&quot;许可协议.txt&quot;</span></span><br><span class="line"><span class="comment">; 安装目录选择页面</span></span><br><span class="line"><span class="keyword">!insertmacro</span> MUI_PAGE_DIRECTORY</span><br><span class="line"><span class="comment">; 安装过程页面</span></span><br><span class="line"><span class="keyword">!insertmacro</span> MUI_PAGE_INSTFILES</span><br><span class="line"><span class="comment">; 安装完成页面</span></span><br><span class="line"><span class="keyword">!define</span> MUI_FINISHPAGE_RUN <span class="string">&quot;<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;MainWindow&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">!insertmacro</span> MUI_PAGE_FINISH</span><br><span class="line"></span><br><span class="line"><span class="comment">; 安装卸载过程页面</span></span><br><span class="line"><span class="keyword">!insertmacro</span> MUI_UNPAGE_INSTFILES</span><br><span class="line"></span><br><span class="line"><span class="comment">; 安装界面包含的语言设置</span></span><br><span class="line"><span class="keyword">!insertmacro</span> MUI_LANGUAGE <span class="string">&quot;SimpChinese&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 安装预释放文件</span></span><br><span class="line"><span class="keyword">!insertmacro</span> MUI_RESERVEFILE_INSTALLOPTIONS</span><br><span class="line"><span class="comment">; ------ MUI 现代界面定义结束 ------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Name</span> <span class="string">&quot;<span class="variable">$&#123;PRODUCT_NAME&#125;</span> <span class="variable">$&#123;PRODUCT_VERSION&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">OutFile</span> <span class="string">&quot;<span class="variable">$&#123;PRODUCT_NAME&#125;</span>Setup_<span class="variable">$&#123;ClientVersion&#125;</span>_<span class="variable">$&#123;PRODUCT_TIME&#125;</span>.exe&quot;</span></span><br><span class="line"><span class="keyword">InstallDir</span> <span class="string">&quot;<span class="variable">$PROGRAMFILES64</span>\<span class="variable">$&#123;PRODUCT_PUBLISHER&#125;</span>\<span class="variable">$&#123;PRODUCT_NAME&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">InstallDirRegKey</span> <span class="params">HKLM</span> <span class="string">&quot;<span class="variable">$&#123;PRODUCT_UNINST_KEY&#125;</span>&quot;</span> <span class="string">&quot;UninstallString&quot;</span></span><br><span class="line"><span class="keyword">ShowInstDetails</span> <span class="literal">show</span></span><br><span class="line">ShowUnInstDetails <span class="literal">show</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">Section</span> &quot;MainSection&quot; SEC01</span></span><br><span class="line">	<span class="keyword">ExecWait</span> <span class="string">&quot;taskkill /f /im <span class="variable">$&#123;MainWindow&#125;</span>&quot;</span></span><br><span class="line">  <span class="keyword">SetOutPath</span> <span class="string">&quot;<span class="variable">$INSTDIR</span>&quot;</span></span><br><span class="line">  <span class="keyword">SetOverwrite</span> <span class="literal">ifnewer</span></span><br><span class="line">  <span class="keyword">CreateDirectory</span> <span class="string">&quot;<span class="variable">$SMPROGRAMS</span>\<span class="variable">$&#123;PRODUCT_NAME&#125;</span>&quot;</span></span><br><span class="line">  <span class="keyword">CreateShortCut</span> <span class="string">&quot;<span class="variable">$SMPROGRAMS</span>\<span class="variable">$&#123;PRODUCT_NAME&#125;</span>\<span class="variable">$&#123;PRODUCT_NAME&#125;</span>.lnk&quot;</span> <span class="string">&quot;<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;MainWindow&#125;</span>&quot;</span></span><br><span class="line">  <span class="keyword">CreateShortCut</span> <span class="string">&quot;<span class="variable">$DESKTOP</span>\<span class="variable">$&#123;PRODUCT_NAME&#125;</span>.lnk&quot;</span> <span class="string">&quot;<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;MainWindow&#125;</span>&quot;</span></span><br><span class="line">  <span class="keyword">File</span> /r <span class="string">&quot;bin\Release\*.*&quot;</span></span><br><span class="line">  <span class="keyword">ExecWait</span> <span class="string">&#x27;cmd.exe /c takeown /f &quot;<span class="variable">$INSTDIR</span>&quot; /r /d y &amp;&amp; icacls &quot;<span class="variable">$INSTDIR</span>&quot; /grant administrators:F /t&#x27;</span></span><br><span class="line">SectionEnd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">Section</span> -AdditionalIcons</span></span><br><span class="line">  WriteIniStr <span class="string">&quot;<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;PRODUCT_NAME&#125;</span>.url&quot;</span> <span class="string">&quot;InternetShortcut&quot;</span> <span class="string">&quot;URL&quot;</span> <span class="string">&quot;<span class="variable">$&#123;PRODUCT_WEB_SITE&#125;</span>&quot;</span></span><br><span class="line">  <span class="keyword">CreateShortCut</span> <span class="string">&quot;<span class="variable">$SMPROGRAMS</span>\<span class="variable">$&#123;PRODUCT_NAME&#125;</span>\Website.lnk&quot;</span> <span class="string">&quot;<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;PRODUCT_NAME&#125;</span>.url&quot;</span></span><br><span class="line">  <span class="keyword">CreateShortCut</span> <span class="string">&quot;<span class="variable">$SMPROGRAMS</span>\<span class="variable">$&#123;PRODUCT_NAME&#125;</span>\Uninstall.lnk&quot;</span> <span class="string">&quot;<span class="variable">$INSTDIR</span>\uninst.exe&quot;</span></span><br><span class="line">SectionEnd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">Section</span> -Post</span></span><br><span class="line">  <span class="keyword">WriteUninstaller</span> <span class="string">&quot;<span class="variable">$INSTDIR</span>\uninst.exe&quot;</span></span><br><span class="line">  <span class="keyword">WriteRegStr</span> <span class="params">HKLM</span> <span class="string">&quot;<span class="variable">$&#123;PRODUCT_DIR_REGKEY&#125;</span>&quot;</span> <span class="string">&quot;&quot;</span> <span class="string">&quot;<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;MainWindow&#125;</span>&quot;</span></span><br><span class="line">  <span class="keyword">WriteRegStr</span> <span class="variable">$&#123;PRODUCT_UNINST_ROOT_KEY&#125;</span> <span class="string">&quot;<span class="variable">$&#123;PRODUCT_UNINST_KEY&#125;</span>&quot;</span> <span class="string">&quot;DisplayName&quot;</span> <span class="string">&quot;<span class="variable">$(^Name)</span>&quot;</span></span><br><span class="line">  <span class="keyword">WriteRegStr</span> <span class="variable">$&#123;PRODUCT_UNINST_ROOT_KEY&#125;</span> <span class="string">&quot;<span class="variable">$&#123;PRODUCT_UNINST_KEY&#125;</span>&quot;</span> <span class="string">&quot;UninstallString&quot;</span> <span class="string">&quot;<span class="variable">$INSTDIR</span>\uninst.exe&quot;</span></span><br><span class="line">  <span class="keyword">WriteRegStr</span> <span class="variable">$&#123;PRODUCT_UNINST_ROOT_KEY&#125;</span> <span class="string">&quot;<span class="variable">$&#123;PRODUCT_UNINST_KEY&#125;</span>&quot;</span> <span class="string">&quot;DisplayIcon&quot;</span> <span class="string">&quot;<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;MainWindow&#125;</span>&quot;</span></span><br><span class="line">  <span class="keyword">WriteRegStr</span> <span class="variable">$&#123;PRODUCT_UNINST_ROOT_KEY&#125;</span> <span class="string">&quot;<span class="variable">$&#123;PRODUCT_UNINST_KEY&#125;</span>&quot;</span> <span class="string">&quot;DisplayVersion&quot;</span> <span class="string">&quot;<span class="variable">$&#123;PRODUCT_VERSION&#125;</span>&quot;</span></span><br><span class="line">  <span class="keyword">WriteRegStr</span> <span class="variable">$&#123;PRODUCT_UNINST_ROOT_KEY&#125;</span> <span class="string">&quot;<span class="variable">$&#123;PRODUCT_UNINST_KEY&#125;</span>&quot;</span> <span class="string">&quot;URLInfoAbout&quot;</span> <span class="string">&quot;<span class="variable">$&#123;PRODUCT_WEB_SITE&#125;</span>&quot;</span></span><br><span class="line">  <span class="keyword">WriteRegStr</span> <span class="variable">$&#123;PRODUCT_UNINST_ROOT_KEY&#125;</span> <span class="string">&quot;<span class="variable">$&#123;PRODUCT_UNINST_KEY&#125;</span>&quot;</span> <span class="string">&quot;Publisher&quot;</span> <span class="string">&quot;<span class="variable">$&#123;PRODUCT_PUBLISHER&#125;</span>&quot;</span></span><br><span class="line">SectionEnd</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************</span></span><br><span class="line"><span class="comment"> *  以下是安装程序的卸载部分  *</span></span><br><span class="line"><span class="comment"> ******************************/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">Section</span> Uninstall</span></span><br><span class="line">  <span class="keyword">Delete</span> <span class="string">&quot;<span class="variable">$INSTDIR</span>\<span class="variable">$&#123;PRODUCT_NAME&#125;</span>.url&quot;</span></span><br><span class="line">  <span class="keyword">Delete</span> <span class="string">&quot;<span class="variable">$INSTDIR</span>\uninst.exe&quot;</span></span><br><span class="line">  <span class="keyword">Delete</span> <span class="string">&quot;<span class="variable">$INSTDIR</span>\*.*&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">Delete</span> <span class="string">&quot;<span class="variable">$SMPROGRAMS</span>\<span class="variable">$&#123;PRODUCT_NAME&#125;</span>\Uninstall.lnk&quot;</span></span><br><span class="line">  <span class="keyword">Delete</span> <span class="string">&quot;<span class="variable">$SMPROGRAMS</span>\<span class="variable">$&#123;PRODUCT_NAME&#125;</span>\Website.lnk&quot;</span></span><br><span class="line">  <span class="keyword">Delete</span> <span class="string">&quot;<span class="variable">$DESKTOP</span>\<span class="variable">$&#123;PRODUCT_NAME&#125;</span>.lnk&quot;</span></span><br><span class="line">  <span class="keyword">Delete</span> <span class="string">&quot;<span class="variable">$SMPROGRAMS</span>\<span class="variable">$&#123;PRODUCT_NAME&#125;</span>\<span class="variable">$&#123;PRODUCT_NAME&#125;</span>.lnk&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">RMDir</span> <span class="string">&quot;<span class="variable">$SMPROGRAMS</span>\<span class="variable">$&#123;PRODUCT_NAME&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">RMDir</span> /r <span class="string">&quot;<span class="variable">$INSTDIR</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">DeleteRegKey</span> <span class="variable">$&#123;PRODUCT_UNINST_ROOT_KEY&#125;</span> <span class="string">&quot;<span class="variable">$&#123;PRODUCT_UNINST_KEY&#125;</span>&quot;</span></span><br><span class="line">  <span class="keyword">DeleteRegKey</span> <span class="params">HKLM</span> <span class="string">&quot;<span class="variable">$&#123;PRODUCT_DIR_REGKEY&#125;</span>&quot;</span></span><br><span class="line">  <span class="keyword">SetAutoClose</span> <span class="literal">true</span></span><br><span class="line">SectionEnd</span><br><span class="line"></span><br><span class="line"><span class="comment">#-- 根据 NSIS 脚本编辑规则，所有 Function 区段必须放置在 Section 区段之后编写，以避免安装程序出现未可预知的问题。--#</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">Function</span> un.onInit</span></span><br><span class="line">  <span class="keyword">MessageBox</span> <span class="params">MB_ICONQUESTION</span>|<span class="params">MB_YESNO</span>|<span class="params">MB_DEFBUTTON2</span> <span class="string">&quot;您确实要完全移除 <span class="variable">$(^Name)</span> ，及其所有的组件？&quot;</span> <span class="params">IDYES</span> +<span class="number">2</span></span><br><span class="line">  <span class="keyword">Abort</span></span><br><span class="line">FunctionEnd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">Function</span> un.onUninstSuccess</span></span><br><span class="line">  <span class="keyword">HideWindow</span></span><br><span class="line">  <span class="keyword">MessageBox</span> <span class="params">MB_ICONINFORMATION</span>|<span class="params">MB_OK</span> <span class="string">&quot;<span class="variable">$(^Name)</span> 已成功地从您的计算机移除。&quot;</span></span><br><span class="line">FunctionEnd</span><br></pre></td></tr></table></figure></p>
<h4 id="使用命令调用构建打包程序"><a href="#使用命令调用构建打包程序" class="headerlink" title="使用命令调用构建打包程序"></a>使用命令调用构建打包程序</h4><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">:: 调用 makensis 命令构建 NSI</span><br><span class="line">makensis Setup.nsi</span><br></pre></td></tr></table></figure>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">:: 调用 makensis 命令带参数构建 NSI</span><br><span class="line">:: 从文本中读取版本号传入 NSI 中作为常量</span><br><span class="line"><span class="built_in">set</span> /p var= &lt; ClientVersion</span><br><span class="line">makensis /DClientVersion=<span class="variable">%var%</span> Setup.nsi</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>software</tag>
        <tag>nsis</tag>
      </tags>
  </entry>
  <entry>
    <title>OnTopReplica 使用介绍</title>
    <url>/blog/2022/03/06/software-OnTopReplica/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/software-OnTopReplica/WindowsTaskManager.png"/></p>
<span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>闲来无事记录一个 2015 年后偶尔使用的软件。<br><a href="https://github.com/LorenzCK/OnTopReplica">OnTopReplica</a> 用于克隆窗口副本区域显示在其它位置，对于监控后台进程、处理复杂的多窗口游戏或工具、在工作时观看视频等非常有用。</p>
<h3 id="展示效果"><a href="#展示效果" class="headerlink" title="展示效果"></a>展示效果</h3><p>最多应用于 MOBA 类游戏地图副屏展示<br><img src="https://sadness96.github.io/images/blog/software-OnTopReplica/lol.jpg"/></p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="选择运行的窗口"><a href="#选择运行的窗口" class="headerlink" title="选择运行的窗口"></a>选择运行的窗口</h4><p>默认显示一个空白的始终在顶部的窗口，用户可以选择系统的任何其他窗口，以始终在顶部显示目标窗口的最新克隆。<br>鼠标右键 -&gt; Select window -&gt; 目标窗口</p>
<p><img src="https://sadness96.github.io/images/blog/software-OnTopReplica/SelectWindow.jpg"/></p>
<h4 id="选择区域"><a href="#选择区域" class="headerlink" title="选择区域"></a>选择区域</h4><p>可以选择部分区域，鼠标滑轮放大展示。<br>鼠标右键 -&gt; Select region -&gt; 在界面中拖拽矩形 -&gt; Done</p>
<p><img src="https://sadness96.github.io/images/blog/software-OnTopReplica/SelectRegion.jpg"/></p>
]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>software</tag>
        <tag>ontopreplica</tag>
      </tags>
  </entry>
  <entry>
    <title>RDP Wrapper</title>
    <url>/blog/2021/04/22/software-RDPWrapper/</url>
    <content><![CDATA[<h3 id="Windows-家庭版使用-RDP-远程"><a href="#Windows-家庭版使用-RDP-远程" class="headerlink" title="Windows 家庭版使用 RDP 远程"></a>Windows 家庭版使用 RDP 远程</h3><span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Windows 10 家庭版不支持远程桌面(<a href="https://support.microsoft.com/en-us/windows/how-to-use-remote-desktop-5fe128d5-8fb1-7a23-3b8a-41e636865e8c">Remote Desktop Connection(RDP)</a>)功能，微软对其进行了限制，但是可以通过开源项目 <a href="https://github.com/asmtron/rdpwrap">RDP Wrapper</a> 在功能简化的系统上启用远程桌面主机支持和并发RDP会话。</p>
<h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><h4 id="下载最新发布版本"><a href="#下载最新发布版本" class="headerlink" title="下载最新发布版本"></a>下载最新发布版本</h4><p>下载安装或解压缩软件 <a href="https://github.com/stascorp/rdpwrap/releases/">RDP Wrapper Releases</a></p>
<h4 id="安装服务"><a href="#安装服务" class="headerlink" title="安装服务"></a>安装服务</h4><p>以管理员权限运行 Install.bat 文件。<br>安装成功后 “C:\Program Files\RDP Wrapper” 包含配置文件。<br><img src="https://sadness96.github.io/images/blog/software-RDPWrapper/RDPWrapperInstall.png"/></p>
<h4 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h4><h5 id="运行-RDPConf-exe"><a href="#运行-RDPConf-exe" class="headerlink" title="运行 RDPConf.exe"></a>运行 RDPConf.exe</h5><p>显示 Service state: Running<br>显示 Listener state: Listening [fully supported]<br>则为安装成功<br><img src="https://sadness96.github.io/images/blog/software-RDPWrapper/RDPWrapperListenin.png"/></p>
<h5 id="或运行-RDPCheck-exe"><a href="#或运行-RDPCheck-exe" class="headerlink" title="或运行 RDPCheck.exe"></a>或运行 RDPCheck.exe</h5><p>测试远程到本地，显示为远程自身则为安装成功<br><img src="https://sadness96.github.io/images/blog/software-RDPWrapper/RDPWrapperChecker.png"/></p>
<h4 id="异常错误"><a href="#异常错误" class="headerlink" title="异常错误"></a>异常错误</h4><h5 id="Listener-state-提示：Not-listening"><a href="#Listener-state-提示：Not-listening" class="headerlink" title="Listener state 提示：Not listening"></a>Listener state 提示：Not listening</h5><p>由于配置文件中缺少当前版本的配置，版本由 “C:\Windows\System32\termsrv.dll” 文件而来，同 Windows 系统一起更新。<br><img src="https://sadness96.github.io/images/blog/software-RDPWrapper/RDPWrapperNotListenin.png"/></p>
<p>可从 RDP Wrapper Configurgation 中查看文件版本，例如当前版本为：10.0.19041.789，则 “C:\Program Files\RDP Wrapper\rdpwrap.ini” 文件中需包含以下内容，如不存在内容则下载最新版 rdpwrap.ini 文件，关闭 TermService 服务并替换，可参考以下任意最新文件：<br><a href="https://raw.githubusercontent.com/saurav-biswas/rdpwrap-1/master/res/rdpwrap.ini">https://raw.githubusercontent.com/saurav-biswas/rdpwrap-1/master/res/rdpwrap.ini</a><br><a href="https://raw.githubusercontent.com/asmtron/rdpwrap/master/res/rdpwrap.ini">https://raw.githubusercontent.com/asmtron/rdpwrap/master/res/rdpwrap.ini</a><br><a href="https://raw.githubusercontent.com/sebaxakerhtc/rdpwrap.ini/master/rdpwrap.ini">https://raw.githubusercontent.com/sebaxakerhtc/rdpwrap.ini/master/rdpwrap.ini</a><br><a href="https://raw.githubusercontent.com/affinityv/INI-RDPWRAP/master/rdpwrap.ini">https://raw.githubusercontent.com/affinityv/INI-RDPWRAP/master/rdpwrap.ini</a><br><a href="https://raw.githubusercontent.com/DrDrrae/rdpwrap/master/res/rdpwrap.ini">https://raw.githubusercontent.com/DrDrrae/rdpwrap/master/res/rdpwrap.ini</a><br><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[10.0.19041.789]</span></span><br><span class="line"><span class="attr">LocalOnlyPatch.x86</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">LocalOnlyOffset.x86</span>=B59D9</span><br><span class="line"><span class="attr">LocalOnlyCode.x86</span>=jmpshort</span><br><span class="line"><span class="attr">LocalOnlyPatch.x64</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">LocalOnlyOffset.x64</span>=<span class="number">88</span>F41</span><br><span class="line"><span class="attr">LocalOnlyCode.x64</span>=jmpshort</span><br><span class="line"><span class="attr">SingleUserPatch.x86</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">SingleUserOffset.x86</span>=<span class="number">3</span>BC45</span><br><span class="line"><span class="attr">SingleUserCode.x86</span>=nop</span><br><span class="line"><span class="attr">SingleUserPatch.x64</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">SingleUserOffset.x64</span>=<span class="number">0</span>CA4C</span><br><span class="line"><span class="attr">SingleUserCode.x64</span>=Zero</span><br><span class="line"><span class="attr">DefPolicyPatch.x86</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">DefPolicyOffset.x86</span>=<span class="number">3</span>E7C9</span><br><span class="line"><span class="attr">DefPolicyCode.x86</span>=CDefPolicy_Query_eax_ecx</span><br><span class="line"><span class="attr">DefPolicyPatch.x64</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">DefPolicyOffset.x64</span>=<span class="number">18</span>A15</span><br><span class="line"><span class="attr">DefPolicyCode.x64</span>=CDefPolicy_Query_eax_rcx</span><br><span class="line"><span class="attr">SLInitHook.x86</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">SLInitOffset.x86</span>=<span class="number">67</span>BF8</span><br><span class="line"><span class="attr">SLInitFunc.x86</span>=New_CSLQuery_Initialize</span><br><span class="line"><span class="attr">SLInitHook.x64</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">SLInitOffset.x64</span>=<span class="number">1</span>D5BC</span><br><span class="line"><span class="attr">SLInitFunc.x64</span>=New_CSLQuery_Initialize</span><br><span class="line"></span><br><span class="line"><span class="section">[10.0.19041.789-SLInit]</span></span><br><span class="line"><span class="attr">bInitialized.x86</span>      =D0954</span><br><span class="line"><span class="attr">bServerSku.x86</span>        =D0958</span><br><span class="line"><span class="attr">lMaxUserSessions.x86</span>  =D095C</span><br><span class="line"><span class="attr">bAppServerAllowed.x86</span> =D0964</span><br><span class="line"><span class="attr">bRemoteConnAllowed.x86</span>=D096C</span><br><span class="line"><span class="attr">bMultimonAllowed.x86</span>  =D0970</span><br><span class="line"><span class="attr">ulMaxDebugSessions.x86</span>=D0974</span><br><span class="line"><span class="attr">bFUSEnabled.x86</span>       =D0978</span><br><span class="line"><span class="attr">bInitialized.x64</span>      =<span class="number">106028</span></span><br><span class="line"><span class="attr">bServerSku.x64</span>        =<span class="number">10602</span>C</span><br><span class="line"><span class="attr">lMaxUserSessions.x64</span>  =<span class="number">106030</span></span><br><span class="line"><span class="attr">bAppServerAllowed.x64</span> =<span class="number">106038</span></span><br><span class="line"><span class="attr">bRemoteConnAllowed.x64</span>=<span class="number">106040</span></span><br><span class="line"><span class="attr">bMultimonAllowed.x64</span>  =<span class="number">106044</span></span><br><span class="line"><span class="attr">ulMaxDebugSessions.x64</span>=<span class="number">106048</span></span><br><span class="line"><span class="attr">bFUSEnabled.x64</span>       =<span class="number">10604</span>C</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>software</tag>
        <tag>rdpwrap</tag>
      </tags>
  </entry>
  <entry>
    <title>Rose 使用介绍</title>
    <url>/blog/2020/05/11/software-Rose/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/software-Rose/rose_log.png"/></p>
<span id="more"></span>
<h3 id="本地灾备、远程容灾，快速恢复数据和业务"><a href="#本地灾备、远程容灾，快速恢复数据和业务" class="headerlink" title="本地灾备、远程容灾，快速恢复数据和业务"></a>本地灾备、远程容灾，快速恢复数据和业务</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><a href="http://www.rosedata.com/index.php/Prodetail/index/proid/24">RoseReplicator</a>是基于网络的实时数据容灾复制以及业务连续性保护产品，实现生产数据的本地/远程实时容灾备份，保证数据的安全。实时监测应用资源运行状态，实现资源故障时自动/手动应急切换，解决软、硬件的单点故障，提供高级别的容灾保护。</p>
<h4 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h4><p>1.虚拟机（VMware）测试，两台（Windows Server 2016）<br>2.两台机器部署 MySQL，版本 5.7.29<br>3.两台机器部署 RoseReplicatorPlus，版本 5.8.0<br>4.Rose 客服人员微信号：cathy_shen1001<br>5.两台虚拟机IP地址：<br>  主机：192.168.5.210;192.168.6.210;<br>  备机：192.168.5.215;192.168.6.215;<br>  虚拟地址：192.168.5.212;</p>
<h4 id="创建管理软件账户（主备都要创建）"><a href="#创建管理软件账户（主备都要创建）" class="headerlink" title="创建管理软件账户（主备都要创建）"></a>创建管理软件账户（主备都要创建）</h4><p>1.进入安装目录 C:\Program Files\ReplicatorPlus\bin 以管理员方式运行（否则会报 File open error 错误） account.exe 应用程序。<br>2.根据需求创建不同权限的用户。<br>3.输入用户名密码，显示 Change successfully! 注册成功。<br><img src="https://sadness96.github.io/images/blog/software-Rose/注册.png"/></p>
<h4 id="向导安装"><a href="#向导安装" class="headerlink" title="向导安装"></a>向导安装</h4><p>1.选择：系统→配置向导<br><img src="https://sadness96.github.io/images/blog/software-Rose/向导1.png"/></p>
<p>2.选择活动主机登录<br><img src="https://sadness96.github.io/images/blog/software-Rose/向导2.png"/></p>
<p>3.选择备用主机登录<br><img src="https://sadness96.github.io/images/blog/software-Rose/向导3.png"/></p>
<p>4.添加客服手里要来的注册码<br><img src="https://sadness96.github.io/images/blog/software-Rose/向导4.png"/></p>
<p>5.创建主机关系，创建心跳网(心跳要求与局域网IP不同网段，添加一个新网段后可在主机列表更新系统信息后重新创建心跳，测试使用时把心跳IP网段改为了6网段)<br><img src="https://sadness96.github.io/images/blog/software-Rose/架构设计.png"/><br><img src="https://sadness96.github.io/images/blog/software-Rose/向导5.png"/></p>
<p>6.选择应用服务类型，类型中不包含MySQL，客服建议选择USERDEF（用户自定义）<br><img src="https://sadness96.github.io/images/blog/software-Rose/向导6.png"/></p>
<p>7.应用服务数据→勾选绑定数据→添加一对心跳包网段的IP对，定制用于复制的数据集合点击修改→选择mysql数据库data目录（Rose会同步MySQL的Data目录）。<br><img src="https://sadness96.github.io/images/blog/software-Rose/向导7.png"/></p>
<p>8.设置IP资源：勾选主机网卡中局域网IP对，活动IP中新增一个局域网中未规划的IP。<br><img src="https://sadness96.github.io/images/blog/software-Rose/向导8.png"/></p>
<p>9.仲裁磁盘：跳过<br>10.选择共享卷：跳过<br>11.选择NT服务：添加MySQL57服务，弹出确定将非手动启动类型的NT服务修改为手动启动类型选择是。<br><img src="https://sadness96.github.io/images/blog/software-Rose/向导9.png"/></p>
<p>12.设置文件共享：跳过<br>13.进程：跳过，这个主要是针对第三方开发的应用程序，通过exe启动，没有在Windows服务列表中注册服务的，如果是mysql应用不需要配置。<br>14.设置代理参数：跳过，这个主要是针对bat启动的应用<br>15.配置详细信息：确认无误点击完成开始配置。<br><img src="https://sadness96.github.io/images/blog/software-Rose/向导10.png"/></p>
<p>16.关闭后咨询是否带入，点击否。</p>
<h4 id="后续操作"><a href="#后续操作" class="headerlink" title="后续操作"></a>后续操作</h4><p>1.手动停止两台电脑MySQL，手动备份Data目录。<br>2.在RoseReplicatorPlus 控制中心点击中间方块右键带入。<br><img src="https://sadness96.github.io/images/blog/software-Rose/主界面.png"/></p>
<p>3.修改数据库内容后，数据同步正常。<br>4.在方块上右键转移，连接数据库同步后同步正常。<br>5.关闭一台机器后，另一台电脑 MySQL 服务正常启动。</p>
]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>software</tag>
        <tag>rose</tag>
      </tags>
  </entry>
  <entry>
    <title>SonarQube 使用介绍</title>
    <url>/blog/2020/01/16/software-SonarQube/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/software-SonarQube/sonarqube.png"/></p>
<span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://www.sonarqube.org/">SonarQube</a> 是一个用于管理代码质量和安全的开源平台。</p>
<h3 id="软件部署"><a href="#软件部署" class="headerlink" title="软件部署"></a>软件部署</h3><p>软件安装参考 <a href="https://docs.sonarqube.org/latest/setup/get-started-2-minutes/">官方文档</a><br>使用版本 <a href="https://www.sonarqube.org/downloads/">SonarQube 7.9.x LTS</a></p>
<h4 id="下载社区版本"><a href="#下载社区版本" class="headerlink" title="下载社区版本"></a>下载社区版本</h4><p>下载地址：<a href="https://www.sonarqube.org/downloads/">https://www.sonarqube.org/downloads/</a></p>
<h4 id="解压后运行批处理文件"><a href="#解压后运行批处理文件" class="headerlink" title="解压后运行批处理文件"></a>解压后运行批处理文件</h4><p>按顺序运行：<br><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">.\sonarqube\bin\windows-x86-<span class="number">64</span>\InstallNTService.bat</span><br><span class="line">.\sonarqube\bin\windows-x86-<span class="number">64</span>\StartNTService.bat</span><br><span class="line">.\sonarqube\bin\windows-x86-<span class="number">64</span>\StartSonar.bat</span><br></pre></td></tr></table></figure></p>
<h4 id="访问网页"><a href="#访问网页" class="headerlink" title="访问网页"></a>访问网页</h4><p><a href="http://localhost:9000/">http://localhost:9000/</a><br>默认用户名密码：admin:admin</p>
<h4 id="Create-new-project"><a href="#Create-new-project" class="headerlink" title="Create new project"></a>Create new project</h4><h5 id="创建新项目"><a href="#创建新项目" class="headerlink" title="创建新项目"></a>创建新项目</h5><p><img src="https://sadness96.github.io/images/blog/software-SonarQube/CreateNewProject.png"/></p>
<h5 id="生成-ToKen-令牌"><a href="#生成-ToKen-令牌" class="headerlink" title="生成 ToKen 令牌"></a>生成 ToKen 令牌</h5><p><img src="https://sadness96.github.io/images/blog/software-SonarQube/GenerateToken.png"/></p>
<h5 id="项目根目录运行"><a href="#项目根目录运行" class="headerlink" title="项目根目录运行"></a>项目根目录运行</h5><h6 id="NET-Framework"><a href="#NET-Framework" class="headerlink" title=".NET Framework"></a>.NET Framework</h6><p>安装 <a href="https://sonarcloud.io/documentation/analysis/scan/sonarscanner-for-msbuild/">SonarScanner for MSBuild</a><br>解压后配置环境变量 Path<br><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">:: 生成 SonarQube</span><br><span class="line">SonarScanner.MSBuild.exe begin /k:&quot;#ProjectName&quot; /d:sonar.host.url=&quot;http://localhost:<span class="number">9000</span>&quot; /d:sonar.login=&quot;#ToKen&quot;</span><br><span class="line">MsBuild.exe /t:Rebuild</span><br><span class="line">SonarScanner.MSBuild.exe end /d:sonar.login=&quot;#ToKen&quot;</span><br></pre></td></tr></table></figure></p>
<h6 id="NET-Core"><a href="#NET-Core" class="headerlink" title=".NET Core"></a>.NET Core</h6><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">:: 安装 netcore sonarqube 工具</span><br><span class="line">dotnet tool install --global dotnet-sonarscanner</span><br></pre></td></tr></table></figure>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">:: 生成 SonarQube</span><br><span class="line">dotnet sonarscanner begin /k:&quot;#ProjectName&quot; /d:sonar.host.url=&quot;http://localhost:<span class="number">9000</span>&quot; /d:sonar.login=&quot;#ToKen&quot;</span><br><span class="line">MsBuild.exe /t:Rebuild</span><br><span class="line">dotnet sonarscanner end /d:sonar.login=&quot;#ToKen&quot;</span><br></pre></td></tr></table></figure>
<h5 id="查看质检结果"><a href="#查看质检结果" class="headerlink" title="查看质检结果"></a>查看质检结果</h5><p><img src="https://sadness96.github.io/images/blog/software-SonarQube/QualityGate.png"/></p>
<h4 id="Jenkins-中集成-SonarQube"><a href="#Jenkins-中集成-SonarQube" class="headerlink" title="Jenkins 中集成 SonarQube"></a>Jenkins 中集成 SonarQube</h4><p>参考：<a href="http://sadness96.github.io/blog/2019/12/26/software-Jenkins/#SonarQube">集成 SonarQube</a></p>
]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>software</tag>
        <tag>sonarqube</tag>
      </tags>
  </entry>
  <entry>
    <title>VisualSVN 使用介绍</title>
    <url>/blog/2017/08/20/software-VisualSVN/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/software-VisualSVN/VisualSVN-Server.png"/></p>
<span id="more"></span>
<h3 id="使用-SVN-作为版本管理工具"><a href="#使用-SVN-作为版本管理工具" class="headerlink" title="使用 SVN 作为版本管理工具"></a>使用 SVN 作为版本管理工具</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><a href="https://baike.baidu.com/item/SVN">SVN</a> 是一个开放源代码的<a href="https://baike.baidu.com/item/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/3311252">版本控制系统</a>，现大部分公司还是使用SVN作为代码托管服务，我曾经提议公司将版本控制替换为 <a href="https://baike.baidu.com/item/GIT/12647237">GIT</a>，但是项目经理有考虑员工学习成本，最后没有使用。</p>
<h4 id="部署服务端（VisualSVN-Server）"><a href="#部署服务端（VisualSVN-Server）" class="headerlink" title="部署服务端（VisualSVN Server）"></a>部署服务端（VisualSVN Server）</h4><p><a href="https://www.visualsvn.com/">VisualSVN Server</a> 使Subversion服务器在Windows上安装和管理变得简单方便。<a href="https://www.visualsvn.com/server/download/">下载地址</a> 安装即可。</p>
<h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><h5 id="创建成员"><a href="#创建成员" class="headerlink" title="创建成员"></a>创建成员</h5><p><img src="https://sadness96.github.io/images/blog/software-VisualSVN/CreateNewUser.png"/></p>
<h5 id="创建项目库"><a href="#创建项目库" class="headerlink" title="创建项目库"></a>创建项目库</h5><p><img src="https://sadness96.github.io/images/blog/software-VisualSVN/CreateNewRepository.png"/></p>
<h5 id="设置项目名"><a href="#设置项目名" class="headerlink" title="设置项目名"></a>设置项目名</h5><p><img src="https://sadness96.github.io/images/blog/software-VisualSVN/CreateNewRepositoryName.png"/></p>
<h5 id="设置项目结构"><a href="#设置项目结构" class="headerlink" title="设置项目结构"></a>设置项目结构</h5><p><img src="https://sadness96.github.io/images/blog/software-VisualSVN/CreateNewRepositoryStructure.png"/></p>
<h5 id="设置项目访问权限"><a href="#设置项目访问权限" class="headerlink" title="设置项目访问权限"></a>设置项目访问权限</h5><p><img src="https://sadness96.github.io/images/blog/software-VisualSVN/CreateNewRepositoryAccess.png"/></p>
<h5 id="设置项目成员"><a href="#设置项目成员" class="headerlink" title="设置项目成员"></a>设置项目成员</h5><p><img src="https://sadness96.github.io/images/blog/software-VisualSVN/AddUser.png"/></p>
<h4 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h4><p><a href="https://tortoisesvn.net/downloads.html">TortoiseSVN</a> 是一个Apache ™ Subversion（SVN）&reg;客户端，实现为Windows外壳扩展。它直观且易于使用，因为它不需要Subversion命令行客户端运行。<a href="https://tortoisesvn.net/downloads.html">下载地址</a> 安装即可。<br>右键 SVN Checkout… 连接项目库<br><img src="https://sadness96.github.io/images/blog/software-VisualSVN/Checkout.jpg"/></p>
]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>software</tag>
        <tag>svn</tag>
      </tags>
  </entry>
  <entry>
    <title>SwiftUI 隐藏 NavigationView 导航栏</title>
    <url>/blog/2020/11/30/swift-NavigationViewHidden/</url>
    <content><![CDATA[<h3 id="SwiftUI-对-NavigationView-导航栏的一些操作"><a href="#SwiftUI-对-NavigationView-导航栏的一些操作" class="headerlink" title="SwiftUI 对 NavigationView 导航栏的一些操作"></a>SwiftUI 对 NavigationView 导航栏的一些操作</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>原本简单的一个需求，但是相关的文档较少，所以还是记录一下的好</p>
<h4 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h4><p>在 SwiftUI 开发 IOS 应用时，官方建议使用 <a href="https://developer.apple.com/documentation/swiftui/navigationview">NavigationView</a> 来跳转页面，使用环境例如登录页弹出注册与修改密码二级菜单，登陆页需要隐藏导航栏，注册与修改密码菜单则需要显示导航栏显示标题并且可以返回登录页。</p>
<h4 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h4><p>直接使用 .navigationBarHidden(true) 可以使标题隐藏，但是二级菜单中的导航栏同步也会被隐藏，额外增加 .onAppear 与 .onDisappear 控制变量使导航栏在什么时候显示。</p>
<h4 id="修改前截图示例"><a href="#修改前截图示例" class="headerlink" title="修改前截图示例"></a>修改前截图示例</h4><p><img src="https://sadness96.github.io/images/blog/swift-NavigationViewHidden/login1_register.png"/></p>
<h4 id="修改前代码片段"><a href="#修改前代码片段" class="headerlink" title="修改前代码片段"></a>修改前代码片段</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LoginView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationView</span>&#123;</span><br><span class="line">            <span class="type">VStack</span>()&#123;</span><br><span class="line"></span><br><span class="line">                <span class="operator">……</span></span><br><span class="line"></span><br><span class="line">                <span class="type">HStack</span>()&#123;</span><br><span class="line">                    <span class="type">NavigationLink</span>(</span><br><span class="line">                        destination: <span class="type">RegisterView</span>(),</span><br><span class="line">                        label: &#123;</span><br><span class="line">                            <span class="type">Text</span>(<span class="string">&quot;注册用户&quot;</span>)</span><br><span class="line">                        &#125;)</span><br><span class="line">                    <span class="type">Spacer</span>()</span><br><span class="line">                    <span class="type">NavigationLink</span>(</span><br><span class="line">                        destination: <span class="type">RetrievePasswordView</span>(),</span><br><span class="line">                        label: &#123;</span><br><span class="line">                            <span class="type">Text</span>(<span class="string">&quot;找回密码&quot;</span>)</span><br><span class="line">                        &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">                .padding(<span class="type">EdgeInsets</span>(top: <span class="number">30</span>, leading: <span class="number">40</span>, bottom: <span class="number">0</span>, trailing: <span class="number">40</span>))</span><br><span class="line">            &#125;</span><br><span class="line">            .navigationBarTitle(<span class="type">Text</span>(<span class="string">&quot;登录&quot;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="修改后截图示例"><a href="#修改后截图示例" class="headerlink" title="修改后截图示例"></a>修改后截图示例</h4><p><img src="https://sadness96.github.io/images/blog/swift-NavigationViewHidden/login2_register.png"/></p>
<h4 id="修改后代码片段"><a href="#修改后代码片段" class="headerlink" title="修改后代码片段"></a>修改后代码片段</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LoginView</span>: <span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">var</span> isNavigationBarHidden: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationView</span>&#123;</span><br><span class="line">            <span class="type">VStack</span>()&#123;</span><br><span class="line"></span><br><span class="line">                <span class="operator">……</span></span><br><span class="line"></span><br><span class="line">                <span class="type">HStack</span>()&#123;</span><br><span class="line">                    <span class="type">NavigationLink</span>(</span><br><span class="line">                        destination: <span class="type">RegisterView</span>(),</span><br><span class="line">                        label: &#123;</span><br><span class="line">                            <span class="type">Text</span>(<span class="string">&quot;注册用户&quot;</span>)</span><br><span class="line">                        &#125;)</span><br><span class="line">                    <span class="type">Spacer</span>()</span><br><span class="line">                    <span class="type">NavigationLink</span>(</span><br><span class="line">                        destination: <span class="type">RetrievePasswordView</span>(),</span><br><span class="line">                        label: &#123;</span><br><span class="line">                            <span class="type">Text</span>(<span class="string">&quot;找回密码&quot;</span>)</span><br><span class="line">                        &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">                .padding(<span class="type">EdgeInsets</span>(top: <span class="number">30</span>, leading: <span class="number">40</span>, bottom: <span class="number">0</span>, trailing: <span class="number">40</span>))</span><br><span class="line">            &#125;</span><br><span class="line">            .navigationBarTitle(<span class="type">Text</span>(<span class="string">&quot;登录&quot;</span>))</span><br><span class="line">            .navigationBarHidden(<span class="keyword">self</span>.isNavigationBarHidden)</span><br><span class="line">            .onAppear &#123;</span><br><span class="line">                <span class="keyword">self</span>.isNavigationBarHidden <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            .onDisappear &#123;</span><br><span class="line">                <span class="keyword">self</span>.isNavigationBarHidden <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Swift</category>
      </categories>
      <tags>
        <tag>swift</tag>
        <tag>swiftui</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10 无法删除 IE 桌面图标</title>
    <url>/blog/2017/07/22/system-IECannotDelete/</url>
    <content><![CDATA[<h3 id="通过编辑注册表以删除默认的顽固图标"><a href="#通过编辑注册表以删除默认的顽固图标" class="headerlink" title="通过编辑注册表以删除默认的顽固图标"></a>通过编辑注册表以删除默认的顽固图标</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>有一些旧版本 Win10 安装后 IE 图标顽固无法删除，现微软应该已经修复。</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>编辑以下文本保存为 .reg 后缀<br>双击运行即可<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace]</span><br><span class="line">&quot;MonitorRegistry&quot;&#x3D;dword:00000001</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\DelegateFolders]</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\DelegateFolders\&#123;F5FB2C77-0E2F-4A16-A381-3E560C68BC83&#125;]</span><br><span class="line">@&#x3D;&quot;Removable Drives&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\&#123;031E4825-7B94-4dc3-B131-E946B44C8DD5&#125;]</span><br><span class="line">@&#x3D;&quot;UsersLibraries&quot;</span><br><span class="line">&quot;Removal Message&quot;&#x3D;&quot;@shell32.dll,-9047&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\&#123;04731B67-D933-450a-90E6-4ACD2E9408FE&#125;]</span><br><span class="line">@&#x3D;&quot;CLSID_SearchFolder&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\&#123;11016101-E366-4D22-BC06-4ADA335C892B&#125;]</span><br><span class="line">@&#x3D;&quot;IE History and Feeds Shell Data Source for Windows Search&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\&#123;138508bc-1e03-49ea-9c8f-ea9e1d05d65d&#125;]</span><br><span class="line">@&#x3D;&quot;MAPI Shell Folder&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\&#123;26EE0668-A00A-44D7-9371-BEB064C98683&#125;]</span><br><span class="line">@&#x3D;&quot;ControlPanelHome&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\&#123;2F6CE85C-F9EE-43CA-90C7-8A9BD53A2467&#125;]</span><br><span class="line">@&#x3D;&quot;File History Data Source&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\&#123;4336a54d-038b-4685-ab02-99bb52d3fb8b&#125;]</span><br><span class="line">@&#x3D;&quot;Public folder&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\&#123;450D8FBA-AD25-11D0-98A8-0800361B1103&#125;]</span><br><span class="line">@&#x3D;&quot;Documents&quot;</span><br><span class="line">&quot;Removal Message&quot;&#x3D;&quot;@mydocs.dll,-900&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\&#123;5399E694-6CE5-4D6C-8FCE-1D8870FDCBA0&#125;]</span><br><span class="line">@&#x3D;&quot;ControlPanelStartupPage&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\&#123;59031a47-3f72-44a7-89c5-5595fe6b30ee&#125;]</span><br><span class="line">@&#x3D;&quot;UsersFiles&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\&#123;5b934b42-522b-4c34-bbfe-37a3ef7b9c90&#125;]</span><br><span class="line">@&#x3D;&quot;This Device Folder&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\&#123;645FF040-5081-101B-9F08-00AA002F954E&#125;]</span><br><span class="line">@&#x3D;&quot;Recycle Bin&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\&#123;64693913-1c21-4f30-a98f-4e52906d3b56&#125;]</span><br><span class="line">@&#x3D;&quot;AppInstanceFolder&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\&#123;89D83576-6BD1-4c86-9454-BEB04E94C819&#125;]</span><br><span class="line">@&#x3D;&quot;MAPI Folder&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\&#123;8FD8B88D-30E1-4F25-AC2B-553D3D65F0EA&#125;]</span><br><span class="line">@&#x3D;&quot;DXP&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\&#123;9343812e-1c37-4a49-a12e-4b2d810d956b&#125;]</span><br><span class="line">@&#x3D;&quot;Search Home&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\&#123;98F275B4-4FFF-11E0-89E2-7B86DFD72085&#125;]</span><br><span class="line">@&#x3D;&quot;CLSID_StartMenuLauncherProviderFolder&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\&#123;a00ee528-ebd9-48b8-944a-8942113d46ac&#125;]</span><br><span class="line">@&#x3D;&quot;CLSID_StartMenuCommandingProviderFolder&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\&#123;B4FB3F98-C1EA-428d-A78A-D1F5659CBA93&#125;]</span><br><span class="line">@&#x3D;&quot;Other Users&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\&#123;B5EAD1DB-7C18-4954-8820-01733BC08C82&#125;]</span><br><span class="line">@&#x3D;&quot;Internet Explorer&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\&#123;BD7A2E7B-21CB-41b2-A086-B309680C6B7E&#125;]</span><br><span class="line">@&#x3D;&quot;CSC Folder&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\&#123;daf95313-e44d-46af-be1b-cbacea2c3065&#125;]</span><br><span class="line">@&#x3D;&quot;CLSID_StartMenuProviderFolder&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\&#123;DB19096C-5365-4164-A246-59FEFF9D8062&#125;]</span><br><span class="line">@&#x3D;&quot;Nameext&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\&#123;e345f35f-9397-435c-8f95-4e922c26259e&#125;]</span><br><span class="line">@&#x3D;&quot;CLSID_StartMenuPathCompleteProviderFolder&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\&#123;ED228FDF-9EA8-4870-83b1-96b02CFE0D52&#125;]</span><br><span class="line">&quot;Removal Message&quot;&#x3D;&quot;@gameux.dll,-10038&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\&#123;EDC978D6-4D53-4b2f-A265-5805674BE568&#125;]</span><br><span class="line">@&#x3D;&quot;StreamBackedFolder&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\&#123;F02C1A0D-BE21-4350-88B0-7367FC96EF3C&#125;]</span><br><span class="line">@&#x3D;&quot;Computers and Devices&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\&#123;f8278c54-a712-415b-b593-b77a2be0dda9&#125;]</span><br><span class="line">@&#x3D;&quot;This Device Folder&quot;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>System</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>registry</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10 在此处打开命令窗口</title>
    <url>/blog/2017/01/26/system-OpenCMDHere/</url>
    <content><![CDATA[<h3 id="Win10-鼠标右键在此处打开CMD窗口"><a href="#Win10-鼠标右键在此处打开CMD窗口" class="headerlink" title="Win10 鼠标右键在此处打开CMD窗口"></a>Win10 鼠标右键在此处打开CMD窗口</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><a href="https://baike.baidu.com/item/Windows%2010?fromtitle=win10&amp;fromid=10936225">Windows 10</a> 一直想使用 <a href="https://baike.baidu.com/item/Windows%20Power%20Shell/693789?fromtitle=PowerShell&amp;fromid=1061700&amp;fr=aladdin">Power Shell</a> 代替原有的 <a href="https://baike.baidu.com/item/%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E7%AC%A6/998728?fromtitle=CMD&amp;fromid=1193011&amp;fr=aladdin">CMD</a>，功能更加强大的同时也伴随很多弊病，例如：内存占用（测试CMD占用10.9MB内存，PowerShell占用37.2MB内存）、启动和执行速度较慢（高配电脑打扰了）、蓝色的底也看起来并不怎么舒服（虽然都能改）、多按两下Backspace还滴滴滴滴滴。</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>主要修改地址在Win10的文件夹处Shift+鼠标右键原有的”在此处打开命令窗口(M)”被修改为”在此处打开 Powershell 窗口(S)”，通过修改注册表的方式在鼠标右键添加CMD的打开方式（当前目录）。<br>复制以下内容到文本中存为 <a href="https://baike.baidu.com/item/reg%E6%96%87%E4%BB%B6/549755">reg文件</a>，双击运行添加到注册表中即可。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\OpenCMDHere]</span><br><span class="line">&quot;ShowBasedOnVelocityId&quot;&#x3D;dword:00639bc8</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\OpenCMDHere\command]</span><br><span class="line">@&#x3D;&quot;cmd.exe &#x2F;s &#x2F;k pushd \&quot;%V\&quot;&quot;</span><br></pre></td></tr></table></figure></p>
<h4 id="更简单的方案"><a href="#更简单的方案" class="headerlink" title="更简单的方案"></a>更简单的方案</h4><p>2020年3月1日更新：在学习 .Net Core EF 时查阅 MSDN 才发现了一个更简单的方式。<br><a href="https://docs.microsoft.com/zh-cn/aspnet/core/data/ef-mvc/migrations?view=aspnetcore-2.0">教程：使用迁移功能 - ASP.NET MVC 和 EF Core</a><br>直接在文件夹中地址栏输入：“cmd” 或 “powershell” 即可。<br><img src="https://docs.microsoft.com/zh-cn/aspnet/core/data/ef-mvc/migrations/_static/open-command-window.png?view=aspnetcore-2.0"/></p>
]]></content>
      <categories>
        <category>System</category>
      </categories>
      <tags>
        <tag>cmd</tag>
        <tag>windows</tag>
        <tag>registry</tag>
      </tags>
  </entry>
  <entry>
    <title>命令启动程序</title>
    <url>/blog/2016/08/10/system-QueryCmd/</url>
    <content><![CDATA[<h3 id="通过运行或CMD命令启动软件"><a href="#通过运行或CMD命令启动软件" class="headerlink" title="通过运行或CMD命令启动软件"></a>通过运行或CMD命令启动软件</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>作为一个强迫症来说，电脑桌面当然是越精简越好，杂乱的文件不能有，甚至想干掉所有图标…Windows的强大足以完全用快捷键操作系统了，鼠标用得少了效率也提高不少。<br>之前有想过用 <a href="https://baike.baidu.com/item/Mac%20OS/2840867?fr=aladdin">Mac OS</a> 的 Dock 的工具栏样式显示软件图标，但是没有MAC总觉得少点什么。<br>通过 <a href="https://baike.baidu.com/item/%E8%BF%90%E8%A1%8C/13132909?fr=aladdin">运行（Win+R）</a> 的方式启动软件或许是个不错的方式，系统有集成很多自带的软件或者安装打包有环境变量的软件都可以输入名称运行（例如：calc、notepad、mspaint、mstsc）。</p>
<h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><h5 id="创建启动目录，存放想要启动的快捷图标，修改快捷方式启动的名称"><a href="#创建启动目录，存放想要启动的快捷图标，修改快捷方式启动的名称" class="headerlink" title="创建启动目录，存放想要启动的快捷图标，修改快捷方式启动的名称"></a>创建启动目录，存放想要启动的快捷图标，修改快捷方式启动的名称</h5><p><img src="https://sadness96.github.io/images/blog/system-QueryCmd/1.jpg"/></p>
<h5 id="配置环境变量（在环境变量Path下增加启动目录）"><a href="#配置环境变量（在环境变量Path下增加启动目录）" class="headerlink" title="配置环境变量（在环境变量Path下增加启动目录）"></a>配置环境变量（在环境变量Path下增加启动目录）</h5><h6 id="Win7"><a href="#Win7" class="headerlink" title="Win7"></a>Win7</h6><p><img src="https://sadness96.github.io/images/blog/system-QueryCmd/2.jpg"/></p>
<h6 id="Win10"><a href="#Win10" class="headerlink" title="Win10"></a>Win10</h6><p><img src="https://sadness96.github.io/images/blog/system-QueryCmd/3.png"/></p>
<h5 id="通过-Win-R-打开运行窗口，输入启动名称即可。"><a href="#通过-Win-R-打开运行窗口，输入启动名称即可。" class="headerlink" title="通过 Win+R 打开运行窗口，输入启动名称即可。"></a>通过 Win+R 打开运行窗口，输入启动名称即可。</h5><p>例：运行PS<br><img src="https://sadness96.github.io/images/blog/system-QueryCmd/4.png"/></p>
<h4 id="2019年7月16日补充"><a href="#2019年7月16日补充" class="headerlink" title="2019年7月16日补充"></a>2019年7月16日补充</h4><p>记录一个更好的替代或是搭配使用的工具<br>Wox：<a href="http://www.wox.one/">官方网站</a>（An effective launcher for windows）<br>GitHub：<a href="https://github.com/Wox-launcher/Wox">https://github.com/Wox-launcher/Wox</a><br><img src="http://www.wox.one/images/wox_preview.jpg"/></p>
]]></content>
      <categories>
        <category>System</category>
      </categories>
      <tags>
        <tag>cmd</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>插入无线网卡后局域网无法连接</title>
    <url>/blog/2020/07/16/system-Route/</url>
    <content><![CDATA[<h3 id="通过-rount-命令编辑路由表"><a href="#通过-rount-命令编辑路由表" class="headerlink" title="通过 rount 命令编辑路由表"></a>通过 rount 命令编辑路由表</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>在一次出差时遇到插入无线网卡后内网无法访问，通过 <a href="https://baike.baidu.com/item/ROUTE%E5%91%BD%E4%BB%A4/6698201?fr=aladdin">rount</a> 命令配置路由表后解决。</p>
<h4 id="网络环境"><a href="#网络环境" class="headerlink" title="网络环境"></a>网络环境</h4><h5 id="用户现场内网绑定地址"><a href="#用户现场内网绑定地址" class="headerlink" title="用户现场内网绑定地址"></a>用户现场内网绑定地址</h5><p>IPV4 地址：10.69.129.126<br>IPV4 子网掩码：255.255.255.0<br>IPV4 默认网关：10.69.129.254</p>
<h5 id="其他使用的内网地址"><a href="#其他使用的内网地址" class="headerlink" title="其他使用的内网地址"></a>其他使用的内网地址</h5><p>IPV4 地址1：10.69.176.1<br>IPV4 地址2：10.69.177.1</p>
<h5 id="无线网卡"><a href="#无线网卡" class="headerlink" title="无线网卡"></a>无线网卡</h5><p>HUAWEI e8372h-155</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><h5 id="调用命令"><a href="#调用命令" class="headerlink" title="调用命令"></a>调用命令</h5><p>解决 10.69.129.1 网段访问<br><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">route -p add <span class="number">10</span>.<span class="number">69</span>.<span class="number">129</span>.<span class="number">0</span> mask <span class="number">255</span>.<span class="number">255</span>.<span class="number">255</span>.<span class="number">0</span> <span class="number">10</span>.<span class="number">69</span>.<span class="number">129</span>.<span class="number">254</span></span><br></pre></td></tr></table></figure></p>
<p>网段 10.69.176.1 与 10.69.177.1 访问转发 10.69.129.254 路由<br><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">route -p add <span class="number">10</span>.<span class="number">69</span>.<span class="number">176</span>.<span class="number">0</span> mask <span class="number">255</span>.<span class="number">255</span>.<span class="number">255</span>.<span class="number">0</span> <span class="number">10</span>.<span class="number">69</span>.<span class="number">129</span>.<span class="number">254</span></span><br><span class="line">route -p add <span class="number">10</span>.<span class="number">69</span>.<span class="number">177</span>.<span class="number">0</span> mask <span class="number">255</span>.<span class="number">255</span>.<span class="number">255</span>.<span class="number">0</span> <span class="number">10</span>.<span class="number">69</span>.<span class="number">129</span>.<span class="number">254</span></span><br></pre></td></tr></table></figure></p>
<h5 id="命令语法介绍"><a href="#命令语法介绍" class="headerlink" title="命令语法介绍"></a>命令语法介绍</h5><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">route [-f] [-p] [Command] [Destination] [mask Netmask] [Gateway] [metric Metric] [<span class="keyword">if</span> Interface]</span><br></pre></td></tr></table></figure>
<h6 id="f"><a href="#f" class="headerlink" title="-f"></a>-f</h6><p>清除所有不是主路由（网掩码为 255.255.255.255 的路由）、环回网络路由（目标为 127.0.0.0，网掩码为 255.255.255.0 的路由）或多播路由（目标为 224.0.0.0，网掩码为 240.0.0.0 的路由）的条目的路由表。如果它与命令之一（例如 add、change 或 delete）结合使用，表会在运行命令之前清除。</p>
<h6 id="p"><a href="#p" class="headerlink" title="-p"></a>-p</h6><p>与 add 命令共同使用时，指定路由被添加到注册表并在启动 TCP/IP 协议的时候初始化 IP 路由表。默认情况下，启动 TCP/IP 协议时不会保存添加的路由。与 print 命令一起使用时，则显示永久路由列表。所有其它的命令都忽略此参数。永久路由存储在注册表中的位置是 HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\PersistentRoutes。</p>
<h6 id="command"><a href="#command" class="headerlink" title="command"></a>command</h6><p>指定要运行的命令。下表列出了有效的命令。</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>目的</th>
</tr>
</thead>
<tbody>
<tr>
<td>add</td>
<td>添加路由</td>
</tr>
<tr>
<td>change</td>
<td>更改现存路由</td>
</tr>
<tr>
<td>delete</td>
<td>删除路由</td>
</tr>
<tr>
<td>print</td>
<td>打印路由</td>
</tr>
</tbody>
</table>
<h6 id="Destination"><a href="#Destination" class="headerlink" title="Destination"></a>Destination</h6><p>指定路由的网络目标地址。目标地址可以是一个 IP 网络地址（其中网络地址的主机地址位设置为 0），对于主机路由是 IP 地址，对于默认路由是 0.0.0.0。</p>
<h6 id="mask-subnetmask"><a href="#mask-subnetmask" class="headerlink" title="mask subnetmask"></a>mask subnetmask</h6><p>指定与网络目标地址相关联的网掩码（又称之为子网掩码）。子网掩码对于 IP 网络地址可以是一适当的子网掩码，对于主机路由是 255.255.255.255 ，对于默认路由是 0.0.0.0。如果忽略，则使用子网掩码 255.255.255.255。定义路由时由于目标地址和子网掩码之间的关系，目标地址不能比它对应的子网掩码更为详细。换句话说，如果子网掩码的一位是 0，则目标地址中的对应位就不能设置为 1。</p>
<h6 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h6><p>指定超过由网络目标和子网掩码定义的可达到的地址集的前一个或下一个跃点 IP 地址。对于本地连接的子网路由，网关地址是分配给连接子网接口的 IP 地址。对于要经过一个或多个路由器才可用到的远程路由，网关地址是一个分配给相邻路由器的、可直接达到的 IP 地址。</p>
<h6 id="metric-Metric"><a href="#metric-Metric" class="headerlink" title="metric Metric"></a>metric Metric</h6><p>为路由指定所需跃点数的整数值（范围是 1 ~ 9999），它用来在路由表里的多个路由中选择与转发包中的目标地址最为匹配的路由。所选的路由具有最少的跃点数。跃点数能够反映跃点的数量、路径的速度、路径可靠性、路径吞吐量以及管理属性。</p>
<h6 id="if-Interface"><a href="#if-Interface" class="headerlink" title="if Interface"></a>if Interface</h6><p>指定目标可以到达的接口的接口索引。使用 route print 命令可以显示接口及其对应接口索引的列表。对于接口索引可以使用十进制或十六进制的值。对于十六进制值，要在十六进制数的前面加上 0x。忽略 if 参数时，接口由网关地址确定。</p>
]]></content>
      <categories>
        <category>System</category>
      </categories>
      <tags>
        <tag>cmd</tag>
        <tag>windows</tag>
        <tag>rount</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 使用 VPN 代理加速</title>
    <url>/blog/2020/01/30/system-VPNGitAgent/</url>
    <content><![CDATA[<h3 id="解决国内-Github-访问过慢"><a href="#解决国内-Github-访问过慢" class="headerlink" title="解决国内 Github 访问过慢"></a>解决国内 Github 访问过慢</h3><span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>开了 VPN 之后使用 Git 连接 github 的 clone pull push 命令依旧很慢，是由于 git 默认不使用代理导致，配置 git 代理后可提升速度。</p>
<h3 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h3><h4 id="查找-VPN-本地代理端口"><a href="#查找-VPN-本地代理端口" class="headerlink" title="查找 VPN 本地代理端口"></a>查找 VPN 本地代理端口</h4><p>以 <a href="https://mymonocloud.com/">MonoCloud</a> 为例，由于不同 vpn 软件或安装的随机性导致每台机器的端口号并不一致，以显示为准。</p>
<h5 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h5><p>当前显示 http 端口为：8118；socks5 端口为：8119；<br><img src="https://sadness96.github.io/images/blog/system-VPNGitAgent/MacOSMonoPort.png"/></p>
<h5 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h5><p>当前显示 http 与 socks5 端口为：7078；<br><img src="https://sadness96.github.io/images/blog/system-VPNGitAgent/WindowsMonoPort.png"/></p>
<h4 id="配置-Git-代理"><a href="#配置-Git-代理" class="headerlink" title="配置 Git 代理"></a>配置 Git 代理</h4><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy http://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:&#123;port&#125;</span><br><span class="line">git config --global https.proxy http://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:&#123;port&#125;</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">git config --global http.proxy socks5://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:&#123;port&#125;</span><br><span class="line">git config --global https.proxy socks5://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:&#123;port&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://sadness96.github.io/images/blog/system-VPNGitAgent/GitConfigProxy.png"/></p>
<p>配置成功后可尝试查询配置或重新使用 git 命令</p>
<h4 id="查询配置"><a href="#查询配置" class="headerlink" title="查询配置"></a>查询配置</h4><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git config --global --list</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">git config --global --get http.proxy</span><br><span class="line">git config --global --get https.proxy</span><br></pre></td></tr></table></figure>
<p><img src="https://sadness96.github.io/images/blog/system-VPNGitAgent/GitConfigList.png"/></p>
<h4 id="取消-Git-代理配置"><a href="#取消-Git-代理配置" class="headerlink" title="取消 Git 代理配置"></a>取消 Git 代理配置</h4><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>
<h3 id="异常错误"><a href="#异常错误" class="headerlink" title="异常错误"></a>异常错误</h3><h4 id="报错-Connection-refused"><a href="#报错-Connection-refused" class="headerlink" title="报错 Connection refused"></a>报错 Connection refused</h4><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">fatal: <span class="title">unable</span> <span class="title">to</span> <span class="title">access</span> &#x27;<span class="title">https</span>://<span class="title">github.com</span>/*/*.<span class="title">git</span>/&#x27;: <span class="title">Failed</span> <span class="title">to</span> <span class="title">connect</span> <span class="title">to</span> 127.0.0.1 <span class="title">port</span> 7071: <span class="title">Connection</span> <span class="title">refused</span></span></span><br></pre></td></tr></table></figure>
<p>VPN 的本地映射端口配置错误，检查映射端口配置的正确性，或取消代理。</p>
]]></content>
      <categories>
        <category>System</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>windows</tag>
        <tag>macos</tag>
        <tag>vpn</tag>
      </tags>
  </entry>
  <entry>
    <title>VPN 导致的网页显示异常</title>
    <url>/blog/2020/01/28/system-VPNWebpageAbnormal/</url>
    <content><![CDATA[<h3 id="未启动-VPN-程序时网络正常，网页显示异常"><a href="#未启动-VPN-程序时网络正常，网页显示异常" class="headerlink" title="未启动 VPN 程序时网络正常，网页显示异常"></a>未启动 VPN 程序时网络正常，网页显示异常</h3><span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>电脑装有梯子软件，但是有时存在未启动程序时网络正常，但是网页显示异常的情况，由于安装过 VPN 后软件设置了默认代理导致。</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ol>
<li><p>打开 Internet 选项，可通过 IE 设置中打开或通过运行输入打开</p>
 <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">inetcpl.cpl</span><br></pre></td></tr></table></figure>
</li>
<li><p>选择菜单：<br> 连接 → 局域网(LAN)设置 → 局域网设置(L)</p>
</li>
<li><p>取消勾选：<br> 代理服务器 → 为 LAN 使用代理服务器(这些设置不用于拨号或 VPN 连接)(X)<br> <img src="https://sadness96.github.io/images/blog/system-VPNWebpageAbnormal/SetUpProxy.png"/></p>
</li>
<li><p>确认应用保存</p>
</li>
</ol>
]]></content>
      <categories>
        <category>System</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>vpn</tag>
        <tag>ie</tag>
      </tags>
  </entry>
  <entry>
    <title>Xcode IOS 真机调试</title>
    <url>/blog/2020/10/23/xcode-RealMachineDebugging/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/xcode-RealMachineDebugging/xcode_logo.jpg"/></p>
<span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>IOS 开发使用真机有线调试和无线 Wi-Fi 调试</p>
<h3 id="调试环境"><a href="#调试环境" class="headerlink" title="调试环境"></a>调试环境</h3><p>电脑：MacBook pro 16<br>电脑系统：macOS Catalina 10.15.7<br>手机：iPhone 6s<br>手机系统：IOS 13.6.1<br>开发软件：Xcode 12.1</p>
<h3 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h3><h4 id="有线调试"><a href="#有线调试" class="headerlink" title="有线调试"></a>有线调试</h4><h5 id="设置证书"><a href="#设置证书" class="headerlink" title="设置证书"></a>设置证书</h5><ol>
<li><p>打开用户菜单<br>Xcode → Preferences<br><img src="https://sadness96.github.io/images/blog/xcode-RealMachineDebugging/选择菜单Preferences.png"/></p>
</li>
<li><p>添加用户<br>菜单中选择 Accounts 添加一个用户<br><img src="https://sadness96.github.io/images/blog/xcode-RealMachineDebugging/添加账户.png"/></p>
</li>
<li><p>添加证书<br>点击右下角 Manage Certificates… → 添加 Apple Development 证书<br><img src="https://sadness96.github.io/images/blog/xcode-RealMachineDebugging/添加证书.png"/></p>
</li>
<li><p>证书管理<br>如果需要删除证书，在 keychain access 程序中删除<br><img src="https://sadness96.github.io/images/blog/xcode-RealMachineDebugging/钥匙串管理.png"/></p>
</li>
<li><p>在应用中添加组织<br>编辑 .xcodeproj 配置 → Signing &amp; Capabilities → 选择刚才添加的用户<br><img src="https://sadness96.github.io/images/blog/xcode-RealMachineDebugging/添加组织.png"/></p>
</li>
<li><p>手机数据线链接至电脑</p>
</li>
<li><p>iPhone 中设置信任<br>设置 → 通用 → 设备管理<br><img src="https://sadness96.github.io/images/blog/xcode-RealMachineDebugging/ios设备管理.png"/></p>
</li>
<li><p>运行程序选择真机设备<br>如需登录输入钥匙串密码，输入系统密码即可<br><img src="https://sadness96.github.io/images/blog/xcode-RealMachineDebugging/钥匙串密码.png"/></p>
</li>
</ol>
<h4 id="无线调试（需完成有线调试步骤）"><a href="#无线调试（需完成有线调试步骤）" class="headerlink" title="无线调试（需完成有线调试步骤）"></a>无线调试（需完成有线调试步骤）</h4><ol>
<li><p>打开链接设备菜单<br>Window → DevicesAndSimulators<br><img src="https://sadness96.github.io/images/blog/xcode-RealMachineDebugging/选择菜单DevicesAndSimulators.png"/></p>
</li>
<li><p>开启远程 Wi-Fi 调试<br>保证电脑与手机在同一网络下 → 勾选 Connect via network → 左侧设备中显示一个地球则可以 Wi-Fi 调试<br><img src="https://sadness96.github.io/images/blog/xcode-RealMachineDebugging/无线调试.png"/></p>
</li>
</ol>
]]></content>
      <categories>
        <category>IOS</category>
      </categories>
      <tags>
        <tag>ios</tag>
        <tag>xcode</tag>
      </tags>
  </entry>
  <entry>
    <title>CUDA NV12 缩放图像</title>
    <url>/blog/2022/09/26/cpp-CudaImageResize/</url>
    <content><![CDATA[<h3 id="最近邻插值法与双线性差值法缩放图像"><a href="#最近邻插值法与双线性差值法缩放图像" class="headerlink" title="最近邻插值法与双线性差值法缩放图像"></a>最近邻插值法与双线性差值法缩放图像</h3><span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>通常处理图像时经常会需要缩放图像，<a href="https://ffmpeg.org/">FFmpeg</a> 可以使用 <a href="https://www.ffmpeg.org/doxygen/2.2/structSwsContext.html">SwsContext</a> 方法缩放图像，<a href="https://opencv.org/">OpenCV</a> 可以使用 <a href="https://docs.opencv.org/4.x/da/d54/group__imgproc__transform.html#ga47a974309e9102f5f08231edc7e7529d">cv::resize</a> 方法缩放图像，但是用这些方法缩放的同时会消耗更多时间，在选择使用 <a href="https://developer.nvidia.com/cuda-toolkit">CUDA</a> 处理图像的情况下，就直接一起缩放图像。<br>图像缩放有多重算法，最常见的是：</p>
<ul>
<li>最近邻插值法：速度最快，但是有时可以看到明显锯齿。</li>
<li>双线性差值法：使用最多的方式，使用邻近四个点来计算像素值。</li>
<li>双三次插值法（不实现该方法）：速度较慢，使用邻近十六个点来计算像素值。</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>代码以 YUV NV12 图片格式编写，其他图片类型带入公式即可。</p>
<h4 id="最近邻插值法"><a href="#最近邻插值法" class="headerlink" title="最近邻插值法"></a>最近邻插值法</h4><h5 id="计算方法"><a href="#计算方法" class="headerlink" title="计算方法"></a>计算方法</h5><p>计算图片缩放百分比，得到一个在原图像的百分比坐标吗，用当前坐标乘以百分比获取原图像像素值，通常为小数，删除小数部分取整使用左上角像素坐标，也可以选择四舍五入的方式，或者 +0.5 或 -0.5 后取整，作为缩放图像的像素值。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> fx = outX * (inWidth / outWidth);</span><br><span class="line"><span class="keyword">int</span> fy = outY * (inHeight / outHeight);</span><br></pre></td></tr></table></figure></p>
<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 缩放图像核函数 YUV420P</span></span><br><span class="line"><span class="comment">/// 最近邻插值</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pInYData&quot;&gt;输入图片 YUV YUV420P Y&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pInUData&quot;&gt;输入图片 YUV YUV420P U&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pInVData&quot;&gt;输入图片 YUV YUV420P V&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pInWidth&quot;&gt;输入图片宽度&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pInHeight&quot;&gt;输入图像高度&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pOutYData&quot;&gt;输出图片 YUV YUV420P Y&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pOutUData&quot;&gt;输出图片 YUV YUV420P U&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pOutVData&quot;&gt;输出图片 YUV YUV420P V&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pOutWidth&quot;&gt;输出图片宽度&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pOutHeight&quot;&gt;输出图像高度&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;缩放后图像&lt;/returns&gt;</span></span><br><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">ReSizeKernel_Nearest_YUV420P</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* pInYData, <span class="keyword">unsigned</span> <span class="keyword">char</span>* pInUData, <span class="keyword">unsigned</span> <span class="keyword">char</span>* pInVData, <span class="keyword">int</span> pInWidth, <span class="keyword">int</span> pInHeight,</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="keyword">unsigned</span> <span class="keyword">char</span>* pOutYData, <span class="keyword">unsigned</span> <span class="keyword">char</span>* pOutUData, <span class="keyword">unsigned</span> <span class="keyword">char</span>* pOutVData, <span class="keyword">int</span> pOutWidth, <span class="keyword">int</span> pOutHeight)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> tidx = threadIdx.x + blockDim.x * blockIdx.x;</span><br><span class="line">	<span class="keyword">int</span> tidy = threadIdx.y + blockDim.y * blockIdx.y;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (tidx &lt; pOutWidth &amp;&amp; tidy &lt; pOutHeight)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> srcX = tidx * ((<span class="keyword">float</span>)(pInWidth - <span class="number">1</span>) / (pOutWidth - <span class="number">1</span>));</span><br><span class="line">		<span class="keyword">int</span> srcY = tidy * ((<span class="keyword">float</span>)(pInHeight - <span class="number">1</span>) / (pOutHeight - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> idx_in_y = srcY * pInWidth + srcX;</span><br><span class="line">		<span class="keyword">int</span> idx_in_uv = srcY / <span class="number">2</span> * pInWidth / <span class="number">2</span> + srcX / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> idx_out_y = tidy * pOutWidth + tidx;</span><br><span class="line">		<span class="keyword">int</span> idx_out_uv = tidy / <span class="number">2</span> * pOutWidth / <span class="number">2</span> + tidx / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Y</span></span><br><span class="line">		pOutYData[idx_out_y] = pInYData[idx_in_y];</span><br><span class="line">		<span class="comment">// U</span></span><br><span class="line">		pOutUData[idx_out_uv] = pInUData[idx_in_uv];</span><br><span class="line">		<span class="comment">// V</span></span><br><span class="line">		pOutVData[idx_out_uv] = pInVData[idx_in_uv];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 修改大小 最近邻插值 YUV420P</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;frame&quot;&gt;输入图像&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;width&quot;&gt;修改宽度&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;height&quot;&gt;修改高度&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;修改后图像&lt;/returns&gt;</span></span><br><span class="line"><span class="function">AVFrame* <span class="title">ReSize_Nearest_YUV420P</span><span class="params">(AVFrame* frame, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">auto</span> img_size_y = width * height * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">unsigned</span> <span class="keyword">char</span>);</span><br><span class="line">	<span class="keyword">auto</span> img_size_uv = (width / <span class="number">2</span>) * (height / <span class="number">2</span>) * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">unsigned</span> <span class="keyword">char</span>);</span><br><span class="line"></span><br><span class="line">	AVFrame* dstImg;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span>* outputY = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span>* outputU = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span>* outputV = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">	dstImg = <span class="built_in">av_frame_alloc</span>();</span><br><span class="line">	<span class="built_in">av_image_alloc</span>(dstImg-&gt;data, dstImg-&gt;linesize, width, height, (AVPixelFormat)frame-&gt;format, <span class="number">1</span>);</span><br><span class="line">	dstImg-&gt;width = width;</span><br><span class="line">	dstImg-&gt;height = height;</span><br><span class="line">	dstImg-&gt;format = (AVPixelFormat)frame-&gt;format;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cudaMalloc</span>(&amp;outputY, img_size_y);</span><br><span class="line">	<span class="built_in">cudaMalloc</span>(&amp;outputU, img_size_uv);</span><br><span class="line">	<span class="built_in">cudaMalloc</span>(&amp;outputV, img_size_uv);</span><br><span class="line"></span><br><span class="line">	<span class="function">dim3 <span class="title">block</span><span class="params">(<span class="number">32</span>, <span class="number">32</span>)</span></span>;</span><br><span class="line">	<span class="function">dim3 <span class="title">grid</span><span class="params">((width + block.x - <span class="number">1</span>) / block.x, (height + block.y - <span class="number">1</span>) / block.y)</span></span>;</span><br><span class="line">	ReSizeKernel_Nearest_YUV420P &lt;&lt; &lt;grid, block &gt;&gt; &gt; (frame-&gt;data[<span class="number">0</span>], frame-&gt;data[<span class="number">1</span>], frame-&gt;data[<span class="number">2</span>], frame-&gt;width, frame-&gt;height, outputY, outputU, outputV, width, height);</span><br><span class="line">	<span class="built_in">cudaThreadSynchronize</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 图像从 Gpu 拷贝到 Cpu</span></span><br><span class="line">	<span class="built_in">cudaMemcpy</span>(dstImg-&gt;data[<span class="number">0</span>], outputY, img_size_y, cudaMemcpyDeviceToHost);</span><br><span class="line">	<span class="built_in">cudaMemcpy</span>(dstImg-&gt;data[<span class="number">1</span>], outputU, img_size_uv, cudaMemcpyDeviceToHost);</span><br><span class="line">	<span class="built_in">cudaMemcpy</span>(dstImg-&gt;data[<span class="number">2</span>], outputV, img_size_uv, cudaMemcpyDeviceToHost);</span><br><span class="line">	<span class="keyword">return</span> dstImg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 缩放图像核函数 NV12</span></span><br><span class="line"><span class="comment">/// 最近邻插值</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pInYData&quot;&gt;输入图片 YUV NV12 Y&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pInUVData&quot;&gt;输入图片 YUV NV12 UV&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pInWidth&quot;&gt;输入图片宽度&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pInHeight&quot;&gt;输入图像高度&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pOutYData&quot;&gt;输出图片 YUV NV12 Y&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pOutUVData&quot;&gt;输出图片 YUV NV12 UV&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pOutWidth&quot;&gt;输出图片宽度&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pOutHeight&quot;&gt;输出图像高度&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;缩放后图像&lt;/returns&gt;</span></span><br><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">ReSizeKernel_Nearest_NV12</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* pInYData, <span class="keyword">unsigned</span> <span class="keyword">char</span>* pInUVData, <span class="keyword">int</span> pInWidth, <span class="keyword">int</span> pInHeight,</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="keyword">unsigned</span> <span class="keyword">char</span>* pOutYData, <span class="keyword">unsigned</span> <span class="keyword">char</span>* pOutUVData, <span class="keyword">int</span> pOutWidth, <span class="keyword">int</span> pOutHeight)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> tidx = threadIdx.x + blockDim.x * blockIdx.x;</span><br><span class="line">	<span class="keyword">int</span> tidy = threadIdx.y + blockDim.y * blockIdx.y;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (tidx &lt; pOutWidth &amp;&amp; tidy &lt; pOutHeight)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> srcX = tidx * ((<span class="keyword">float</span>)(pInWidth - <span class="number">1</span>) / (pOutWidth - <span class="number">1</span>));</span><br><span class="line">		<span class="keyword">int</span> srcY = tidy * ((<span class="keyword">float</span>)(pInHeight - <span class="number">1</span>) / (pOutHeight - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> idx_in_y = srcY * pInWidth + srcX;</span><br><span class="line">		<span class="keyword">int</span> idx_in_uv = srcY / <span class="number">2</span> * pInWidth + srcX;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> idx_out_y = tidy * pOutWidth + tidx;</span><br><span class="line">		<span class="keyword">int</span> idx_out_uv = tidy / <span class="number">2</span> * pOutWidth + tidx;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Y</span></span><br><span class="line">		pOutYData[idx_out_y] = pInYData[idx_in_y];</span><br><span class="line">		<span class="comment">// U</span></span><br><span class="line">		pOutUVData[tidx % <span class="number">2</span> == <span class="number">0</span> ? idx_out_uv : idx_out_uv - <span class="number">1</span>] = pInUVData[srcX % <span class="number">2</span> == <span class="number">0</span> ? idx_in_uv : idx_in_uv - <span class="number">1</span>];</span><br><span class="line">		<span class="comment">// V</span></span><br><span class="line">		pOutUVData[tidx % <span class="number">2</span> == <span class="number">0</span> ? idx_out_uv + <span class="number">1</span> : idx_out_uv] = pInUVData[srcX % <span class="number">2</span> == <span class="number">0</span> ? idx_in_uv + <span class="number">1</span> : idx_in_uv];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 修改大小 最近邻插值 NV12</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;frame&quot;&gt;输入图像&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;width&quot;&gt;修改宽度&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;height&quot;&gt;修改高度&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;修改后图像&lt;/returns&gt;</span></span><br><span class="line"><span class="function">AVFrame* <span class="title">ReSize_Nearest_NV12</span><span class="params">(AVFrame* frame, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">auto</span> img_size_y = width * height * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">unsigned</span> <span class="keyword">char</span>);</span><br><span class="line">	<span class="keyword">auto</span> img_size_uv = width * (height / <span class="number">2</span>) * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">unsigned</span> <span class="keyword">char</span>);</span><br><span class="line"></span><br><span class="line">	AVFrame* dstImg;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span>* outputY = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span>* outputUV = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">	dstImg = <span class="built_in">av_frame_alloc</span>();</span><br><span class="line">	<span class="built_in">av_image_alloc</span>(dstImg-&gt;data, dstImg-&gt;linesize, width, height, (AVPixelFormat)frame-&gt;format, <span class="number">1</span>);</span><br><span class="line">	dstImg-&gt;width = width;</span><br><span class="line">	dstImg-&gt;height = height;</span><br><span class="line">	dstImg-&gt;format = (AVPixelFormat)frame-&gt;format;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cudaMalloc</span>(&amp;outputY, img_size_y);</span><br><span class="line">	<span class="built_in">cudaMalloc</span>(&amp;outputUV, img_size_uv);</span><br><span class="line"></span><br><span class="line">	<span class="function">dim3 <span class="title">block</span><span class="params">(<span class="number">32</span>, <span class="number">32</span>)</span></span>;</span><br><span class="line">	<span class="function">dim3 <span class="title">grid</span><span class="params">((width + block.x - <span class="number">1</span>) / block.x, (height + block.y - <span class="number">1</span>) / block.y)</span></span>;</span><br><span class="line">	ReSizeKernel_Nearest_NV12 &lt;&lt; &lt;grid, block &gt;&gt; &gt; (frame-&gt;data[<span class="number">0</span>], frame-&gt;data[<span class="number">1</span>], frame-&gt;width, frame-&gt;height, outputY, outputUV, width, height);</span><br><span class="line">	<span class="built_in">cudaThreadSynchronize</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 图像从 Gpu 拷贝到 Cpu</span></span><br><span class="line">	<span class="built_in">cudaMemcpy</span>(dstImg-&gt;data[<span class="number">0</span>], outputY, img_size_y, cudaMemcpyDeviceToHost);</span><br><span class="line">	<span class="built_in">cudaMemcpy</span>(dstImg-&gt;data[<span class="number">1</span>], outputUV, img_size_uv, cudaMemcpyDeviceToHost);</span><br><span class="line">	<span class="keyword">return</span> dstImg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="双线性差值法"><a href="#双线性差值法" class="headerlink" title="双线性差值法"></a>双线性差值法</h4><h5 id="计算方法-1"><a href="#计算方法-1" class="headerlink" title="计算方法"></a>计算方法</h5><p>与最近邻插值法一样，先计算图片缩放百分比，得到一个在原图像的百分比坐标吗，用当前坐标乘以百分比获取原图像像素值，通常为小数，取小数相邻的两个像素，比如计算像素坐标为 7.5，则取删除小数的 7 和填充小数的 8 作为相邻的两个值，放在图像坐标中上下左右相邻四个像素作为计算数据。</p>
<ol>
<li><p>获取在原图像的百分比像素，由于数据数组通常以 0 开始，宽度高度减 1 后计算更精准。</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> fx = outX * ((<span class="keyword">float</span>)(inWidth - <span class="number">1</span>) / (outWidth - <span class="number">1</span>));</span><br><span class="line"><span class="keyword">float</span> fy = outY * ((<span class="keyword">float</span>)(inHeight - <span class="number">1</span>) / (outHeight - <span class="number">1</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p>取相邻四个像素坐标，直接取整为左上角坐标，如果还有余数的情况下 +1 为右下角坐标。</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> fx0 = fx;</span><br><span class="line"><span class="keyword">int</span> fy0 = fy;</span><br><span class="line"><span class="keyword">int</span> fx1 = fx &gt; fx0 ? fx0 + <span class="number">1</span> : fx0;</span><br><span class="line"><span class="keyword">int</span> fy1 = fy &gt; fy0 ? fy0 + <span class="number">1</span> : fy0;</span><br></pre></td></tr></table></figure>
</li>
<li><p>取小数部分作为四个像素计算的分量</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> xProportion = fx - fx0;</span><br><span class="line"><span class="keyword">float</span> yProportion = fy - fy0;</span><br></pre></td></tr></table></figure>
</li>
<li><p>带入公式计算新像素值</p>
 <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">f(x,y) = f(0,0)(1-x)(1-y) + f(1,0)x(1-y) + f(0,1)(1-x)y + f(1,1)xy;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 缩放图像核函数 YUV420P</span></span><br><span class="line"><span class="comment">/// 双线性差值</span></span><br><span class="line"><span class="comment">/// f(x,y) = f(0,0)(1-x)(1-y) + f(1,0)x(1-y) + f(0,1)(1-x)y + f(1,1)xy;</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pInYData&quot;&gt;输入图片 YUV YUV420P Y&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pInUData&quot;&gt;输入图片 YUV YUV420P U&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pInVData&quot;&gt;输入图片 YUV YUV420P V&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pInWidth&quot;&gt;输入图片宽度&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pInHeight&quot;&gt;输入图像高度&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pOutYData&quot;&gt;输出图片 YUV YUV420P Y&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pOutUData&quot;&gt;输出图片 YUV YUV420P U&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pOutVData&quot;&gt;输出图片 YUV YUV420P V&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pOutWidth&quot;&gt;输出图片宽度&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pOutHeight&quot;&gt;输出图像高度&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;缩放后图像&lt;/returns&gt;</span></span><br><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">ReSizeKernel_Bilinear_YUV420P</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* pInYData, <span class="keyword">unsigned</span> <span class="keyword">char</span>* pInUData, <span class="keyword">unsigned</span> <span class="keyword">char</span>* pInVData, <span class="keyword">int</span> pInWidth, <span class="keyword">int</span> pInHeight,</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="keyword">unsigned</span> <span class="keyword">char</span>* pOutYData, <span class="keyword">unsigned</span> <span class="keyword">char</span>* pOutUData, <span class="keyword">unsigned</span> <span class="keyword">char</span>* pOutVData, <span class="keyword">int</span> pOutWidth, <span class="keyword">int</span> pOutHeight)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> tidx = threadIdx.x + blockDim.x * blockIdx.x;</span><br><span class="line">	<span class="keyword">int</span> tidy = threadIdx.y + blockDim.y * blockIdx.y;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (tidx &lt; pOutWidth&amp;&amp; tidy &lt; pOutHeight)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">float</span> srcX = tidx * ((<span class="keyword">float</span>)(pInWidth - <span class="number">1</span>) / (pOutWidth - <span class="number">1</span>));</span><br><span class="line">		<span class="keyword">float</span> srcY = tidy * ((<span class="keyword">float</span>)(pInHeight - <span class="number">1</span>) / (pOutHeight - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 计算取图像坐标</span></span><br><span class="line">		<span class="keyword">int</span> fx0 = srcX;</span><br><span class="line">		<span class="keyword">int</span> fy0 = srcY;</span><br><span class="line">		<span class="keyword">int</span> fx1 = srcX &gt; fx0 ? fx0 + <span class="number">1</span> : fx0;</span><br><span class="line">		<span class="keyword">int</span> fy1 = srcY &gt; fy0 ? fy0 + <span class="number">1</span> : fy0;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 计算取像素比例</span></span><br><span class="line">		<span class="keyword">float</span> xProportion = srcX - fx0;</span><br><span class="line">		<span class="keyword">float</span> yProportion = srcY - fy0;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 四个输入坐标</span></span><br><span class="line">		<span class="keyword">int</span> idx_in_y_00 = fy0 * pInWidth + fx0;</span><br><span class="line">		<span class="keyword">int</span> idx_in_uv_00 = fy0 / <span class="number">2</span> * pInWidth / <span class="number">2</span> + fx0 / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> idx_in_y_10 = fy1 * pInWidth + fx0;</span><br><span class="line">		<span class="keyword">int</span> idx_in_uv_10 = fy1 / <span class="number">2</span> * pInWidth / <span class="number">2</span> + fx0 / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> idx_in_y_01 = fy0 * pInWidth + fx1;</span><br><span class="line">		<span class="keyword">int</span> idx_in_uv_01 = fy0 / <span class="number">2</span> * pInWidth / <span class="number">2</span> + fx1 / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> idx_in_y_11 = fy1 * pInWidth + fx1;</span><br><span class="line">		<span class="keyword">int</span> idx_in_uv_11 = fy1 / <span class="number">2</span> * pInWidth / <span class="number">2</span> + fx1 / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 输出坐标</span></span><br><span class="line">		<span class="keyword">int</span> idx_out_y = tidy * pOutWidth + tidx;</span><br><span class="line">		<span class="keyword">int</span> idx_out_uv = tidy / <span class="number">2</span> * pOutWidth / <span class="number">2</span> + tidx / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Y</span></span><br><span class="line">		pOutYData[idx_out_y] =</span><br><span class="line">			pInYData[idx_in_y_00] * (<span class="number">1</span> - xProportion) * (<span class="number">1</span> - yProportion) +</span><br><span class="line">			pInYData[idx_in_y_10] * xProportion * (<span class="number">1</span> - yProportion) +</span><br><span class="line">			pInYData[idx_in_y_01] * (<span class="number">1</span> - xProportion) * yProportion +</span><br><span class="line">			pInYData[idx_in_y_11] * xProportion * yProportion;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// U</span></span><br><span class="line">		pOutUData[idx_out_uv] =</span><br><span class="line">			pInUData[idx_in_uv_00] * (<span class="number">1</span> - xProportion) * (<span class="number">1</span> - yProportion) +</span><br><span class="line">			pInUData[idx_in_uv_10] * xProportion * (<span class="number">1</span> - yProportion) +</span><br><span class="line">			pInUData[idx_in_uv_01] * (<span class="number">1</span> - xProportion) * yProportion +</span><br><span class="line">			pInUData[idx_in_uv_11] * xProportion * yProportion;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// V</span></span><br><span class="line">		pOutVData[idx_out_uv] =</span><br><span class="line">			pInVData[idx_in_uv_00] * (<span class="number">1</span> - xProportion) * (<span class="number">1</span> - yProportion) +</span><br><span class="line">			pInVData[idx_in_uv_10] * xProportion * (<span class="number">1</span> - yProportion) +</span><br><span class="line">			pInVData[idx_in_uv_01] * (<span class="number">1</span> - xProportion) * yProportion +</span><br><span class="line">			pInVData[idx_in_uv_11] * xProportion * yProportion;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 修改大小 双线性差值 YUV420P</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;frame&quot;&gt;输入图像&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;width&quot;&gt;修改宽度&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;height&quot;&gt;修改高度&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;修改后图像&lt;/returns&gt;</span></span><br><span class="line"><span class="function">AVFrame* <span class="title">ReSize_Bilinear_YUV420P</span><span class="params">(AVFrame* frame, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">auto</span> img_size_y = width * height * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">unsigned</span> <span class="keyword">char</span>);</span><br><span class="line">	<span class="keyword">auto</span> img_size_uv = (width / <span class="number">2</span>) * (height / <span class="number">2</span>) * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">unsigned</span> <span class="keyword">char</span>);</span><br><span class="line"></span><br><span class="line">	AVFrame* dstImg;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span>* outputY = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span>* outputU = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span>* outputV = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">	dstImg = <span class="built_in">av_frame_alloc</span>();</span><br><span class="line">	<span class="built_in">av_image_alloc</span>(dstImg-&gt;data, dstImg-&gt;linesize, width, height, (AVPixelFormat)frame-&gt;format, <span class="number">1</span>);</span><br><span class="line">	dstImg-&gt;width = width;</span><br><span class="line">	dstImg-&gt;height = height;</span><br><span class="line">	dstImg-&gt;format = (AVPixelFormat)frame-&gt;format;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cudaMalloc</span>(&amp;outputY, img_size_y);</span><br><span class="line">	<span class="built_in">cudaMalloc</span>(&amp;outputU, img_size_uv);</span><br><span class="line">	<span class="built_in">cudaMalloc</span>(&amp;outputV, img_size_uv);</span><br><span class="line"></span><br><span class="line">	<span class="function">dim3 <span class="title">block</span><span class="params">(<span class="number">32</span>, <span class="number">32</span>)</span></span>;</span><br><span class="line">	<span class="function">dim3 <span class="title">grid</span><span class="params">((width + block.x - <span class="number">1</span>) / block.x, (height + block.y - <span class="number">1</span>) / block.y)</span></span>;</span><br><span class="line">	ReSizeKernel_Bilinear_YUV420P &lt;&lt; &lt;grid, block &gt;&gt; &gt; (frame-&gt;data[<span class="number">0</span>], frame-&gt;data[<span class="number">1</span>], frame-&gt;data[<span class="number">2</span>], frame-&gt;width, frame-&gt;height, outputY, outputU, outputV, width, height);</span><br><span class="line">	<span class="built_in">cudaThreadSynchronize</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 图像从 Gpu 拷贝到 Cpu</span></span><br><span class="line">	<span class="built_in">cudaMemcpy</span>(dstImg-&gt;data[<span class="number">0</span>], outputY, img_size_y, cudaMemcpyDeviceToHost);</span><br><span class="line">	<span class="built_in">cudaMemcpy</span>(dstImg-&gt;data[<span class="number">1</span>], outputU, img_size_uv, cudaMemcpyDeviceToHost);</span><br><span class="line">	<span class="built_in">cudaMemcpy</span>(dstImg-&gt;data[<span class="number">2</span>], outputV, img_size_uv, cudaMemcpyDeviceToHost);</span><br><span class="line">	<span class="keyword">return</span> dstImg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 缩放图像核函数 NV12</span></span><br><span class="line"><span class="comment">/// 双线性差值</span></span><br><span class="line"><span class="comment">/// f(x,y) = f(0,0)(1-x)(1-y) + f(1,0)x(1-y) + f(0,1)(1-x)y + f(1,1)xy;</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pInYData&quot;&gt;输入图片 YUV NV12 Y&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pInUVData&quot;&gt;输入图片 YUV NV12 UV&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pInWidth&quot;&gt;输入图片宽度&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pInHeight&quot;&gt;输入图像高度&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pOutYData&quot;&gt;输出图片 YUV NV12 Y&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pOutUVData&quot;&gt;输出图片 YUV NV12 UV&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pOutWidth&quot;&gt;输出图片宽度&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;pOutHeight&quot;&gt;输出图像高度&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;缩放后图像&lt;/returns&gt;</span></span><br><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">ReSizeKernel_Bilinear_NV12</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* pInYData, <span class="keyword">unsigned</span> <span class="keyword">char</span>* pInUVData, <span class="keyword">int</span> pInWidth, <span class="keyword">int</span> pInHeight,</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="keyword">unsigned</span> <span class="keyword">char</span>* pOutYData, <span class="keyword">unsigned</span> <span class="keyword">char</span>* pOutUVData, <span class="keyword">int</span> pOutWidth, <span class="keyword">int</span> pOutHeight)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> tidx = threadIdx.x + blockDim.x * blockIdx.x;</span><br><span class="line">	<span class="keyword">int</span> tidy = threadIdx.y + blockDim.y * blockIdx.y;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (tidx &lt; pOutWidth&amp;&amp; tidy &lt; pOutHeight)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">float</span> srcX = tidx * ((<span class="keyword">float</span>)(pInWidth - <span class="number">1</span>) / (pOutWidth - <span class="number">1</span>));</span><br><span class="line">		<span class="keyword">float</span> srcY = tidy * ((<span class="keyword">float</span>)(pInHeight - <span class="number">1</span>) / (pOutHeight - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 计算取图像坐标</span></span><br><span class="line">		<span class="keyword">int</span> fx0 = srcX;</span><br><span class="line">		<span class="keyword">int</span> fy0 = srcY;</span><br><span class="line">		<span class="keyword">int</span> fx1 = srcX &gt; fx0 ? fx0 + <span class="number">1</span> : fx0;</span><br><span class="line">		<span class="keyword">int</span> fy1 = srcY &gt; fy0 ? fy0 + <span class="number">1</span> : fy0;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 计算取像素比例</span></span><br><span class="line">		<span class="keyword">float</span> xProportion = srcX - fx0;</span><br><span class="line">		<span class="keyword">float</span> yProportion = srcY - fy0;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 四个输入坐标</span></span><br><span class="line">		<span class="keyword">int</span> idx_in_y_00 = fy0 * pInWidth + fx0;</span><br><span class="line">		<span class="keyword">int</span> idx_in_uv_00 = fy0 / <span class="number">2</span> * pInWidth + fx0;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> idx_in_y_10 = fy1 * pInWidth + fx0;</span><br><span class="line">		<span class="keyword">int</span> idx_in_uv_10 = fy1 / <span class="number">2</span> * pInWidth + fx0;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> idx_in_y_01 = fy0 * pInWidth + fx1;</span><br><span class="line">		<span class="keyword">int</span> idx_in_uv_01 = fy0 / <span class="number">2</span> * pInWidth + fx1;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> idx_in_y_11 = fy1 * pInWidth + fx1;</span><br><span class="line">		<span class="keyword">int</span> idx_in_uv_11 = fy1 / <span class="number">2</span> * pInWidth + fx1;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 输出坐标</span></span><br><span class="line">		<span class="keyword">int</span> idx_out_y = tidy * pOutWidth + tidx;</span><br><span class="line">		<span class="keyword">int</span> idx_out_uv = tidy / <span class="number">2</span> * pOutWidth + tidx;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Y</span></span><br><span class="line">		pOutYData[idx_out_y] =</span><br><span class="line">			pInYData[idx_in_y_00] * (<span class="number">1</span> - xProportion) * (<span class="number">1</span> - yProportion) +</span><br><span class="line">			pInYData[idx_in_y_10] * xProportion * (<span class="number">1</span> - yProportion) +</span><br><span class="line">			pInYData[idx_in_y_01] * (<span class="number">1</span> - xProportion) * yProportion +</span><br><span class="line">			pInYData[idx_in_y_11] * xProportion * yProportion;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// U</span></span><br><span class="line">		pOutUVData[tidx % <span class="number">2</span> == <span class="number">0</span> ? idx_out_uv : idx_out_uv - <span class="number">1</span>] =</span><br><span class="line">			pInUVData[fx0 % <span class="number">2</span> == <span class="number">0</span> ? idx_in_uv_00 : idx_in_uv_00 - <span class="number">1</span>] * (<span class="number">1</span> - xProportion) * (<span class="number">1</span> - yProportion) +</span><br><span class="line">			pInUVData[fx0 % <span class="number">2</span> == <span class="number">0</span> ? idx_in_uv_10 : idx_in_uv_10 - <span class="number">1</span>] * xProportion * (<span class="number">1</span> - yProportion) +</span><br><span class="line">			pInUVData[fx1 % <span class="number">2</span> == <span class="number">0</span> ? idx_in_uv_01 : idx_in_uv_01 - <span class="number">1</span>] * (<span class="number">1</span> - xProportion) * yProportion +</span><br><span class="line">			pInUVData[fx1 % <span class="number">2</span> == <span class="number">0</span> ? idx_in_uv_11 : idx_in_uv_11 - <span class="number">1</span>] * xProportion * yProportion;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// V</span></span><br><span class="line">		pOutUVData[tidx % <span class="number">2</span> == <span class="number">0</span> ? idx_out_uv + <span class="number">1</span> : idx_out_uv] =</span><br><span class="line">			pInUVData[fx0 % <span class="number">2</span> == <span class="number">0</span> ? idx_in_uv_00 + <span class="number">1</span> : idx_in_uv_00] * (<span class="number">1</span> - xProportion) * (<span class="number">1</span> - yProportion) +</span><br><span class="line">			pInUVData[fx0 % <span class="number">2</span> == <span class="number">0</span> ? idx_in_uv_10 + <span class="number">1</span> : idx_in_uv_10] * xProportion * (<span class="number">1</span> - yProportion) +</span><br><span class="line">			pInUVData[fx1 % <span class="number">2</span> == <span class="number">0</span> ? idx_in_uv_01 + <span class="number">1</span> : idx_in_uv_01] * (<span class="number">1</span> - xProportion) * yProportion +</span><br><span class="line">			pInUVData[fx1 % <span class="number">2</span> == <span class="number">0</span> ? idx_in_uv_11 + <span class="number">1</span> : idx_in_uv_11] * xProportion * yProportion;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 修改大小 双线性差值 NV12</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;frame&quot;&gt;输入图像&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;width&quot;&gt;修改宽度&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;height&quot;&gt;修改高度&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;修改后图像&lt;/returns&gt;</span></span><br><span class="line"><span class="function">AVFrame* <span class="title">ReSize_Bilinear_NV12</span><span class="params">(AVFrame* frame, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">auto</span> img_size_y = width * height * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">unsigned</span> <span class="keyword">char</span>);</span><br><span class="line">	<span class="keyword">auto</span> img_size_uv = width * (height / <span class="number">2</span>) * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">unsigned</span> <span class="keyword">char</span>);</span><br><span class="line"></span><br><span class="line">	AVFrame* dstImg;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span>* outputY = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span>* outputUV = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">	dstImg = <span class="built_in">av_frame_alloc</span>();</span><br><span class="line">	<span class="built_in">av_image_alloc</span>(dstImg-&gt;data, dstImg-&gt;linesize, width, height, (AVPixelFormat)frame-&gt;format, <span class="number">1</span>);</span><br><span class="line">	dstImg-&gt;width = width;</span><br><span class="line">	dstImg-&gt;height = height;</span><br><span class="line">	dstImg-&gt;format = (AVPixelFormat)frame-&gt;format;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cudaMalloc</span>(&amp;outputY, img_size_y);</span><br><span class="line">	<span class="built_in">cudaMalloc</span>(&amp;outputUV, img_size_uv);</span><br><span class="line"></span><br><span class="line">	<span class="function">dim3 <span class="title">block</span><span class="params">(<span class="number">32</span>, <span class="number">32</span>)</span></span>;</span><br><span class="line">	<span class="function">dim3 <span class="title">grid</span><span class="params">((width + block.x - <span class="number">1</span>) / block.x, (height + block.y - <span class="number">1</span>) / block.y)</span></span>;</span><br><span class="line">	ReSizeKernel_Bilinear_NV12 &lt;&lt; &lt;grid, block &gt;&gt; &gt; (frame-&gt;data[<span class="number">0</span>], frame-&gt;data[<span class="number">1</span>], frame-&gt;width, frame-&gt;height, outputY, outputUV, width, height);</span><br><span class="line">	<span class="built_in">cudaThreadSynchronize</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 图像从 Gpu 拷贝到 Cpu</span></span><br><span class="line">	<span class="built_in">cudaMemcpy</span>(dstImg-&gt;data[<span class="number">0</span>], outputY, img_size_y, cudaMemcpyDeviceToHost);</span><br><span class="line">	<span class="built_in">cudaMemcpy</span>(dstImg-&gt;data[<span class="number">1</span>], outputUV, img_size_uv, cudaMemcpyDeviceToHost);</span><br><span class="line">	<span class="keyword">return</span> dstImg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="外部调用方法"><a href="#外部调用方法" class="headerlink" title="外部调用方法"></a>外部调用方法</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 修改图像大小</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;frame&quot;&gt;输入图像&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;width&quot;&gt;修改宽度&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;height&quot;&gt;修改高度&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;type&quot;&gt;0:最近邻插值 1:双线性差值&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;修改后图像&lt;/returns&gt;</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">AVFrame * <span class="title">ReSize</span><span class="params">(AVFrame * frame, <span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">int</span> type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	AVFrame* outFrame;</span><br><span class="line"></span><br><span class="line">	<span class="built_in"><span class="keyword">switch</span></span> (frame-&gt;format)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> AV_PIX_FMT_YUV420P:</span><br><span class="line">		<span class="keyword">if</span> (type == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			outFrame = <span class="built_in">ReSize_Nearest_YUV420P</span>(frame, width, height);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			outFrame = <span class="built_in">ReSize_Bilinear_YUV420P</span>(frame, width, height);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> AV_PIX_FMT_NV12:</span><br><span class="line">		<span class="keyword">if</span> (type == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			outFrame = <span class="built_in">ReSize_Nearest_NV12</span>(frame, width, height);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			outFrame = <span class="built_in">ReSize_Bilinear_NV12</span>(frame, width, height);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> outFrame;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>ffmpeg</tag>
        <tag>cuda</tag>
      </tags>
  </entry>
  <entry>
    <title>FFmpeg 编码视频</title>
    <url>/blog/2022/08/20/cpp-FFmpegEncoder/</url>
    <content><![CDATA[<h3 id="使用-FFmpeg-编码视频并推流或保存文件"><a href="#使用-FFmpeg-编码视频并推流或保存文件" class="headerlink" title="使用 FFmpeg 编码视频并推流或保存文件"></a>使用 FFmpeg 编码视频并推流或保存文件</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><a href="https://ffmpeg.org/">FFmpeg</a> 是一个完整的跨平台解决方案，用于录制、转换和流式传输音频和视频。<br>在处理 FFmpeg 编码视频前需了解 <a href="https://sadness96.github.io/blog/2021/11/08/cpp-FFmpegDecoder/">FFmpeg 解码视频</a> 与 <a href="https://sadness96.github.io/blog/2022/07/11/cpp-FFmpegPushCurrent/">FFmpeg 转发推流到 rtsp/rtmp</a>，此文以编码推流为目的，当然也可以编码后储存为文件或作为其他作用。<br>设置解码方式：TCP 优化、软解码（多线程）、硬解码（CUDA、DXVA2、D3D11VA）<br>设置编码器：<a href="https://zh.wikipedia.org/wiki/H.264/MPEG-4_AVC">H.264</a> 、 <a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E6%95%88%E7%8E%87%E8%A7%86%E9%A2%91%E7%BC%96%E7%A0%81">H.265</a><br>设置推流方式：<a href="https://zh.wikipedia.org/wiki/%E5%8D%B3%E6%99%82%E4%B8%B2%E6%B5%81%E5%8D%94%E5%AE%9A">RTSP</a> 、 <a href="https://zh.wikipedia.org/wiki/%E5%AE%9E%E6%97%B6%E6%B6%88%E6%81%AF%E5%8D%8F%E8%AE%AE">RTMP</a></p>
<h4 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h4><h5 id="参数变量"><a href="#参数变量" class="headerlink" title="参数变量"></a>参数变量</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// RTSP 标识</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	string rtspJudgment_ = <span class="string">&quot;rtsp&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// RTMP 标识</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	string rtmpJudgment_ = <span class="string">&quot;rtmp&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 是否启用 TCP 优化解码</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	<span class="keyword">bool</span> is_tcp_decode_ = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 是否多线程软解码</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	<span class="keyword">bool</span> is_thread_soft_decoding_ = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 是否硬解码</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	<span class="keyword">bool</span> is_hard_decoding_ = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 硬解码类型</span></span><br><span class="line">	<span class="comment">/// AV_HWDEVICE_TYPE_CUDA、AV_HWDEVICE_TYPE_DXVA2、AV_HWDEVICE_TYPE_D3D11VA</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	<span class="keyword">int</span> hw_type_ = AV_HWDEVICE_TYPE_CUDA;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 编码器 ID</span></span><br><span class="line">	<span class="comment">/// AV_CODEC_ID_H264、AV_CODEC_ID_HEVC</span></span><br><span class="line">	<span class="comment">/// 测试 RTMP 推流不支持 H265 编码</span></span><br><span class="line">	<span class="comment">/// 测试 H265 解码不支持硬编码类型 NV12</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	AVCodecID codec_id_ = AV_CODEC_ID_H264;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 编码帧率</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	<span class="keyword">int</span> fps_ = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 编码数据类型</span></span><br><span class="line">	<span class="comment">/// 硬解码为 AV_PIX_FMT_NV12、软解码为 AV_PIX_FMT_YUV420P</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	AVPixelFormat pix_fmt_ = is_hard_decoding_ ? AV_PIX_FMT_NV12 : AV_PIX_FMT_YUV420P;</span><br></pre></td></tr></table></figure>
<h5 id="解码-编码-推流"><a href="#解码-编码-推流" class="headerlink" title="解码 - 编码 - 推流"></a>解码 - 编码 - 推流</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用 FFmpeg C 头文件</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/opt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/channel_layout.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/common.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/imgutils.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/mathematics.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/samplefmt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/fifo.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavcodec/avcodec.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavformat/avformat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavformat/avio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavfilter/avfilter.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavfilter/buffersink.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavfilter/buffersrc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libswscale/swscale.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libswresample/swresample.h&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;winmm.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;avcodec.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;avformat.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;avutil.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;swscale.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 打印 FFmpeg 错误信息</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;error&quot;&gt;异常代码&lt;/param&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintError</span><span class="params">(<span class="keyword">int</span> error)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> buf[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="built_in">av_strerror</span>(error, buf, <span class="built_in"><span class="keyword">sizeof</span></span>(buf) - <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;FFmpeg Error Code:%d Info:%s\n&quot;</span>, error, buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 视频路径</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	string videoUrl_ = <span class="string">&quot;rtsp://localhost:8554/live&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 推流路径</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	string output = <span class="string">&quot;rtsp://localhost:8554/live2&quot;</span>;</span><br><span class="line">	<span class="comment">//string output = &quot;rtmp://localhost/live2&quot;;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 初始化 FFmpeg</span></span><br><span class="line">	<span class="built_in">av_register_all</span>();</span><br><span class="line">	<span class="built_in">avformat_network_init</span>();</span><br><span class="line"></span><br><span class="line">	AVFormatContext* inputContext = <span class="literal">NULL</span>;</span><br><span class="line">	inputContext = <span class="built_in">avformat_alloc_context</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置连接超时</span></span><br><span class="line">	AVDictionary* dict = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="keyword">if</span> (is_tcp_decode_)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 读取最大字节数 100KB</span></span><br><span class="line">		inputContext-&gt;probesize = <span class="number">100</span> * <span class="number">1024</span>;</span><br><span class="line">		<span class="comment">// 读取最大时长 200ms</span></span><br><span class="line">		inputContext-&gt;max_analyze_duration = <span class="number">200</span> * <span class="number">1000</span>;</span><br><span class="line">		<span class="comment">// 优先连接方式改为 TCP</span></span><br><span class="line">		<span class="built_in">av_dict_set</span>(&amp;dict, <span class="string">&quot;rtsp_transport&quot;</span>, <span class="string">&quot;tcp&quot;</span>, <span class="number">0</span>);</span><br><span class="line">		<span class="comment">// 扩大缓冲区，减少卡顿或花屏</span></span><br><span class="line">		<span class="built_in">av_dict_set</span>(&amp;dict, <span class="string">&quot;buffer_size&quot;</span>, <span class="string">&quot;1024000&quot;</span>, <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 设置超时断开</span></span><br><span class="line">	<span class="built_in">av_dict_set</span>(&amp;dict, <span class="string">&quot;stimeout&quot;</span>, <span class="string">&quot;2000000&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> ret = <span class="built_in">avformat_open_input</span>(&amp;inputContext, videoUrl_.<span class="built_in">c_str</span>(), <span class="literal">NULL</span>, &amp;dict);</span><br><span class="line">	<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">av_dict_free</span>(&amp;dict);</span><br><span class="line">		<span class="built_in">avformat_free_context</span>(inputContext);</span><br><span class="line">		<span class="built_in">PrintError</span>(ret);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ret = <span class="built_in">avformat_find_stream_info</span>(inputContext, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">PrintError</span>(ret);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 打印视频信息</span></span><br><span class="line">	<span class="built_in">av_dump_format</span>(inputContext, <span class="literal">NULL</span>, videoUrl_.<span class="built_in">c_str</span>(), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 打印音视频信息</span></span><br><span class="line">	AVStream* audioStream = <span class="literal">nullptr</span>;</span><br><span class="line">	AVStream* videoStream = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inputContext-&gt;nb_streams; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (inputContext-&gt;streams[i]-&gt;codecpar-&gt;codec_type == AVMEDIA_TYPE_AUDIO)</span><br><span class="line">		&#123;</span><br><span class="line">			audioStream = inputContext-&gt;streams[i];</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;===== 音频 =====&quot;</span> &lt;&lt; endl;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;sample_rate:&quot;</span> &lt;&lt; audioStream-&gt;codecpar-&gt;sample_rate &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (inputContext-&gt;streams[i]-&gt;codecpar-&gt;codec_type == AVMEDIA_TYPE_VIDEO)</span><br><span class="line">		&#123;</span><br><span class="line">			videoStream = inputContext-&gt;streams[i];</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;===== 视频 =====&quot;</span> &lt;&lt; endl;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;width:&quot;</span> &lt;&lt; videoStream-&gt;codecpar-&gt;width &lt;&lt; <span class="string">&quot; height:&quot;</span> &lt;&lt; videoStream-&gt;codecpar-&gt;height &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 解码视频数据</span></span><br><span class="line">	<span class="keyword">int</span> videoIndex = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inputContext-&gt;nb_streams; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (inputContext-&gt;streams[i]-&gt;codec-&gt;codec_type == AVMEDIA_TYPE_VIDEO)</span><br><span class="line">		&#123;</span><br><span class="line">			videoIndex = i;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (videoIndex == <span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Didn&#x27;t find a video stream\n&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	AVCodecContext* pCodecCtx;</span><br><span class="line">	AVCodec* pCodec;</span><br><span class="line">	pCodecCtx = inputContext-&gt;streams[videoIndex]-&gt;codec;</span><br><span class="line">	pCodec = <span class="built_in">avcodec_find_decoder</span>(pCodecCtx-&gt;codec_id);</span><br><span class="line">	<span class="keyword">if</span> (pCodec == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Codec not found.\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (is_thread_soft_decoding_)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 启用多线程软解码</span></span><br><span class="line">		pCodecCtx-&gt;thread_count = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (is_hard_decoding_)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 启用硬解码</span></span><br><span class="line">		AVBufferRef* hw_ctx = <span class="literal">nullptr</span>;</span><br><span class="line">		<span class="built_in">av_hwdevice_ctx_create</span>(&amp;hw_ctx, (AVHWDeviceType)hw_type_, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">		pCodecCtx-&gt;hw_device_ctx = <span class="built_in">av_buffer_ref</span>(hw_ctx);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">avcodec_open2</span>(pCodecCtx, pCodec, <span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Could not open codec.\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// <span class="doctag">TODO:</span> 编码需要设置宽高，此处应根据实际需求设置</span></span><br><span class="line">	<span class="keyword">int</span> width_ = pCodecCtx-&gt;width;</span><br><span class="line">	<span class="keyword">int</span> height_ = pCodecCtx-&gt;height;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建输出流连接</span></span><br><span class="line">	AVFormatContext* outputContext;</span><br><span class="line">	string rtspJudgment = <span class="string">&quot;rtsp&quot;</span>;</span><br><span class="line">	string rtmpJudgment = <span class="string">&quot;rtmp&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (output.<span class="built_in">rfind</span>(rtspJudgment, <span class="number">0</span>) == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 初始化 rtsp 连接</span></span><br><span class="line">		ret = <span class="built_in">avformat_alloc_output_context2</span>(&amp;outputContext, <span class="literal">NULL</span>, <span class="string">&quot;rtsp&quot;</span>, output.<span class="built_in">c_str</span>());</span><br><span class="line">		<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;open output context failed\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (output.<span class="built_in">rfind</span>(rtmpJudgment, <span class="number">0</span>) == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 初始化 rtmp 连接</span></span><br><span class="line">		<span class="keyword">int</span> ret = <span class="built_in">avformat_alloc_output_context2</span>(&amp;outputContext, <span class="literal">nullptr</span>, <span class="string">&quot;flv&quot;</span>, output.<span class="built_in">c_str</span>());</span><br><span class="line">		<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;open output context failed\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		ret = <span class="built_in">avio_open2</span>(&amp;outputContext-&gt;pb, output.<span class="built_in">c_str</span>(), AVIO_FLAG_READ_WRITE, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">		<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">PrintError</span>(ret);</span><br><span class="line">			<span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;open avio failed&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 判断文件夹是否合法</span></span><br><span class="line">		string outDir = output.<span class="built_in">substr</span>(<span class="number">0</span>, output.<span class="built_in">find_last_of</span>(<span class="string">&quot;\\&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strlen</span>(outDir.<span class="built_in">c_str</span>()) &gt; MAX_PATH)</span><br><span class="line">		&#123;</span><br><span class="line">			cerr &lt;&lt; <span class="string">&quot;Maximum path length exceeded!&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 文件夹不存在则创建</span></span><br><span class="line">		<span class="keyword">int</span> ipathLength = <span class="built_in">strlen</span>(outDir.<span class="built_in">c_str</span>());</span><br><span class="line">		<span class="keyword">int</span> ileaveLength = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> iCreatedLength = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">char</span> szPathTemp[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; (<span class="literal">NULL</span> != <span class="built_in">strchr</span>(outDir.<span class="built_in">c_str</span>() + iCreatedLength, <span class="string">&#x27;\\&#x27;</span>)); i++)</span><br><span class="line">		&#123;</span><br><span class="line">			ileaveLength = <span class="built_in">strlen</span>(<span class="built_in">strchr</span>(outDir.<span class="built_in">c_str</span>() + iCreatedLength, <span class="string">&#x27;\\&#x27;</span>)) - <span class="number">1</span>;</span><br><span class="line">			iCreatedLength = ipathLength - ileaveLength;</span><br><span class="line">			<span class="built_in">strncpy</span>(szPathTemp, outDir.<span class="built_in">c_str</span>(), iCreatedLength);</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">access</span>(szPathTemp, <span class="number">0</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="built_in">mkdir</span>(szPathTemp))</span><br><span class="line">				&#123;</span><br><span class="line">					cerr &lt;&lt; <span class="string">&quot;mkdir &quot;</span> &lt;&lt; szPathTemp &lt;&lt; <span class="string">&quot; false, errno:&quot;</span> &lt;&lt; errno &lt;&lt; <span class="string">&quot; errmsg:&quot;</span> &lt;&lt; <span class="built_in">strerror</span>(errno) &lt;&lt; endl;</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (iCreatedLength &lt; ipathLength)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">access</span>(outDir.<span class="built_in">c_str</span>(), <span class="number">0</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="built_in">mkdir</span>(outDir.<span class="built_in">c_str</span>()))</span><br><span class="line">				&#123;</span><br><span class="line">					cerr &lt;&lt; <span class="string">&quot;mkdir &quot;</span> &lt;&lt; outDir &lt;&lt; <span class="string">&quot; false, errno:&quot;</span> &lt;&lt; errno &lt;&lt; <span class="string">&quot; errmsg:&quot;</span> &lt;&lt; <span class="built_in">strerror</span>(errno) &lt;&lt; endl;</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 初始化文件连接</span></span><br><span class="line">		ret = <span class="built_in">avformat_alloc_output_context2</span>(&amp;outputContext, <span class="literal">NULL</span>, <span class="literal">NULL</span>, output.<span class="built_in">c_str</span>());</span><br><span class="line">		<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;open output context failed\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		ret = <span class="built_in">avio_open2</span>(&amp;outputContext-&gt;pb, output.<span class="built_in">c_str</span>(), AVIO_FLAG_READ_WRITE, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">		<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">PrintError</span>(ret);</span><br><span class="line">			<span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;open avio failed&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置编码器 AV_CODEC_ID_H264 AV_CODEC_ID_HEVC</span></span><br><span class="line">	AVCodec* codec = <span class="built_in">avcodec_find_encoder</span>(codec_id_);</span><br><span class="line">	<span class="keyword">if</span> (!codec)</span><br><span class="line">	&#123;</span><br><span class="line">		cerr &lt;&lt; <span class="string">&quot;codec not find!&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	AVStream* stream = <span class="built_in">avformat_new_stream</span>(outputContext, codec);</span><br><span class="line"></span><br><span class="line">	AVCodecContext* codecContext = <span class="built_in">avcodec_alloc_context3</span>(codec);</span><br><span class="line">	<span class="keyword">if</span> (!codecContext)</span><br><span class="line">	&#123;</span><br><span class="line">		cerr &lt;&lt; <span class="string">&quot;avcodec_alloc_context3 failed!&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	codecContext-&gt;codec_id = codec_id_;</span><br><span class="line">	codecContext-&gt;width = width_;</span><br><span class="line">	codecContext-&gt;height = height_;</span><br><span class="line">	codecContext-&gt;time_base = &#123; <span class="number">1</span>, fps_ &#125;;</span><br><span class="line">	codecContext-&gt;pix_fmt = pix_fmt_;</span><br><span class="line"></span><br><span class="line">	ret = <span class="built_in">avcodec_open2</span>(codecContext, codec, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">PrintError</span>(ret);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;avcodec_open2 success!&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	AVCodecParameters* pa = <span class="built_in">avcodec_parameters_alloc</span>();</span><br><span class="line">	pa-&gt;codec_type = AVMEDIA_TYPE_VIDEO;</span><br><span class="line">	pa-&gt;codec_id = codec_id_;</span><br><span class="line">	pa-&gt;width = width_;</span><br><span class="line">	pa-&gt;height = height_;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// RTMP 需要写入设置 sps pps</span></span><br><span class="line">	<span class="keyword">if</span> (output.<span class="built_in">find</span>(rtmpJudgment) != string::npos)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">unsigned</span> <span class="keyword">char</span> sps_pps[<span class="number">23</span>] = &#123; <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x42</span>, <span class="number">0x00</span>, <span class="number">0x0a</span>, <span class="number">0xf8</span>, <span class="number">0x0f</span>, <span class="number">0x00</span>, <span class="number">0x44</span>, <span class="number">0xbe</span>, <span class="number">0x8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x68</span>, <span class="number">0xce</span>, <span class="number">0x38</span>, <span class="number">0x80</span> &#125;;</span><br><span class="line">		pa-&gt;extradata_size = <span class="number">23</span>;</span><br><span class="line">		pa-&gt;extradata = (<span class="keyword">uint8_t</span>*)<span class="built_in">av_malloc</span>(<span class="number">23</span> + AV_INPUT_BUFFER_PADDING_SIZE);</span><br><span class="line">		<span class="keyword">if</span> (pa-&gt;extradata == <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;could not av_malloc the video params extradata!\n&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">memcpy</span>(pa-&gt;extradata, sps_pps, <span class="number">23</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ret = <span class="built_in">avcodec_parameters_copy</span>(stream-&gt;codecpar, pa);</span><br><span class="line">	<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;copy coddec context failed&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ret = <span class="built_in">avformat_write_header</span>(outputContext, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;format write header failed&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_INFO, <span class="string">&quot; Open output file success %s\n&quot;</span>, output.<span class="built_in">c_str</span>());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 解码帧</span></span><br><span class="line">	AVPacket* packet;</span><br><span class="line">	packet = (AVPacket*)<span class="built_in">av_malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(AVPacket));</span><br><span class="line">	AVFrame* frame, * hw_frame;</span><br><span class="line">	frame = <span class="built_in">av_frame_alloc</span>();</span><br><span class="line">	hw_frame = <span class="built_in">av_frame_alloc</span>();</span><br><span class="line"></span><br><span class="line">	AVPacket* packetEX = (AVPacket*)<span class="built_in">av_malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(AVPacket));</span><br><span class="line">	<span class="keyword">clock_t</span> startPts = <span class="built_in">clock</span>();</span><br><span class="line">	<span class="keyword">clock_t</span> stopPts;</span><br><span class="line">	<span class="keyword">int</span> pts = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">clock_t</span> startSendTimeOut, stopSendTimeOut;</span><br><span class="line">		startSendTimeOut = <span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line">		ret = <span class="built_in">av_read_frame</span>(inputContext, packet);</span><br><span class="line">		<span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;Read Frame Error. Error Code:&quot;</span> &lt;&lt; ret &lt;&lt; endl;</span><br><span class="line">			<span class="built_in">PrintError</span>(ret);</span><br><span class="line">			<span class="comment">// 释放 AVPacket</span></span><br><span class="line">			<span class="built_in">av_free_packet</span>(packet);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!packet || packet-&gt;stream_index != videoStream-&gt;index)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// 判断是否是视频流</span></span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		ret = <span class="built_in">avcodec_send_packet</span>(pCodecCtx, packet);</span><br><span class="line">		<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;Send Packet Error. Error Code:&quot;</span> &lt;&lt; ret &lt;&lt; endl;</span><br><span class="line">			<span class="built_in">PrintError</span>(ret);</span><br><span class="line">			<span class="comment">// 释放 AVPacket</span></span><br><span class="line">			<span class="built_in">av_free_packet</span>(packet);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		stopSendTimeOut = <span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (ret &gt;= <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">clock_t</span> startReceiveTimeOut;</span><br><span class="line">			startReceiveTimeOut = <span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (frame == <span class="literal">nullptr</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				frame = <span class="built_in">av_frame_alloc</span>();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">auto</span> ret = <span class="built_in">avcodec_receive_frame</span>(pCodecCtx, frame);</span><br><span class="line">			<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">av_frame_free</span>(&amp;frame);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (ret == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">auto</span> pframe = frame;</span><br><span class="line">				<span class="keyword">if</span> (pCodecCtx-&gt;hw_device_ctx)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="comment">// 硬解码转换 显存 =&gt; 内存</span></span><br><span class="line">					<span class="built_in">av_hwframe_transfer_data</span>(hw_frame, frame, <span class="number">0</span>);</span><br><span class="line">					pframe = hw_frame;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// 设置 pts 推流视频</span></span><br><span class="line">				stopPts = <span class="built_in">clock</span>();</span><br><span class="line">				<span class="keyword">auto</span> setPtsMs = stopPts - startPts;</span><br><span class="line">				pframe-&gt;pts = pts += <span class="built_in">av_rescale_q</span>(setPtsMs, &#123; <span class="number">1</span>, <span class="number">1000</span> &#125;, outputContext-&gt;streams[<span class="number">0</span>]-&gt;time_base);</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;setPtsMs:&quot;</span> &lt;&lt; setPtsMs &lt;&lt; <span class="string">&quot; - pts:&quot;</span> &lt;&lt; pframe-&gt;pts &lt;&lt; endl;</span><br><span class="line">				startPts = stopPts;</span><br><span class="line"></span><br><span class="line">				ret = <span class="built_in">avcodec_send_frame</span>(codecContext, pframe);</span><br><span class="line">				<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">PrintError</span>(ret);</span><br><span class="line">					<span class="built_in">av_frame_free</span>(&amp;pframe);</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">while</span> (ret &gt;= <span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					ret = <span class="built_in">avcodec_receive_packet</span>(codecContext, packetEX);</span><br><span class="line">					<span class="keyword">if</span> (ret == <span class="built_in">AVERROR</span>(EAGAIN) || ret == AVERROR_EOF)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="built_in">PrintError</span>(ret);</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line"></span><br><span class="line">					<span class="keyword">if</span> (<span class="built_in">av_interleaved_write_frame</span>(outputContext, packetEX) &gt;= <span class="number">0</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="comment">//cout &lt;&lt; &quot;WritePacket Success!&quot; &lt;&lt; endl;</span></span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						cout &lt;&lt; <span class="string">&quot;WritePacket failed! ret = &quot;</span> &lt;&lt; ret &lt;&lt; endl;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 释放 AVFrame</span></span><br><span class="line">			<span class="built_in">av_frame_free</span>(&amp;frame);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 释放 AVPacket</span></span><br><span class="line">		<span class="built_in">av_free_packet</span>(packet);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 释放输入 AVFormatContext</span></span><br><span class="line">	<span class="built_in">avformat_close_input</span>(&amp;inputContext);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 写入文件尾</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">av_write_trailer</span>(outputContext) &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;format write trailer failed&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 释放 AVCodecContext</span></span><br><span class="line">	<span class="built_in">avcodec_free_context</span>(&amp;pCodecCtx);</span><br><span class="line">	<span class="built_in">avcodec_free_context</span>(&amp;codecContext);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 释放输出 AVFormatContext</span></span><br><span class="line">	<span class="built_in">avformat_close_input</span>(&amp;outputContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><h5 id="不支持的内容"><a href="#不支持的内容" class="headerlink" title="不支持的内容"></a>不支持的内容</h5><ul>
<li>测试 RTMP 推流不支持 H265 编码，似乎可以重新编译 FFmpeg 来支持。</li>
<li>测试 H265 解码不支持硬编码类型 NV12。</li>
</ul>
<h5 id="编码帧率"><a href="#编码帧率" class="headerlink" title="编码帧率"></a>编码帧率</h5><p>编码推流视频会根据帧率显示，常见的帧率：</p>
<ul>
<li>电影 24fps</li>
<li>监控 25fps</li>
<li>普通视频 30fps/60fps</li>
</ul>
<h5 id="推流到-RTSP-RTMP"><a href="#推流到-RTSP-RTMP" class="headerlink" title="推流到 RTSP / RTMP"></a>推流到 RTSP / RTMP</h5><ol>
<li>创建 RTSP / RTMP 流需要通过 <a href="https://ffmpeg.org/doxygen/3.0/avformat_8h.html#a6ddf3d982feb45fa5081420ee911f5d5">avformat_alloc_output_context2</a> 创建 “rtsp” / “flv” 上下文。</li>
<li>创建 RTMP 流需要创建并初始化一个 <a href="https://ffmpeg.org/doxygen/trunk/structAVIOContext.html">AVIOContext</a> 以访问 url 指示的资源。</li>
<li><p>创建 RTMP 流需要写入流标头前写入 sps pps，此处没有验证具体含义，可以使用其他方式写入，但是测试时对各类视频没有影响。</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> sps_pps[<span class="number">23</span>] = &#123; <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x42</span>, <span class="number">0x00</span>, <span class="number">0x0a</span>, <span class="number">0xf8</span>, <span class="number">0x0f</span>, <span class="number">0x00</span>, <span class="number">0x44</span>, <span class="number">0xbe</span>, <span class="number">0x8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x68</span>, <span class="number">0xce</span>, <span class="number">0x38</span>, <span class="number">0x80</span> &#125;;</span><br><span class="line">pa-&gt;extradata_size = <span class="number">23</span>;</span><br><span class="line">pa-&gt;extradata = (<span class="keyword">uint8_t</span>*)<span class="built_in">av_malloc</span>(<span class="number">23</span> + AV_INPUT_BUFFER_PADDING_SIZE);</span><br><span class="line"><span class="keyword">if</span> (pa-&gt;extradata == <span class="literal">NULL</span>) &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;could not av_malloc the video params extradata!\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memcpy</span>(pa-&gt;extradata, sps_pps, <span class="number">23</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <a href="https://ffmpeg.org/doxygen/3.3/group__lavf__encoding.html#ga18b7b10bb5b94c4842de18166bc677cb">avformat_write_header</a> 写入流标头。</p>
</li>
</ol>
<h5 id="保存到本地文件"><a href="#保存到本地文件" class="headerlink" title="保存到本地文件"></a>保存到本地文件</h5><p>测试保存本地文件支持的文件格式有：mp4、flv、mov、ts、avi。</p>
<ol>
<li>保存到本地文件首先需要判断文件路径的可用，如果文件夹为空时自动创建。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断文件夹是否合法</span></span><br><span class="line">string outDir = output.<span class="built_in">substr</span>(<span class="number">0</span>, output.<span class="built_in">find_last_of</span>(<span class="string">&quot;\\&quot;</span>) + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strlen</span>(outDir.<span class="built_in">c_str</span>()) &gt; MAX_PATH)</span><br><span class="line">&#123;</span><br><span class="line">	cerr &lt;&lt; <span class="string">&quot;Maximum path length exceeded!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件夹不存在则创建</span></span><br><span class="line"><span class="keyword">int</span> ipathLength = <span class="built_in">strlen</span>(outDir.<span class="built_in">c_str</span>());</span><br><span class="line"><span class="keyword">int</span> ileaveLength = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> iCreatedLength = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> szPathTemp[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; (<span class="literal">NULL</span> != <span class="built_in">strchr</span>(outDir.<span class="built_in">c_str</span>() + iCreatedLength, <span class="string">&#x27;\\&#x27;</span>)); i++)</span><br><span class="line">&#123;</span><br><span class="line">	ileaveLength = <span class="built_in">strlen</span>(<span class="built_in">strchr</span>(outDir.<span class="built_in">c_str</span>() + iCreatedLength, <span class="string">&#x27;\\&#x27;</span>)) - <span class="number">1</span>;</span><br><span class="line">	iCreatedLength = ipathLength - ileaveLength;</span><br><span class="line">	<span class="built_in">strncpy</span>(szPathTemp, outDir.<span class="built_in">c_str</span>(), iCreatedLength);</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">access</span>(szPathTemp, <span class="number">0</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">mkdir</span>(szPathTemp))</span><br><span class="line">		&#123;</span><br><span class="line">			cerr &lt;&lt; <span class="string">&quot;mkdir &quot;</span> &lt;&lt; szPathTemp &lt;&lt; <span class="string">&quot; false, errno:&quot;</span> &lt;&lt; errno &lt;&lt; <span class="string">&quot; errmsg:&quot;</span> &lt;&lt; <span class="built_in">strerror</span>(errno) &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (iCreatedLength &lt; ipathLength)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">access</span>(outDir.<span class="built_in">c_str</span>(), <span class="number">0</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">mkdir</span>(outDir.<span class="built_in">c_str</span>()))</span><br><span class="line">		&#123;</span><br><span class="line">			cerr &lt;&lt; <span class="string">&quot;mkdir &quot;</span> &lt;&lt; outDir &lt;&lt; <span class="string">&quot; false, errno:&quot;</span> &lt;&lt; errno &lt;&lt; <span class="string">&quot; errmsg:&quot;</span> &lt;&lt; <span class="built_in">strerror</span>(errno) &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>保存到本地文件需要通过 <a href="https://ffmpeg.org/doxygen/3.0/avformat_8h.html#a6ddf3d982feb45fa5081420ee911f5d5">avformat_alloc_output_context2</a> 创建 NULL 上下文即可，FFmpeg 可以通过文件路径中的后缀名自动创建类型。</li>
<li>创建并初始化一个 AVIOContext 以访问 url 指示的资源。</li>
<li>使用 <a href="https://ffmpeg.org/doxygen/3.3/group__lavf__encoding.html#ga18b7b10bb5b94c4842de18166bc677cb">avformat_write_header</a> 写入流标头。</li>
<li>与推流不同，在写入本地视频的结尾，需要使用 <a href="https://ffmpeg.org/doxygen/3.4/group__lavf__encoding.html#ga7f14007e7dc8f481f054b21614dfec13">av_write_trailer</a> 写入流尾并释放数据，否则会对一些格式造成一些影响，例如： mp4 格式无法播放，flv 格式无法正确显示时间轴。</li>
</ol>
<h5 id="设置-pts"><a href="#设置-pts" class="headerlink" title="设置 pts"></a>设置 pts</h5><p>推流到流媒体根据目标类型需要有不同的设置。</p>
<ul>
<li>推流到 RTSP：time_base 默认为 90000，pts 平均以 3600 递增。</li>
<li>推流到 RTMP：time_base 默认为 1000，pts 平均以 40 递增。</li>
</ul>
<p>由于编码是多线程，测试时以当前编码间隔计算 pts，使用 <a href="https://www.ffmpeg.org/doxygen/0.6/mathematics_8c.html#32ddc164f0fd4972907f68c12fcdbd89">av_rescale_q</a> 从间隔时间戳转换到 pts，有效防止计算溢出的情况。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">clock_t</span> startPts = <span class="built_in">clock</span>();</span><br><span class="line"><span class="keyword">clock_t</span> stopPts;</span><br><span class="line"><span class="keyword">int</span> pts = <span class="number">0</span>;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 循环编码</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 设置 pts 推流视频</span></span><br><span class="line">    stopPts = <span class="built_in">clock</span>();</span><br><span class="line">    <span class="keyword">auto</span> setPtsMs = stopPts - startPts;</span><br><span class="line">    pframe-&gt;pts = pts += <span class="built_in">av_rescale_q</span>(setPtsMs, &#123; <span class="number">1</span>, <span class="number">1000</span> &#125;, outputContext-&gt;streams[<span class="number">0</span>]-&gt;time_base);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;setPtsMs:&quot;</span> &lt;&lt; setPtsMs &lt;&lt; <span class="string">&quot; - pts:&quot;</span> &lt;&lt; pframe-&gt;pts &lt;&lt; endl;</span><br><span class="line">    startPts = stopPts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>FFmpeg 硬编码视频</title>
    <url>/blog/2022/12/31/cpp-FFmpegHWEncoder/</url>
    <content><![CDATA[<h3 id="使用-FFmpeg-QSV-NVENC-硬编码视频并推流"><a href="#使用-FFmpeg-QSV-NVENC-硬编码视频并推流" class="headerlink" title="使用 FFmpeg QSV NVENC 硬编码视频并推流"></a>使用 FFmpeg QSV NVENC 硬编码视频并推流</h3><span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在处理 FFmpeg 硬编码前需了解 <a href="https://sadness96.github.io/blog/2022/08/20/cpp-FFmpegEncoder/">FFmpeg 编码视频</a>。<br>在 FFmpeg 中软编码（AV_CODEC_ID_H264、AV_CODEC_ID_HEVC）对硬件要求较低，可以说能运行系统的 CPU 都可以正常编码，而硬编码（Intel qsv、NVIDIA nvenc）却直接要求硬件型号以及相对应驱动版本，但是同样的可以给编码效率带来大幅度提升。</p>
<h3 id="硬编码"><a href="#硬编码" class="headerlink" title="硬编码"></a>硬编码</h3><p>首先检查 FFmpeg 支持哪些硬编码格式，可以通过命令行或代码查询，FFmpeg 支持仅代表编译时添加了该模块，还需要检查系统硬件是否支持，或者直接调用之后等报错。<br><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">:: 查看编解码器支持</span><br><span class="line">ffmpeg -codecs</span><br><span class="line"></span><br><span class="line">:: 其中这两项表示 h264 与 h265 的编码器</span><br><span class="line">DEV.LS h264    H.<span class="number">264</span> / AVC / MPEG-<span class="number">4</span> AVC / MPEG-<span class="number">4</span> part <span class="number">10</span> (decoders: h264 h264_qsv h264_cuvid ) (encoders: libx264 libx264rgb h264_amf h264_mf h264_nvenc h264_qsv nvenc nvenc_h264 )</span><br><span class="line">DEV.L. hevc    H.<span class="number">265</span> / HEVC (High Efficiency Video Coding) (decoders: hevc hevc_qsv hevc_cuvid ) (encoders: libx265 nvenc_hevc hevc_amf hevc_mf hevc_nvenc hevc_qsv )</span><br></pre></td></tr></table></figure></p>
<p>在代码调用上，使用 <a href="https://ffmpeg.org/doxygen/3.4/group__lavc__encoding.html#gaa614ffc38511c104bdff4a3afa086d37">avcodec_find_encoder_by_name</a> 方法即可获取硬编码 AVCodec。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置编码器 h264_qsv/hevc_qsv/h264_nvenc/hevc_nvenc</span></span><br><span class="line">AVCodec* codec = <span class="built_in">avcodec_find_encoder_by_name</span>(<span class="string">&quot;h264_qsv&quot;</span>);</span><br></pre></td></tr></table></figure></p>
<p>另外在设置 pts 与 dts 时有一些差异，软解码时设置 pts 即可，dts 会在编码是自动计算，所以在 AVFrame 中设置或是在 AVPacket 中设置都可以，但是硬编码却需要同时设置 pts 与 dts，所以硬解码必须在 AVPacket 中设置。</p>
<h4 id="Intel-qsv"><a href="#Intel-qsv" class="headerlink" title="Intel qsv"></a>Intel qsv</h4><h5 id="检查是否支持"><a href="#检查是否支持" class="headerlink" title="检查是否支持"></a>检查是否支持</h5><p>如果在环境异常的系统中直接调用，会报以下错误：<br><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">[h264_qsv @ <span class="number">000002</span>b3d5e76540] Error initializing an internal MFX session: unsupported (-<span class="number">3</span>)</span><br><span class="line">FFmpeg Error Code:-<span class="number">40</span> Info:Function <span class="keyword">not</span> implemented</span><br></pre></td></tr></table></figure></p>
<p>首先检查：计算机管理 -&gt; 设备管理器 -&gt; 显示适配器 中是否包含英特尔核显<br><img src="https://sadness96.github.io/images/blog/cpp-FFmpegHWEncoder/设备管理器.jpg"/></p>
<p>如果未显示核显设备，首先去搜索以下自己的 Intel CPU 是否支持核显，以及是否支持英特尔 Quick Sync Video 技术，大部分 CPU 都是支持的，但是问题出现在了主板上，现在的主板大多在插入独显后会屏蔽核显，可以在 BIOS 中设置 Graphics Device 开启核显，但是我找了好几台电脑，很多主板甚至不提供这个选项。<br>如果成功开起了核显后就可以安装驱动了，我测试在安装了 Intel 驱动的电脑中可以直接开启 QSV 编码，但是似乎有人还是会报错，可以尝试安装 <a href="https://www.intel.com/content/www/us/en/developer/tools/media-sdk/overview.html">Intel® Media SDK</a>，Intel 的注册流程过于麻烦，可以直接点击<a href="https://registrationcenter-download.intel.com/akdlm/irc_nas/vcp/17861/MSDK2021R1.exe">下载</a>，安装后尝试。</p>
<h5 id="测试耗时"><a href="#测试耗时" class="headerlink" title="测试耗时"></a>测试耗时</h5><p>找了好几台电脑，仅有的一台可以正确显示核显的电脑，CPU 的性能并不是很高，所以测试结果仅供参考，测试 7680 分辨率不支持编码，不清楚支持的最大分辨率是多少，没有在官方文档中找到相关资料。</p>
<ul>
<li>CPU：Intel i7 8750H</li>
<li>核显：Intel UHD Graphics 630</li>
<li>测试视频分辨率：3840 x 2160</li>
<li>测试编码耗时方法：<a href="https://ffmpeg.org/doxygen/3.4/group__lavc__decoding.html#ga9395cb802a5febf1f00df31497779169">avcodec_send_frame</a>、<a href="https://ffmpeg.org/doxygen/trunk/group__lavc__decoding.html#ga5b8eff59cf259747cf0b31563e38ded6">avcodec_receive_packet</a></li>
</ul>
<table>
<thead>
<tr>
<th>编码方式</th>
<th>编码类型</th>
<th>耗时</th>
</tr>
</thead>
<tbody>
<tr>
<td>cpu h264</td>
<td>yuv420p</td>
<td>13ms - 154ms</td>
</tr>
<tr>
<td>cpu h264</td>
<td>nv12</td>
<td>11ms - 330ms</td>
</tr>
<tr>
<td>cpu h265</td>
<td>yuv420p</td>
<td>74ms - 1037ms</td>
</tr>
<tr>
<td>cpu h265</td>
<td>nv12</td>
<td>不支持</td>
</tr>
<tr>
<td>qsv h264</td>
<td>yuv420p</td>
<td>不支持</td>
</tr>
<tr>
<td>qsv h264</td>
<td>nv12</td>
<td>3ms - 15ms</td>
</tr>
<tr>
<td>qsv h265</td>
<td>yuv420p</td>
<td>不支持</td>
</tr>
<tr>
<td>qsv h265</td>
<td>nv12</td>
<td>22ms - 51ms</td>
</tr>
</tbody>
</table>
<h4 id="NVIDIA-nvenc"><a href="#NVIDIA-nvenc" class="headerlink" title="NVIDIA nvenc"></a>NVIDIA nvenc</h4><h5 id="检查是否支持-1"><a href="#检查是否支持-1" class="headerlink" title="检查是否支持"></a>检查是否支持</h5><p>如果在环境异常的系统中直接调用，会报以下错误：<br><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">[h264_nvenc @ <span class="number">000001</span>c6a13a7f80] Driver does <span class="keyword">not</span> support the required nvenc API version. Required: <span class="number">11</span>.<span class="number">1</span> Found: <span class="number">11</span>.<span class="number">0</span></span><br><span class="line">[h264_nvenc @ <span class="number">000001</span>c6a13a7f80] The minimum required Nvidia driver <span class="keyword">for</span> nvenc is (unknown) or newer</span><br><span class="line">avcodec_open2 failed!Function <span class="keyword">not</span> implemented</span><br></pre></td></tr></table></figure></p>
<p>可能是所使用的英伟达显卡不是被支持的型号，也有可能是驱动程序需要更新，从 <a href="https://developer.nvidia.com/nvidia-video-codec-sdk">NVIDIA Video Codec SDK</a> 中查找自己的显卡是否支持，并更新显卡驱动。</p>
<h5 id="测试耗时-1"><a href="#测试耗时-1" class="headerlink" title="测试耗时"></a>测试耗时</h5><p>nvenc 最大解码分辨率为 4096 x 4096。</p>
<ul>
<li>CPU：Intel i9 9900K</li>
<li>独显：NVIDIA GeForce RTX 2060</li>
<li>测试视频分辨率：3840 x 2160</li>
<li>测试编码耗时方法：<a href="https://ffmpeg.org/doxygen/3.4/group__lavc__decoding.html#ga9395cb802a5febf1f00df31497779169">avcodec_send_frame</a>、<a href="https://ffmpeg.org/doxygen/trunk/group__lavc__decoding.html#ga5b8eff59cf259747cf0b31563e38ded6">avcodec_receive_packet</a></li>
</ul>
<table>
<thead>
<tr>
<th>编码方式</th>
<th>编码类型</th>
<th>耗时</th>
</tr>
</thead>
<tbody>
<tr>
<td>cpu h264</td>
<td>yuv420p</td>
<td>4ms - 8ms</td>
</tr>
<tr>
<td>cpu h264</td>
<td>nv12</td>
<td>4ms - 8ms</td>
</tr>
<tr>
<td>cpu h265</td>
<td>yuv420p</td>
<td>36ms - 551ms</td>
</tr>
<tr>
<td>cpu h265</td>
<td>nv12</td>
<td>不支持</td>
</tr>
<tr>
<td>nvenc h264</td>
<td>yuv420p</td>
<td>2ms - 4ms</td>
</tr>
<tr>
<td>nvenc h264</td>
<td>nv12</td>
<td>1ms - 4ms</td>
</tr>
<tr>
<td>nvenc h265</td>
<td>yuv420p</td>
<td>2ms - 4ms</td>
</tr>
<tr>
<td>nvenc h265</td>
<td>nv12</td>
<td>1ms - 4ms</td>
</tr>
</tbody>
</table>
<h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><h5 id="参数变量"><a href="#参数变量" class="headerlink" title="参数变量"></a>参数变量</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// RTSP 标识</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	string rtspJudgment_ = <span class="string">&quot;rtsp&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// RTMP 标识</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	string rtmpJudgment_ = <span class="string">&quot;rtmp&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 是否启用 TCP 优化解码</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	<span class="keyword">bool</span> is_tcp_decode_ = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 是否多线程软解码</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	<span class="keyword">bool</span> is_thread_soft_decoding_ = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 是否硬解码</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	<span class="keyword">bool</span> is_hard_decoding_ = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 硬解码类型</span></span><br><span class="line">	<span class="comment">/// AV_HWDEVICE_TYPE_CUDA、AV_HWDEVICE_TYPE_DXVA2、AV_HWDEVICE_TYPE_D3D11VA</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	<span class="keyword">int</span> hw_type_ = AV_HWDEVICE_TYPE_CUDA;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 编码帧率</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	<span class="keyword">int</span> fps_ = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 编码数据类型</span></span><br><span class="line">	<span class="comment">/// 硬解码为 AV_PIX_FMT_NV12、软解码为 AV_PIX_FMT_YUV420P</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	AVPixelFormat pix_fmt_ = is_hard_decoding_ ? AV_PIX_FMT_NV12 : AV_PIX_FMT_YUV420P;</span><br></pre></td></tr></table></figure>
<h5 id="解码-编码-推流"><a href="#解码-编码-推流" class="headerlink" title="解码 - 编码 - 推流"></a>解码 - 编码 - 推流</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用 FFmpeg C 头文件</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/opt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/channel_layout.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/common.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/imgutils.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/mathematics.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/samplefmt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/fifo.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavcodec/avcodec.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavformat/avformat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavformat/avio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavfilter/avfilter.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavfilter/buffersink.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavfilter/buffersrc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libswscale/swscale.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libswresample/swresample.h&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;winmm.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;avcodec.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;avformat.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;avutil.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;swscale.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 打印 FFmpeg 错误信息</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;error&quot;&gt;异常代码&lt;/param&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintError</span><span class="params">(<span class="keyword">int</span> error)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> buf[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="built_in">av_strerror</span>(error, buf, <span class="built_in"><span class="keyword">sizeof</span></span>(buf) - <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;FFmpeg Error Code:%d Info:%s\n&quot;</span>, error, buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 视频路径</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	string videoUrl_ = <span class="string">&quot;rtsp://localhost:8554/live&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 推流路径</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	string output = <span class="string">&quot;rtsp://localhost:8554/live2&quot;</span>;</span><br><span class="line">	<span class="comment">//string output = &quot;rtmp://localhost/live2&quot;;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 初始化 FFmpeg</span></span><br><span class="line">	<span class="built_in">av_register_all</span>();</span><br><span class="line">	<span class="built_in">avformat_network_init</span>();</span><br><span class="line"></span><br><span class="line">	AVFormatContext* inputContext = <span class="literal">NULL</span>;</span><br><span class="line">	inputContext = <span class="built_in">avformat_alloc_context</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置连接超时</span></span><br><span class="line">	AVDictionary* dict = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="keyword">if</span> (is_tcp_decode_)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 读取最大字节数 100KB</span></span><br><span class="line">		inputContext-&gt;probesize = <span class="number">100</span> * <span class="number">1024</span>;</span><br><span class="line">		<span class="comment">// 读取最大时长 200ms</span></span><br><span class="line">		inputContext-&gt;max_analyze_duration = <span class="number">200</span> * <span class="number">1000</span>;</span><br><span class="line">		<span class="comment">// 优先连接方式改为 TCP</span></span><br><span class="line">		<span class="built_in">av_dict_set</span>(&amp;dict, <span class="string">&quot;rtsp_transport&quot;</span>, <span class="string">&quot;tcp&quot;</span>, <span class="number">0</span>);</span><br><span class="line">		<span class="comment">// 扩大缓冲区，减少卡顿或花屏</span></span><br><span class="line">		<span class="built_in">av_dict_set</span>(&amp;dict, <span class="string">&quot;buffer_size&quot;</span>, <span class="string">&quot;1024000&quot;</span>, <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 设置超时断开</span></span><br><span class="line">	<span class="built_in">av_dict_set</span>(&amp;dict, <span class="string">&quot;stimeout&quot;</span>, <span class="string">&quot;2000000&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> ret = <span class="built_in">avformat_open_input</span>(&amp;inputContext, videoUrl_.<span class="built_in">c_str</span>(), <span class="literal">NULL</span>, &amp;dict);</span><br><span class="line">	<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">av_dict_free</span>(&amp;dict);</span><br><span class="line">		<span class="built_in">avformat_free_context</span>(inputContext);</span><br><span class="line">		<span class="built_in">PrintError</span>(ret);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ret = <span class="built_in">avformat_find_stream_info</span>(inputContext, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">PrintError</span>(ret);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 打印视频信息</span></span><br><span class="line">	<span class="built_in">av_dump_format</span>(inputContext, <span class="literal">NULL</span>, videoUrl_.<span class="built_in">c_str</span>(), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 打印音视频信息</span></span><br><span class="line">	AVStream* audioStream = <span class="literal">nullptr</span>;</span><br><span class="line">	AVStream* videoStream = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inputContext-&gt;nb_streams; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (inputContext-&gt;streams[i]-&gt;codecpar-&gt;codec_type == AVMEDIA_TYPE_AUDIO)</span><br><span class="line">		&#123;</span><br><span class="line">			audioStream = inputContext-&gt;streams[i];</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;===== 音频 =====&quot;</span> &lt;&lt; endl;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;sample_rate:&quot;</span> &lt;&lt; audioStream-&gt;codecpar-&gt;sample_rate &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (inputContext-&gt;streams[i]-&gt;codecpar-&gt;codec_type == AVMEDIA_TYPE_VIDEO)</span><br><span class="line">		&#123;</span><br><span class="line">			videoStream = inputContext-&gt;streams[i];</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;===== 视频 =====&quot;</span> &lt;&lt; endl;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;width:&quot;</span> &lt;&lt; videoStream-&gt;codecpar-&gt;width &lt;&lt; <span class="string">&quot; height:&quot;</span> &lt;&lt; videoStream-&gt;codecpar-&gt;height &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 解码视频数据</span></span><br><span class="line">	<span class="keyword">int</span> videoIndex = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inputContext-&gt;nb_streams; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (inputContext-&gt;streams[i]-&gt;codec-&gt;codec_type == AVMEDIA_TYPE_VIDEO)</span><br><span class="line">		&#123;</span><br><span class="line">			videoIndex = i;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (videoIndex == <span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Didn&#x27;t find a video stream\n&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	AVCodecContext* pCodecCtx;</span><br><span class="line">	AVCodec* pCodec;</span><br><span class="line">	pCodecCtx = inputContext-&gt;streams[videoIndex]-&gt;codec;</span><br><span class="line">	pCodec = <span class="built_in">avcodec_find_decoder</span>(pCodecCtx-&gt;codec_id);</span><br><span class="line">	<span class="keyword">if</span> (pCodec == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Codec not found.\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (is_thread_soft_decoding_)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 启用多线程软解码</span></span><br><span class="line">		pCodecCtx-&gt;thread_count = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (is_hard_decoding_)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 启用硬解码</span></span><br><span class="line">		AVBufferRef* hw_ctx = <span class="literal">nullptr</span>;</span><br><span class="line">		<span class="built_in">av_hwdevice_ctx_create</span>(&amp;hw_ctx, (AVHWDeviceType)hw_type_, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">		pCodecCtx-&gt;hw_device_ctx = <span class="built_in">av_buffer_ref</span>(hw_ctx);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">avcodec_open2</span>(pCodecCtx, pCodec, <span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Could not open codec.\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// <span class="doctag">TODO:</span> 编码需要设置宽高，此处应根据实际需求设置</span></span><br><span class="line">	<span class="keyword">int</span> width_ = pCodecCtx-&gt;width;</span><br><span class="line">	<span class="keyword">int</span> height_ = pCodecCtx-&gt;height;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建输出流连接</span></span><br><span class="line">	AVFormatContext* outputContext;</span><br><span class="line">	string rtspJudgment = <span class="string">&quot;rtsp&quot;</span>;</span><br><span class="line">	string rtmpJudgment = <span class="string">&quot;rtmp&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (output.<span class="built_in">rfind</span>(rtspJudgment, <span class="number">0</span>) == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 初始化 rtsp 连接</span></span><br><span class="line">		ret = <span class="built_in">avformat_alloc_output_context2</span>(&amp;outputContext, <span class="literal">NULL</span>, <span class="string">&quot;rtsp&quot;</span>, output.<span class="built_in">c_str</span>());</span><br><span class="line">		<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;open output context failed\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (output.<span class="built_in">rfind</span>(rtmpJudgment, <span class="number">0</span>) == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 初始化 rtmp 连接</span></span><br><span class="line">		<span class="keyword">int</span> ret = <span class="built_in">avformat_alloc_output_context2</span>(&amp;outputContext, <span class="literal">nullptr</span>, <span class="string">&quot;flv&quot;</span>, output.<span class="built_in">c_str</span>());</span><br><span class="line">		<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;open output context failed\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		ret = <span class="built_in">avio_open2</span>(&amp;outputContext-&gt;pb, output.<span class="built_in">c_str</span>(), AVIO_FLAG_READ_WRITE, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">		<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">PrintError</span>(ret);</span><br><span class="line">			<span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;open avio failed&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 判断文件夹是否合法</span></span><br><span class="line">		string outDir = output.<span class="built_in">substr</span>(<span class="number">0</span>, output.<span class="built_in">find_last_of</span>(<span class="string">&quot;\\&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strlen</span>(outDir.<span class="built_in">c_str</span>()) &gt; MAX_PATH)</span><br><span class="line">		&#123;</span><br><span class="line">			cerr &lt;&lt; <span class="string">&quot;Maximum path length exceeded!&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 文件夹不存在则创建</span></span><br><span class="line">		<span class="keyword">int</span> ipathLength = <span class="built_in">strlen</span>(outDir.<span class="built_in">c_str</span>());</span><br><span class="line">		<span class="keyword">int</span> ileaveLength = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> iCreatedLength = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">char</span> szPathTemp[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; (<span class="literal">NULL</span> != <span class="built_in">strchr</span>(outDir.<span class="built_in">c_str</span>() + iCreatedLength, <span class="string">&#x27;\\&#x27;</span>)); i++)</span><br><span class="line">		&#123;</span><br><span class="line">			ileaveLength = <span class="built_in">strlen</span>(<span class="built_in">strchr</span>(outDir.<span class="built_in">c_str</span>() + iCreatedLength, <span class="string">&#x27;\\&#x27;</span>)) - <span class="number">1</span>;</span><br><span class="line">			iCreatedLength = ipathLength - ileaveLength;</span><br><span class="line">			<span class="built_in">strncpy</span>(szPathTemp, outDir.<span class="built_in">c_str</span>(), iCreatedLength);</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">access</span>(szPathTemp, <span class="number">0</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="built_in">mkdir</span>(szPathTemp))</span><br><span class="line">				&#123;</span><br><span class="line">					cerr &lt;&lt; <span class="string">&quot;mkdir &quot;</span> &lt;&lt; szPathTemp &lt;&lt; <span class="string">&quot; false, errno:&quot;</span> &lt;&lt; errno &lt;&lt; <span class="string">&quot; errmsg:&quot;</span> &lt;&lt; <span class="built_in">strerror</span>(errno) &lt;&lt; endl;</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (iCreatedLength &lt; ipathLength)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">access</span>(outDir.<span class="built_in">c_str</span>(), <span class="number">0</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="built_in">mkdir</span>(outDir.<span class="built_in">c_str</span>()))</span><br><span class="line">				&#123;</span><br><span class="line">					cerr &lt;&lt; <span class="string">&quot;mkdir &quot;</span> &lt;&lt; outDir &lt;&lt; <span class="string">&quot; false, errno:&quot;</span> &lt;&lt; errno &lt;&lt; <span class="string">&quot; errmsg:&quot;</span> &lt;&lt; <span class="built_in">strerror</span>(errno) &lt;&lt; endl;</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 初始化文件连接</span></span><br><span class="line">		ret = <span class="built_in">avformat_alloc_output_context2</span>(&amp;outputContext, <span class="literal">NULL</span>, <span class="literal">NULL</span>, output.<span class="built_in">c_str</span>());</span><br><span class="line">		<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;open output context failed\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		ret = <span class="built_in">avio_open2</span>(&amp;outputContext-&gt;pb, output.<span class="built_in">c_str</span>(), AVIO_FLAG_READ_WRITE, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">		<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">PrintError</span>(ret);</span><br><span class="line">			<span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;open avio failed&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置编码器 h264_qsv/hevc_qsv/h264_nvenc/hevc_nvenc</span></span><br><span class="line">	AVCodec* codec = <span class="built_in">avcodec_find_encoder_by_name</span>(<span class="string">&quot;h264_qsv&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (!codec)</span><br><span class="line">	&#123;</span><br><span class="line">		cerr &lt;&lt; <span class="string">&quot;codec not find!&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	AVCodecContext* codecContext = <span class="built_in">avcodec_alloc_context3</span>(codec);</span><br><span class="line">	<span class="keyword">if</span> (!codecContext)</span><br><span class="line">	&#123;</span><br><span class="line">		cerr &lt;&lt; <span class="string">&quot;avcodec_alloc_context3 failed!&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	codecContext-&gt;codec_id = codec-&gt;id;</span><br><span class="line">	codecContext-&gt;width = width_;</span><br><span class="line">	codecContext-&gt;height = height_;</span><br><span class="line">	codecContext-&gt;time_base = &#123; <span class="number">1</span>, fps_ &#125;;</span><br><span class="line">	codecContext-&gt;pix_fmt = pix_fmt_;</span><br><span class="line"></span><br><span class="line">	ret = <span class="built_in">avcodec_open2</span>(codecContext, codec, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">PrintError</span>(ret);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;avcodec_open2 success!&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	AVCodecParameters* pa = <span class="built_in">avcodec_parameters_alloc</span>();</span><br><span class="line">	pa-&gt;codec_type = AVMEDIA_TYPE_VIDEO;</span><br><span class="line">	pa-&gt;codec_id = codec-&gt;id;</span><br><span class="line">	pa-&gt;width = width_;</span><br><span class="line">	pa-&gt;height = height_;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// RTMP 需要写入设置 sps pps</span></span><br><span class="line">	<span class="keyword">if</span> (output.<span class="built_in">find</span>(rtmpJudgment) != string::npos)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">unsigned</span> <span class="keyword">char</span> sps_pps[<span class="number">23</span>] = &#123; <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x42</span>, <span class="number">0x00</span>, <span class="number">0x0a</span>, <span class="number">0xf8</span>, <span class="number">0x0f</span>, <span class="number">0x00</span>, <span class="number">0x44</span>, <span class="number">0xbe</span>, <span class="number">0x8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x68</span>, <span class="number">0xce</span>, <span class="number">0x38</span>, <span class="number">0x80</span> &#125;;</span><br><span class="line">		pa-&gt;extradata_size = <span class="number">23</span>;</span><br><span class="line">		pa-&gt;extradata = (<span class="keyword">uint8_t</span>*)<span class="built_in">av_malloc</span>(<span class="number">23</span> + AV_INPUT_BUFFER_PADDING_SIZE);</span><br><span class="line">		<span class="keyword">if</span> (pa-&gt;extradata == <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;could not av_malloc the video params extradata!\n&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">memcpy</span>(pa-&gt;extradata, sps_pps, <span class="number">23</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	AVStream* stream = <span class="built_in">avformat_new_stream</span>(outputContext, codec);</span><br><span class="line">	<span class="keyword">if</span> (stream == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;avformat_new_stream is null&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ret = <span class="built_in">avcodec_parameters_copy</span>(stream-&gt;codecpar, pa);</span><br><span class="line">	<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;copy coddec context failed&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ret = <span class="built_in">avformat_write_header</span>(outputContext, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;format write header failed&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_INFO, <span class="string">&quot; Open output file success %s\n&quot;</span>, output.<span class="built_in">c_str</span>());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 解码帧</span></span><br><span class="line">	AVPacket* packet;</span><br><span class="line">	packet = (AVPacket*)<span class="built_in">av_malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(AVPacket));</span><br><span class="line">	AVFrame* frame, * hw_frame;</span><br><span class="line">	frame = <span class="built_in">av_frame_alloc</span>();</span><br><span class="line">	hw_frame = <span class="built_in">av_frame_alloc</span>();</span><br><span class="line"></span><br><span class="line">	AVPacket* packetEX = (AVPacket*)<span class="built_in">av_malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(AVPacket));</span><br><span class="line">	<span class="keyword">int</span> pts = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">clock_t</span> startSendTimeOut, stopSendTimeOut;</span><br><span class="line">		startSendTimeOut = <span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line">		ret = <span class="built_in">av_read_frame</span>(inputContext, packet);</span><br><span class="line">		<span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;Read Frame Error. Error Code:&quot;</span> &lt;&lt; ret &lt;&lt; endl;</span><br><span class="line">			<span class="built_in">PrintError</span>(ret);</span><br><span class="line">			<span class="comment">// 释放 AVPacket</span></span><br><span class="line">			<span class="built_in">av_free_packet</span>(packet);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!packet || packet-&gt;stream_index != videoStream-&gt;index)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// 判断是否是视频流</span></span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		ret = <span class="built_in">avcodec_send_packet</span>(pCodecCtx, packet);</span><br><span class="line">		<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;Send Packet Error. Error Code:&quot;</span> &lt;&lt; ret &lt;&lt; endl;</span><br><span class="line">			<span class="built_in">PrintError</span>(ret);</span><br><span class="line">			<span class="comment">// 释放 AVPacket</span></span><br><span class="line">			<span class="built_in">av_free_packet</span>(packet);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		stopSendTimeOut = <span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (ret &gt;= <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">clock_t</span> startReceiveTimeOut;</span><br><span class="line">			startReceiveTimeOut = <span class="built_in">clock</span>();</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (frame == <span class="literal">nullptr</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				frame = <span class="built_in">av_frame_alloc</span>();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">auto</span> ret = <span class="built_in">avcodec_receive_frame</span>(pCodecCtx, frame);</span><br><span class="line">			<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">av_frame_free</span>(&amp;frame);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (ret == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">auto</span> pframe = frame;</span><br><span class="line">				<span class="keyword">if</span> (pCodecCtx-&gt;hw_device_ctx)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="comment">// 硬解码转换 显存 =&gt; 内存</span></span><br><span class="line">					<span class="built_in">av_hwframe_transfer_data</span>(hw_frame, frame, <span class="number">0</span>);</span><br><span class="line">					pframe = hw_frame;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				ret = <span class="built_in">avcodec_send_frame</span>(codecContext, pframe);</span><br><span class="line">				<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">PrintError</span>(ret);</span><br><span class="line">					<span class="built_in">av_frame_free</span>(&amp;pframe);</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">while</span> (ret &gt;= <span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					ret = <span class="built_in">avcodec_receive_packet</span>(codecContext, packetEX);</span><br><span class="line">					<span class="keyword">if</span> (ret == <span class="built_in">AVERROR</span>(EAGAIN) || ret == AVERROR_EOF)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="built_in">PrintError</span>(ret);</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line"></span><br><span class="line">					<span class="comment">// 设置 pts 与 dts 推流视频</span></span><br><span class="line">					packetEX-&gt;pts = packetEX-&gt;dts = pts += <span class="built_in">av_rescale_q</span>(<span class="number">1000.0f</span> / <span class="number">25</span>, &#123; <span class="number">1</span>, <span class="number">1000</span> &#125;, outputContext-&gt;streams[<span class="number">0</span>]-&gt;time_base);</span><br><span class="line"></span><br><span class="line">					<span class="keyword">if</span> (<span class="built_in">av_interleaved_write_frame</span>(outputContext, packetEX) &gt;= <span class="number">0</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="comment">//cout &lt;&lt; &quot;WritePacket Success!&quot; &lt;&lt; endl;</span></span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						cout &lt;&lt; <span class="string">&quot;WritePacket failed! ret = &quot;</span> &lt;&lt; ret &lt;&lt; endl;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 释放 AVFrame</span></span><br><span class="line">			<span class="built_in">av_frame_free</span>(&amp;frame);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 释放 AVPacket</span></span><br><span class="line">		<span class="built_in">av_free_packet</span>(packet);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 释放输入 AVFormatContext</span></span><br><span class="line">	<span class="built_in">avformat_close_input</span>(&amp;inputContext);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 写入文件尾</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">av_write_trailer</span>(outputContext) &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">&quot;format write trailer failed&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 释放 AVCodecContext</span></span><br><span class="line">	<span class="built_in">avcodec_free_context</span>(&amp;pCodecCtx);</span><br><span class="line">	<span class="built_in">avcodec_free_context</span>(&amp;codecContext);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 释放输出 AVFormatContext</span></span><br><span class="line">	<span class="built_in">avformat_close_input</span>(&amp;outputContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>视频中叠加 OSD</title>
    <url>/blog/2023/01/18/cpp-OverlayOSD/</url>
    <content><![CDATA[<h3 id="视频中叠加时间戳或固定文本"><a href="#视频中叠加时间戳或固定文本" class="headerlink" title="视频中叠加时间戳或固定文本"></a>视频中叠加时间戳或固定文本</h3><span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在监控视频中普遍需要在视频上叠加时间戳与相机所在位置，方便回放监控时快速确认有效信息，在处理其他视频时也可以叠加水印等标识。<br>如果仅使用 FFmpeg 编解码，可以使用 <a href="https://ffmpeg.org/doxygen/trunk/structAVFilter.html">AVFilter</a> 一系列方法给视频添加水印或文字信息，但是使用上多有不便，同时想解决 OpenCV Mat 无法叠加汉字的问题，所以使用了另一种方式。<br>参考文章：<a href="https://blog.csdn.net/zmdsjtu/article/details/53133223">Opencv310图片Mat中叠加汉字</a> 中使用的 Windows <a href="https://learn.microsoft.com/zh-cn/windows/win32/api/dimm/ns-dimm-logfonta?redirectedfrom=MSDN">LOGFONTA</a> 创建的位图，以 Opencv 或 CUDA 的方式叠加到视频中。</p>
<h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><p><img src="https://sadness96.github.io/images/blog/cpp-OverlayOSD/VideoOSD.jpg"/></p>
<p>直接叠加单色文本，可能会与视频颜色重叠，导致 OSD 内容不清晰，有以下几种解决方法，目前实现使用半透明矩形。</p>
<ol>
<li>添加一个半透明矩形，既不影响视频内容又可以凸显出文字。</li>
<li>文字描边，普遍使用白字黑边。</li>
<li>使用反色叠加，如果亮度过高的像素使用黑色，亮度过低的使用白色，测试在单个像素计算显示可能会显得很凌乱，取一个区域的亮度整体调色或许会好很多。</li>
</ol>
<h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><h4 id="OSDAlignment-h"><a href="#OSDAlignment-h" class="headerlink" title="OSDAlignment.h"></a>OSDAlignment.h</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// OSD 垂直对齐方式</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">OSDVerticalAlignment</span> &#123;</span></span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 顶部对齐</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	Top,</span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 居中对齐</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	VCenter,</span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 底部对齐</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	Bottom</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// OSD 水平对齐方式</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">OSDHorizontalAlignment</span> &#123;</span></span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 左对齐</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	Left,</span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 居中对齐</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	HCenter,</span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 右对齐</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	Right</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="OverlayOSD-cu"><a href="#OverlayOSD-cu" class="headerlink" title="OverlayOSD.cu"></a>OverlayOSD.cu</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;cuda_runtime.h&quot;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;device_launch_parameters.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;core/types.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 叠加 OSD 核函数</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;yData&quot;&gt;图像 Y 分量&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;uvData&quot;&gt;图像 UV 分量&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;imageWidth&quot;&gt;图像宽度&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;osdData&quot;&gt;叠加 OSD 数据 RGB&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;osdRect&quot;&gt;叠加 OSD 参数&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;drawLineStep&quot;&gt;叠加 OSD 行大小&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line"><span class="function">__global__ <span class="keyword">void</span> <span class="title">OSDNearestKernel</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* yData, <span class="keyword">unsigned</span> <span class="keyword">char</span>* uvData, <span class="keyword">int</span> imageWidth,</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="keyword">unsigned</span> <span class="keyword">char</span>* osdData, Rect osdRect, <span class="keyword">int</span> drawLineStep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> tidx = threadIdx.x + blockDim.x * blockIdx.x;</span><br><span class="line">	<span class="keyword">int</span> tidy = threadIdx.y + blockDim.y * blockIdx.y;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (tidx &lt; osdRect.width &amp;&amp; tidy &lt; osdRect.height)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> srcX = tidx + osdRect.x;</span><br><span class="line">		<span class="keyword">int</span> srcY = tidy + osdRect.y;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> idx_in_y = srcY * imageWidth + srcX;</span><br><span class="line">		<span class="keyword">int</span> idx_in_uv = srcY / <span class="number">2</span> * imageWidth + srcX;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> idx_osd = drawLineStep * (osdRect.height - tidy) + tidx * <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (osdData[idx_osd] &gt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			yData[idx_in_y] = <span class="number">255</span>;</span><br><span class="line">			uvData[srcX % <span class="number">2</span> == <span class="number">0</span> ? idx_in_uv : idx_in_uv - <span class="number">1</span>] = <span class="number">128</span>;</span><br><span class="line">			uvData[srcX % <span class="number">2</span> == <span class="number">0</span> ? idx_in_uv + <span class="number">1</span> : idx_in_uv] = <span class="number">128</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			yData[idx_in_y] = yData[idx_in_y] &gt;= <span class="number">40</span> ? yData[idx_in_y] - <span class="number">40</span> : <span class="number">0</span>;</span><br><span class="line">			uvData[srcX % <span class="number">2</span> == <span class="number">0</span> ? idx_in_uv : idx_in_uv - <span class="number">1</span>] = uvData[srcX % <span class="number">2</span> == <span class="number">0</span> ? idx_in_uv : idx_in_uv - <span class="number">1</span>];</span><br><span class="line">			uvData[srcX % <span class="number">2</span> == <span class="number">0</span> ? idx_in_uv + <span class="number">1</span> : idx_in_uv] = uvData[srcX % <span class="number">2</span> == <span class="number">0</span> ? idx_in_uv + <span class="number">1</span> : idx_in_uv];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 叠加 OSD</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;yData&quot;&gt;图像 Y 分量&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;uvData&quot;&gt;图像 UV 分量&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;imageWidth&quot;&gt;图像宽度&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;osdData&quot;&gt;叠加 OSD 数据 RGB&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;osdRect&quot;&gt;叠加 OSD 参数&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;drawLineStep&quot;&gt;叠加 OSD 行大小&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="keyword">bool</span> <span class="title">OSDNearest</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* yData, <span class="keyword">unsigned</span> <span class="keyword">char</span>* uvData, <span class="keyword">int</span> imageWidth,</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="keyword">unsigned</span> <span class="keyword">char</span>* osdData, Rect osdRect, <span class="keyword">int</span> drawLineStep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">dim3 <span class="title">block</span><span class="params">(<span class="number">32</span>, <span class="number">32</span>)</span></span>;</span><br><span class="line">	<span class="function">dim3 <span class="title">grid</span><span class="params">((osdRect.width + block.x - <span class="number">1</span>) / block.x, (osdRect.height + block.y - <span class="number">1</span>) / block.y)</span></span>;</span><br><span class="line">	OSDNearestKernel &lt;&lt; &lt;grid, block &gt;&gt; &gt; (yData, uvData, imageWidth, osdData, osdRect, drawLineStep);</span><br><span class="line">	cudaError_t error = <span class="built_in">cudaThreadSynchronize</span>();</span><br><span class="line">	<span class="keyword">if</span> (error != cudaSuccess)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// print the CUDA error message and exit</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;CUDA error: %s\n&quot;</span>, <span class="built_in">cudaGetErrorString</span>(error));</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="OverlayOSD-h"><a href="#OverlayOSD-h" class="headerlink" title="OverlayOSD.h"></a>OverlayOSD.h</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;cuda_runtime.h&quot;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;device_launch_parameters.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;OSDAlignment.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OverlayOSD</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">char</span>* overlayText_;</span><br><span class="line">	<span class="keyword">int</span> imageWidth_ = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> imageHeight_ = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	LOGFONTA logFonta_;</span><br><span class="line">	HFONT hFont_, hOldFont_;</span><br><span class="line">	HDC hDC_;</span><br><span class="line">	HBITMAP hBmp_, hOldBmp_;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> singleRow_ = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> drawLineStep_ = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">void</span>* pDibData_ = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 获取文本大小</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">GetStringSize</span><span class="params">(HDC hDC, <span class="keyword">const</span> <span class="keyword">char</span>* str, <span class="keyword">int</span>* w, <span class="keyword">int</span>* h)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 叠加坐标</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	Rect OverlayCoordinate;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 初始化 OSD</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	<span class="comment">/// &lt;param name=&quot;str&quot;&gt;叠加文本&lt;/param&gt;</span></span><br><span class="line">	<span class="comment">/// &lt;param name=&quot;fontSize&quot;&gt;字体大小&lt;/param&gt;</span></span><br><span class="line">	<span class="comment">/// &lt;param name=&quot;faceName&quot;&gt;字体类型&lt;/param&gt;</span></span><br><span class="line">	<span class="comment">/// &lt;param name=&quot;imageWidth&quot;&gt;叠加图像宽度&lt;/param&gt;</span></span><br><span class="line">	<span class="comment">/// &lt;param name=&quot;imageHeight&quot;&gt;叠加图像高度&lt;/param&gt;</span></span><br><span class="line">	<span class="comment">/// &lt;param name=&quot;verticalAlignment&quot;&gt;垂直对齐方式&lt;/param&gt;</span></span><br><span class="line">	<span class="comment">/// &lt;param name=&quot;horizontalAlignment&quot;&gt;水平对齐方式&lt;/param&gt;</span></span><br><span class="line">	<span class="comment">/// &lt;param name=&quot;startPoint&quot;&gt;相对坐标&lt;/param&gt;</span></span><br><span class="line">	<span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">InitOSD</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str, <span class="keyword">int</span> fontSize, <span class="keyword">const</span> <span class="keyword">char</span>* faceName, <span class="keyword">int</span> imageWidth, <span class="keyword">int</span> imageHeight,</span></span></span><br><span class="line"><span class="function"><span class="params">		OSDVerticalAlignment verticalAlignment, OSDHorizontalAlignment horizontalAlignment, Point startPoint)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 叠加日期时间 OSD</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	<span class="comment">/// &lt;param name=&quot;dst&quot;&gt;OpenCV Mat&lt;/param&gt;</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">OverlayDateTime</span><span class="params">(Mat&amp; dst)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 叠加日期时间 OSD</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	<span class="comment">/// &lt;param name=&quot;YData&quot;&gt;Y 分量&lt;/param&gt;</span></span><br><span class="line">	<span class="comment">/// &lt;param name=&quot;UVData&quot;&gt;UV 分量&lt;/param&gt;</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">OverlayDateTime</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* yData, <span class="keyword">unsigned</span> <span class="keyword">char</span>* uvData)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 叠加文本 OSD</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	<span class="comment">/// &lt;param name=&quot;dst&quot;&gt;OpenCV Mat&lt;/param&gt;</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">OverlayText</span><span class="params">(Mat&amp; dst)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 叠加文本 OSD</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	<span class="comment">/// &lt;param name=&quot;YData&quot;&gt;Y 分量&lt;/param&gt;</span></span><br><span class="line">	<span class="comment">/// &lt;param name=&quot;UVData&quot;&gt;UV 分量&lt;/param&gt;</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">OverlayText</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* yData, <span class="keyword">unsigned</span> <span class="keyword">char</span>* uvData)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">	<span class="comment">/// 释放所有资源</span></span><br><span class="line">	<span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Dispose</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 叠加 OSD</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;yData&quot;&gt;图像 Y 分量&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;uvData&quot;&gt;图像 UV 分量&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;imageWidth&quot;&gt;图像宽度&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;osdData&quot;&gt;叠加 OSD 数据 RGB&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;osdRect&quot;&gt;叠加 OSD 参数&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;drawLineStep&quot;&gt;叠加 OSD 行大小&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="keyword">bool</span> <span class="title">OSDNearest</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* yData, <span class="keyword">unsigned</span> <span class="keyword">char</span>* uvData, <span class="keyword">int</span> imageWidth,</span></span></span><br><span class="line"><span class="function"><span class="params">	<span class="keyword">unsigned</span> <span class="keyword">char</span>* osdData, Rect osdRect, <span class="keyword">int</span> drawLineStep)</span></span>;</span><br></pre></td></tr></table></figure>
<h4 id="OverlayOSD-cpp"><a href="#OverlayOSD-cpp" class="headerlink" title="OverlayOSD.cpp"></a>OverlayOSD.cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;OverlayOSD.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 获取文本大小</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OverlayOSD::GetStringSize</span><span class="params">(HDC hDC, <span class="keyword">const</span> <span class="keyword">char</span>* str, <span class="keyword">int</span>* w, <span class="keyword">int</span>* h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SIZE size;</span><br><span class="line">	<span class="built_in">GetTextExtentPoint32A</span>(hDC, str, <span class="built_in">strlen</span>(str), &amp;size);</span><br><span class="line">	<span class="keyword">if</span> (w != <span class="number">0</span>) *w = size.cx;</span><br><span class="line">	<span class="keyword">if</span> (h != <span class="number">0</span>) *h = size.cy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 初始化 OSD</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;str&quot;&gt;叠加文本&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;fontSize&quot;&gt;字体大小&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;faceName&quot;&gt;字体类型&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;imageWidth&quot;&gt;叠加图像宽度&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;imageHeight&quot;&gt;叠加图像高度&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;verticalAlignment&quot;&gt;垂直对齐方式&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;horizontalAlignment&quot;&gt;水平对齐方式&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;startPoint&quot;&gt;相对坐标&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OverlayOSD::InitOSD</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str, <span class="keyword">int</span> fontSize, <span class="keyword">const</span> <span class="keyword">char</span>* faceName, <span class="keyword">int</span> imageWidth, <span class="keyword">int</span> imageHeight,</span></span></span><br><span class="line"><span class="function"><span class="params">	OSDVerticalAlignment verticalAlignment, OSDHorizontalAlignment horizontalAlignment, Point startPoint)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	overlayText_ = str;</span><br><span class="line">	imageWidth_ = imageWidth;</span><br><span class="line">	imageHeight_ = imageHeight;</span><br><span class="line"></span><br><span class="line">	logFonta_.lfHeight = -fontSize;</span><br><span class="line">	logFonta_.lfWidth = <span class="number">0</span>;</span><br><span class="line">	logFonta_.lfEscapement = <span class="number">0</span>;</span><br><span class="line">	logFonta_.lfOrientation = <span class="number">0</span>;</span><br><span class="line">	logFonta_.lfWeight = <span class="number">5</span>;</span><br><span class="line">	logFonta_.lfItalic = <span class="literal">false</span>;</span><br><span class="line">	logFonta_.lfUnderline = <span class="literal">false</span>;</span><br><span class="line">	logFonta_.lfStrikeOut = <span class="number">0</span>;</span><br><span class="line">	logFonta_.lfCharSet = DEFAULT_CHARSET;</span><br><span class="line">	logFonta_.lfOutPrecision = <span class="number">0</span>;</span><br><span class="line">	logFonta_.lfClipPrecision = <span class="number">0</span>;</span><br><span class="line">	logFonta_.lfQuality = PROOF_QUALITY;</span><br><span class="line">	logFonta_.lfPitchAndFamily = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">strcpy_s</span>(logFonta_.lfFaceName, faceName);</span><br><span class="line"></span><br><span class="line">	hFont_ = <span class="built_in">CreateFontIndirectA</span>(&amp;logFonta_);</span><br><span class="line">	hDC_ = <span class="built_in">CreateCompatibleDC</span>(<span class="number">0</span>);</span><br><span class="line">	hOldFont_ = (HFONT)<span class="built_in">SelectObject</span>(hDC_, hFont_);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> strBaseW = <span class="number">0</span>, strBaseH = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">char</span> buf[<span class="number">1</span> &lt;&lt; <span class="number">12</span>];</span><br><span class="line">	<span class="built_in">strcpy_s</span>(buf, str);</span><br><span class="line">	<span class="comment">// 这个用于分隔字符串后剩余的字符，可能会超出。</span></span><br><span class="line">	<span class="keyword">char</span>* bufT[<span class="number">1</span> &lt;&lt; <span class="number">12</span>];</span><br><span class="line">	<span class="comment">//处理多行</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> nnh = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> cw, ch;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">const</span> <span class="keyword">char</span>* ln = <span class="built_in">strtok_s</span>(buf, <span class="string">&quot;\n&quot;</span>, bufT);</span><br><span class="line">		<span class="keyword">while</span> (ln != <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">GetStringSize</span>(hDC_, ln, &amp;cw, &amp;ch);</span><br><span class="line">			strBaseW = <span class="built_in">max</span>(strBaseW, cw);</span><br><span class="line">			strBaseH = <span class="built_in">max</span>(strBaseH, ch);</span><br><span class="line"></span><br><span class="line">			ln = <span class="built_in">strtok_s</span>(<span class="number">0</span>, <span class="string">&quot;\n&quot;</span>, bufT);</span><br><span class="line">			nnh++;</span><br><span class="line">		&#125;</span><br><span class="line">		singleRow_ = strBaseH;</span><br><span class="line">		strBaseH *= nnh;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	BITMAPINFO bmp = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	BITMAPINFOHEADER&amp; bih = bmp.bmiHeader;</span><br><span class="line">	drawLineStep_ = strBaseW * <span class="number">3</span> % <span class="number">4</span> == <span class="number">0</span> ? strBaseW * <span class="number">3</span> : (strBaseW * <span class="number">3</span> + <span class="number">4</span> - ((strBaseW * <span class="number">3</span>) % <span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">	bih.biSize = <span class="built_in"><span class="keyword">sizeof</span></span>(BITMAPINFOHEADER);</span><br><span class="line">	bih.biWidth = strBaseW;</span><br><span class="line">	bih.biHeight = strBaseH;</span><br><span class="line">	bih.biPlanes = <span class="number">1</span>;</span><br><span class="line">	bih.biBitCount = <span class="number">24</span>;</span><br><span class="line">	bih.biCompression = BI_RGB;</span><br><span class="line">	bih.biSizeImage = strBaseH * drawLineStep_;</span><br><span class="line">	bih.biClrUsed = <span class="number">0</span>;</span><br><span class="line">	bih.biClrImportant = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	hBmp_ = <span class="built_in">CreateDIBSection</span>(hDC_, &amp;bmp, DIB_RGB_COLORS, &amp;pDibData_, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">CV_Assert</span>(pDibData_ != <span class="number">0</span>);</span><br><span class="line">	hOldBmp_ = (HBITMAP)<span class="built_in">SelectObject</span>(hDC_, hBmp_);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">SetTextColor</span>(hDC_, <span class="built_in">RGB</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>));</span><br><span class="line">	<span class="built_in">SetBkColor</span>(hDC_, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 计算叠加坐标</span></span><br><span class="line">	<span class="keyword">int</span> startX = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in"><span class="keyword">switch</span></span> (horizontalAlignment)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> OSDHorizontalAlignment::Left: startX = startPoint.x; <span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> OSDHorizontalAlignment::HCenter: startX = imageWidth / <span class="number">2</span> - strBaseW / <span class="number">2</span> + startPoint.x; <span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> OSDHorizontalAlignment::Right: startX = imageWidth - strBaseW + (-startPoint.x); <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> startY = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in"><span class="keyword">switch</span></span> (verticalAlignment)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> OSDVerticalAlignment::Top: startY = startPoint.y; <span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> OSDVerticalAlignment::VCenter: startY = imageHeight / <span class="number">2</span> - strBaseH / <span class="number">2</span> + startPoint.y; <span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> OSDVerticalAlignment::Bottom: startY = imageHeight - strBaseH + (-startPoint.y); <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	OverlayCoordinate = <span class="built_in">Rect</span>(startX, startY, strBaseW, strBaseH);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 叠加日期时间 OSD</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;dst&quot;&gt;OpenCV Mat&lt;/param&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OverlayOSD::OverlayDateTime</span><span class="params">(Mat&amp; dst)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SYSTEMTIME  systm;</span><br><span class="line">	<span class="built_in">GetLocalTime</span>(&amp;systm);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> text[<span class="number">1024</span>];</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">	n += <span class="built_in">sprintf_s</span>(text + n, <span class="built_in"><span class="keyword">sizeof</span></span>(text) - n - <span class="number">1</span>, <span class="string">&quot;%d-%02d-%02d&quot;</span>,</span><br><span class="line">		systm.wYear, systm.wMonth, systm.wDay);</span><br><span class="line"></span><br><span class="line">	n += <span class="built_in">sprintf_s</span>(text + n, <span class="built_in"><span class="keyword">sizeof</span></span>(text) - n - <span class="number">1</span>, <span class="string">&quot; %02d:%02d:%02d&quot;</span>,</span><br><span class="line">		systm.wHour, systm.wMinute, systm.wSecond);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> buf[<span class="number">1</span> &lt;&lt; <span class="number">12</span>];</span><br><span class="line">	<span class="keyword">char</span>* bufT[<span class="number">1</span> &lt;&lt; <span class="number">12</span>];</span><br><span class="line"></span><br><span class="line">	<span class="built_in">strcpy_s</span>(buf, text);</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">char</span>* ln = <span class="built_in">strtok_s</span>(buf, <span class="string">&quot;\n&quot;</span>, bufT);</span><br><span class="line">	<span class="keyword">int</span> outTextY = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (ln != <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">TextOutA</span>(hDC_, <span class="number">0</span>, outTextY, ln, <span class="built_in">strlen</span>(ln));</span><br><span class="line">		outTextY += singleRow_;</span><br><span class="line">		ln = <span class="built_in">strtok_s</span>(<span class="number">0</span>, <span class="string">&quot;\n&quot;</span>, bufT);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> x, y, r, b;</span><br><span class="line">	Point org = <span class="built_in">Point</span>(OverlayCoordinate.x, OverlayCoordinate.y);</span><br><span class="line">	<span class="keyword">int</span> strBaseW = OverlayCoordinate.width;</span><br><span class="line">	<span class="keyword">int</span> strBaseH = OverlayCoordinate.height;</span><br><span class="line">	<span class="keyword">if</span> (org.x &gt; dst.cols || org.y &gt; dst.rows) <span class="keyword">return</span>;</span><br><span class="line">	x = org.x &lt; <span class="number">0</span> ? -org.x : <span class="number">0</span>;</span><br><span class="line">	y = org.y &lt; <span class="number">0</span> ? -org.y : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	r = org.x + strBaseW &gt; dst.cols ? dst.cols - org.x - <span class="number">1</span> : strBaseW - <span class="number">1</span>;</span><br><span class="line">	b = org.y + strBaseH &gt; dst.rows ? dst.rows - org.y - <span class="number">1</span> : strBaseH - <span class="number">1</span>;</span><br><span class="line">	org.x = org.x &lt; <span class="number">0</span> ? <span class="number">0</span> : org.x;</span><br><span class="line">	org.y = org.y &lt; <span class="number">0</span> ? <span class="number">0</span> : org.y;</span><br><span class="line"></span><br><span class="line">	Scalar color = <span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line"></span><br><span class="line">	uchar* dstData = (uchar*)dst.data;</span><br><span class="line">	<span class="keyword">int</span> dstStep = dst.step / <span class="built_in"><span class="keyword">sizeof</span></span>(dstData[<span class="number">0</span>]);</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span>* pImg = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)dst.data + org.x * dst.<span class="built_in">channels</span>() + org.y * dstStep;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span>* pStr = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)pDibData_ + x * <span class="number">3</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> tty = y; tty &lt;= b; ++tty)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">unsigned</span> <span class="keyword">char</span>* subImg = pImg + (tty - y) * dstStep;</span><br><span class="line">		<span class="keyword">unsigned</span> <span class="keyword">char</span>* subStr = pStr + (strBaseH - tty - <span class="number">1</span>) * drawLineStep_;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> ttx = x; ttx &lt;= r; ++ttx)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; dst.<span class="built_in">channels</span>(); ++n) &#123;</span><br><span class="line">				<span class="keyword">double</span> vtxt = subStr[n] / <span class="number">255.0</span>;</span><br><span class="line">				<span class="keyword">int</span> cvv = vtxt * color.val[n] + (<span class="number">1</span> - vtxt) * subImg[n];</span><br><span class="line">				subImg[n] = cvv &gt; <span class="number">255</span> ? <span class="number">255</span> : (cvv &lt; <span class="number">0</span> ? <span class="number">0</span> : cvv);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			subStr += <span class="number">3</span>;</span><br><span class="line">			subImg += dst.<span class="built_in">channels</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 叠加日期时间 OSD</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;YData&quot;&gt;Y 分量&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;UVData&quot;&gt;UV 分量&lt;/param&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OverlayOSD::OverlayDateTime</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* yData, <span class="keyword">unsigned</span> <span class="keyword">char</span>* uvData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SYSTEMTIME  systm;</span><br><span class="line">	<span class="built_in">GetLocalTime</span>(&amp;systm);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> text[<span class="number">1024</span>];</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">	n += <span class="built_in">sprintf_s</span>(text + n, <span class="built_in"><span class="keyword">sizeof</span></span>(text) - n - <span class="number">1</span>, <span class="string">&quot;%d-%02d-%02d&quot;</span>,</span><br><span class="line">		systm.wYear, systm.wMonth, systm.wDay);</span><br><span class="line"></span><br><span class="line">	n += <span class="built_in">sprintf_s</span>(text + n, <span class="built_in"><span class="keyword">sizeof</span></span>(text) - n - <span class="number">1</span>, <span class="string">&quot; %02d:%02d:%02d&quot;</span>,</span><br><span class="line">		systm.wHour, systm.wMinute, systm.wSecond);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> buf[<span class="number">1</span> &lt;&lt; <span class="number">12</span>];</span><br><span class="line">	<span class="keyword">char</span>* bufT[<span class="number">1</span> &lt;&lt; <span class="number">12</span>];</span><br><span class="line"></span><br><span class="line">	<span class="built_in">strcpy_s</span>(buf, text);</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">char</span>* ln = <span class="built_in">strtok_s</span>(buf, <span class="string">&quot;\n&quot;</span>, bufT);</span><br><span class="line">	<span class="keyword">int</span> outTextY = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (ln != <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">TextOutA</span>(hDC_, <span class="number">0</span>, outTextY, ln, <span class="built_in">strlen</span>(ln));</span><br><span class="line">		outTextY += singleRow_;</span><br><span class="line">		ln = <span class="built_in">strtok_s</span>(<span class="number">0</span>, <span class="string">&quot;\n&quot;</span>, bufT);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> osdText = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)pDibData_;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> osd_size = <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">unsigned</span> <span class="keyword">char</span>) * OverlayCoordinate.width * OverlayCoordinate.height * <span class="number">3</span>;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span>* osdData = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="built_in">cudaMalloc</span>(&amp;osdData, osd_size);</span><br><span class="line">	<span class="built_in">cudaMemcpy</span>(osdData, osdText, osd_size, cudaMemcpyHostToDevice);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">OSDNearest</span>(yData, uvData, imageWidth_, osdData, OverlayCoordinate, drawLineStep_);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cudaFree</span>(osdData);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 叠加文本 OSD</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;dst&quot;&gt;OpenCV Mat&lt;/param&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OverlayOSD::OverlayText</span><span class="params">(Mat&amp; dst)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> buf[<span class="number">1</span> &lt;&lt; <span class="number">12</span>];</span><br><span class="line">	<span class="keyword">char</span>* bufT[<span class="number">1</span> &lt;&lt; <span class="number">12</span>];</span><br><span class="line"></span><br><span class="line">	<span class="built_in">strcpy_s</span>(buf, overlayText_);</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">char</span>* ln = <span class="built_in">strtok_s</span>(buf, <span class="string">&quot;\n&quot;</span>, bufT);</span><br><span class="line">	<span class="keyword">int</span> outTextY = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (ln != <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">TextOutA</span>(hDC_, <span class="number">0</span>, outTextY, ln, <span class="built_in">strlen</span>(ln));</span><br><span class="line">		outTextY += singleRow_;</span><br><span class="line">		ln = <span class="built_in">strtok_s</span>(<span class="number">0</span>, <span class="string">&quot;\n&quot;</span>, bufT);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> x, y, r, b;</span><br><span class="line">	Point org = <span class="built_in">Point</span>(OverlayCoordinate.x, OverlayCoordinate.y);</span><br><span class="line">	<span class="keyword">int</span> strBaseW = OverlayCoordinate.width;</span><br><span class="line">	<span class="keyword">int</span> strBaseH = OverlayCoordinate.height;</span><br><span class="line">	<span class="keyword">if</span> (org.x &gt; dst.cols || org.y &gt; dst.rows) <span class="keyword">return</span>;</span><br><span class="line">	x = org.x &lt; <span class="number">0</span> ? -org.x : <span class="number">0</span>;</span><br><span class="line">	y = org.y &lt; <span class="number">0</span> ? -org.y : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	r = org.x + strBaseW &gt; dst.cols ? dst.cols - org.x - <span class="number">1</span> : strBaseW - <span class="number">1</span>;</span><br><span class="line">	b = org.y + strBaseH &gt; dst.rows ? dst.rows - org.y - <span class="number">1</span> : strBaseH - <span class="number">1</span>;</span><br><span class="line">	org.x = org.x &lt; <span class="number">0</span> ? <span class="number">0</span> : org.x;</span><br><span class="line">	org.y = org.y &lt; <span class="number">0</span> ? <span class="number">0</span> : org.y;</span><br><span class="line"></span><br><span class="line">	Scalar color = <span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line"></span><br><span class="line">	uchar* dstData = (uchar*)dst.data;</span><br><span class="line">	<span class="keyword">int</span> dstStep = dst.step / <span class="built_in"><span class="keyword">sizeof</span></span>(dstData[<span class="number">0</span>]);</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span>* pImg = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)dst.data + org.x * dst.<span class="built_in">channels</span>() + org.y * dstStep;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span>* pStr = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)pDibData_ + x * <span class="number">3</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> tty = y; tty &lt;= b; ++tty)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">unsigned</span> <span class="keyword">char</span>* subImg = pImg + (tty - y) * dstStep;</span><br><span class="line">		<span class="keyword">unsigned</span> <span class="keyword">char</span>* subStr = pStr + (strBaseH - tty - <span class="number">1</span>) * drawLineStep_;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> ttx = x; ttx &lt;= r; ++ttx)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; dst.<span class="built_in">channels</span>(); ++n) &#123;</span><br><span class="line">				<span class="keyword">double</span> vtxt = subStr[n] / <span class="number">255.0</span>;</span><br><span class="line">				<span class="keyword">int</span> cvv = vtxt * color.val[n] + (<span class="number">1</span> - vtxt) * subImg[n];</span><br><span class="line">				subImg[n] = cvv &gt; <span class="number">255</span> ? <span class="number">255</span> : (cvv &lt; <span class="number">0</span> ? <span class="number">0</span> : cvv);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			subStr += <span class="number">3</span>;</span><br><span class="line">			subImg += dst.<span class="built_in">channels</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 叠加文本 OSD</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;YData&quot;&gt;Y 分量&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;UVData&quot;&gt;UV 分量&lt;/param&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OverlayOSD::OverlayText</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* yData, <span class="keyword">unsigned</span> <span class="keyword">char</span>* uvData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> buf[<span class="number">1</span> &lt;&lt; <span class="number">12</span>];</span><br><span class="line">	<span class="keyword">char</span>* bufT[<span class="number">1</span> &lt;&lt; <span class="number">12</span>];</span><br><span class="line"></span><br><span class="line">	<span class="built_in">strcpy_s</span>(buf, overlayText_);</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">char</span>* ln = <span class="built_in">strtok_s</span>(buf, <span class="string">&quot;\n&quot;</span>, bufT);</span><br><span class="line">	<span class="keyword">int</span> outTextY = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (ln != <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">TextOutA</span>(hDC_, <span class="number">0</span>, outTextY, ln, <span class="built_in">strlen</span>(ln));</span><br><span class="line">		outTextY += singleRow_;</span><br><span class="line">		ln = <span class="built_in">strtok_s</span>(<span class="number">0</span>, <span class="string">&quot;\n&quot;</span>, bufT);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> osdText = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)pDibData_;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> osd_size = <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">unsigned</span> <span class="keyword">char</span>) * OverlayCoordinate.width * OverlayCoordinate.height * <span class="number">3</span>;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span>* osdData = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="built_in">cudaMalloc</span>(&amp;osdData, osd_size);</span><br><span class="line">	<span class="built_in">cudaMemcpy</span>(osdData, osdText, osd_size, cudaMemcpyHostToDevice);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">OSDNearest</span>(yData, uvData, imageWidth_, osdData, OverlayCoordinate, drawLineStep_);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cudaFree</span>(osdData);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 释放所有资源</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OverlayOSD::Dispose</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">SelectObject</span>(hDC_, hOldBmp_);</span><br><span class="line">	<span class="built_in">SelectObject</span>(hDC_, hOldFont_);</span><br><span class="line">	<span class="built_in">DeleteObject</span>(hBmp_);</span><br><span class="line">	<span class="built_in">DeleteObject</span>(hFont_);</span><br><span class="line">	<span class="built_in">DeleteDC</span>(hDC_);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><h4 id="以-Mat-方式叠加"><a href="#以-Mat-方式叠加" class="headerlink" title="以 Mat 方式叠加"></a>以 Mat 方式叠加</h4><p>由于 OpenCV 无法直接叠加半透明矩形，所以使用 <a href="https://docs.opencv.org/3.4/d5/dc4/tutorial_adding_images.html">addWeighted</a> 的方式叠加。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化 OSD 配置</span></span><br><span class="line">OverlayOSD osd1 = <span class="built_in">OverlayOSD</span>();</span><br><span class="line">osd1.<span class="built_in">InitOSD</span>(<span class="string">&quot;1970-01-01 00:00:00&quot;</span>, <span class="number">80</span>, <span class="string">&quot;黑体&quot;</span>, width, height, Top, Left, <span class="built_in">Point</span>(<span class="number">50</span>, <span class="number">50</span>));</span><br><span class="line">OverlayOSD osd2 = <span class="built_in">OverlayOSD</span>();</span><br><span class="line">osd2.<span class="built_in">InitOSD</span>(<span class="string">&quot;测试文本OSD&quot;</span>, <span class="number">80</span>, <span class="string">&quot;黑体&quot;</span>, width, height, Bottom, Right, <span class="built_in">Point</span>(<span class="number">50</span>, <span class="number">50</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 叠加 OSD Mat</span></span><br><span class="line">    Scalar background = <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">double</span> alpha = <span class="number">0.4</span>;</span><br><span class="line"></span><br><span class="line">    Mat roi1 = <span class="built_in">mat</span>(osd1.OverlayCoordinate);</span><br><span class="line">    <span class="function">Mat <span class="title">color1</span><span class="params">(roi1.size(), CV_8UC3, background)</span></span>;</span><br><span class="line">    <span class="built_in">addWeighted</span>(color1, alpha, roi1, <span class="number">1.0</span> - alpha, <span class="number">0.0</span>, roi1);</span><br><span class="line">    osd1.<span class="built_in">OverlayDateTime</span>(mat);</span><br><span class="line"></span><br><span class="line">    Mat roi2 = <span class="built_in">mat</span>(osd2.OverlayCoordinate);</span><br><span class="line">    <span class="function">Mat <span class="title">color2</span><span class="params">(roi2.size(), CV_8UC3, background)</span></span>;</span><br><span class="line">    <span class="built_in">addWeighted</span>(color2, alpha, roi2, <span class="number">1.0</span> - alpha, <span class="number">0.0</span>, roi2);</span><br><span class="line">    osd2.<span class="built_in">OverlayText</span>(mat);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放 OSD 资源</span></span><br><span class="line">osd1.<span class="built_in">Dispose</span>();</span><br><span class="line">osd2.<span class="built_in">Dispose</span>();</span><br></pre></td></tr></table></figure></p>
<h4 id="以-CUDA-方式叠加"><a href="#以-CUDA-方式叠加" class="headerlink" title="以 CUDA 方式叠加"></a>以 CUDA 方式叠加</h4><p>使用 CUDA 方式的叠加半透明矩形仅需要在 CUDA 代码中的 Y 分量减去一定值即可。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化 OSD 配置</span></span><br><span class="line">OverlayOSD osd1 = <span class="built_in">OverlayOSD</span>();</span><br><span class="line">osd1.<span class="built_in">InitOSD</span>(<span class="string">&quot;1970-01-01 00:00:00&quot;</span>, <span class="number">80</span>, <span class="string">&quot;黑体&quot;</span>, width, height, Top, Left, <span class="built_in">Point</span>(<span class="number">50</span>, <span class="number">50</span>));</span><br><span class="line">OverlayOSD osd2 = <span class="built_in">OverlayOSD</span>();</span><br><span class="line">osd2.<span class="built_in">InitOSD</span>(<span class="string">&quot;测试文本OSD&quot;</span>, <span class="number">80</span>, <span class="string">&quot;黑体&quot;</span>, width, height, Bottom, Right, <span class="built_in">Point</span>(<span class="number">50</span>, <span class="number">50</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 叠加 OSD CUDA</span></span><br><span class="line">    osd1.<span class="built_in">OverlayDateTime</span>(outYData, outUVData);</span><br><span class="line">    osd2.<span class="built_in">OverlayText</span>(outYData, outUVData);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放 OSD 资源</span></span><br><span class="line">osd1.<span class="built_in">Dispose</span>();</span><br><span class="line">osd2.<span class="built_in">Dispose</span>();</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>ffmpeg</tag>
        <tag>opencv</tag>
        <tag>cuda</tag>
      </tags>
  </entry>
  <entry>
    <title>NPOI/DOCX 帮助类</title>
    <url>/blog/2017/05/27/csharp-NPOIHelper/</url>
    <content><![CDATA[<h3 id="使用-NPOI-DocX-二次封装Office（Word、Excel）帮助类"><a href="#使用-NPOI-DocX-二次封装Office（Word、Excel）帮助类" class="headerlink" title="使用 NPOI/DocX 二次封装Office（Word、Excel）帮助类"></a>使用 NPOI/DocX 二次封装Office（Word、Excel）帮助类</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>工作中需要大量生成导出报表或合同证书文件，原理为使用Excel或Word模板，批量替换标签以达到效果。</p>
<h4 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h4><p>由于原类库都属于基础方法，二次封装后具有更简易的使用方式，可直接传入生成的数据集或标签替换集合。</p>
<h4 id="引用库介绍"><a href="#引用库介绍" class="headerlink" title="引用库介绍"></a>引用库介绍</h4><p>由于微软默认推荐的类库 <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.office.interop.word?redirectedfrom=MSDN&amp;view=word-pia">Microsoft.Office.Interop.Word</a> 与 <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.office.interop.excel?redirectedfrom=MSDN&amp;view=excel-pia">Microsoft.Office.Interop.Excel</a> 需要电脑安装 <a href="https://office.microsoft.com/">Microsoft Office</a> 并引用COM组件才可以使用（已知调用打印机需引用COM组件），所以选用类库可独立于Office组件，在任意一台电脑也可以运行。<br><a href="https://github.com/tonyqus/npoi">NPOI</a>：POI Java项目的.NET版本。可以非常轻松地读/写Office 2003/2007文件。<br><a href="https://github.com/xceedsoftware/docx">DocX</a>：DocX是一个.NET库，允许开发人员以简单直观的方式操作Word文件。</p>
<h4 id="Excel文件操作"><a href="#Excel文件操作" class="headerlink" title="Excel文件操作"></a>Excel文件操作</h4><p><a href="https://github.com/Sadness96/Sadness/blob/master/Code/Helper/NPOI.Helper/Excel/ExcelHelper.cs">ExcelHelper</a>提供创建文件（2003/2007）及Sheet分页创建编辑，读取Excel文件至内存DataSet及反向DataSet保存至Excel文件。仅显示最外层引用方法，详细调用请在帮助类种查看！<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Excel所有分页转换为DataSet</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strDataSourcePath&quot;&gt;</span>Excel文件路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回Excel的DataSet,失败返回NULL<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSet <span class="title">ExcelConversionDataSet</span>(<span class="params"><span class="built_in">string</span> strDataSourcePath</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strDataSourcePath) || !File.Exists(strDataSourcePath))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        DataSet dsTargetData = <span class="keyword">new</span> DataSet();</span><br><span class="line">        Dictionary&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; dicAllSheet = GetExcelAllSheet(strDataSourcePath);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> vAllSheet <span class="keyword">in</span> dicAllSheet)</span><br><span class="line">        &#123;</span><br><span class="line">            DataTable dtTargetData = <span class="keyword">new</span> DataTable();</span><br><span class="line">            dtTargetData.TableName = vAllSheet.Value;</span><br><span class="line">            dtTargetData = ExcelConversionDataTable(strDataSourcePath, vAllSheet.Value);</span><br><span class="line">            <span class="keyword">if</span> (dtTargetData == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            dsTargetData.Tables.Add(dtTargetData);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dsTargetData;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> DataSet转换为Excel</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 存在文件则新建DataTableName的分页(如果分页名冲突则或为空则使用默认名称)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 不存在文件则新建(Excel,名称为DataTableName,如果没有则使用默认名称)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strDataSourcePath&quot;&gt;</span>Excel文件路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;dsSourceData&quot;&gt;</span>DataTable数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">DataSetConversionExcel</span>(<span class="params"><span class="built_in">string</span> strDataSourcePath, DataSet dsSourceData</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strDataSourcePath) || dsSourceData.Tables.Count &lt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">foreach</span> (DataTable dtSourceData <span class="keyword">in</span> dsSourceData.Tables)</span><br><span class="line">        &#123;</span><br><span class="line">            Dictionary&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; dicAllSheet = GetExcelAllSheet(strDataSourcePath);</span><br><span class="line">            <span class="built_in">string</span> strTableName = <span class="built_in">string</span>.IsNullOrEmpty(dtSourceData.TableName) ? <span class="built_in">string</span>.Format(<span class="string">&quot;Sheet&#123;0&#125;&quot;</span>, dicAllSheet.Count + <span class="number">1</span>) : dtSourceData.TableName;</span><br><span class="line">            <span class="keyword">if</span> (dicAllSheet.ContainsValue(dtSourceData.TableName))</span><br><span class="line">            &#123;</span><br><span class="line">                RemoveExcelSheet(strDataSourcePath, dtSourceData.TableName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!FillDataTable(strDataSourcePath, strTableName, dtSourceData, <span class="literal">true</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据公司项目需要，把多个Excel的Sheet页的内容及样式合并为一个文件，Microsoft.Office.Interop.Excel提供拷贝分页方法，但是需要安装Microsoft Office，所以用NPOI类库实现了一个拷贝方法。<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 拷贝Sheet页到另一个Sheet页</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strSourceExcelPath&quot;&gt;</span>源Excel路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strFromSheetName&quot;&gt;</span>源Excel拷贝Sheet<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strTargetExcelPath&quot;&gt;</span>目标Excel路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strToSheetName&quot;&gt;</span>目标Excel拷贝Sheet<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">CopySheet</span>(<span class="params"><span class="built_in">string</span> strSourceExcelPath, <span class="built_in">string</span> strFromSheetName, <span class="built_in">string</span> strTargetExcelPath, <span class="built_in">string</span> strToSheetName</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strSourceExcelPath) || <span class="built_in">string</span>.IsNullOrEmpty(strTargetExcelPath) || !File.Exists(strSourceExcelPath))</span><br><span class="line">        &#123;</span><br><span class="line">            TXTHelper.Logs(<span class="built_in">string</span>.Format(<span class="string">&quot;源数据和目标数据参数为空或文件不存在!&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strFromSheetName) || <span class="built_in">string</span>.IsNullOrEmpty(strToSheetName))</span><br><span class="line">        &#123;</span><br><span class="line">            TXTHelper.Logs(<span class="built_in">string</span>.Format(<span class="string">&quot;源Sheet页和目标Sheet页参数为空!&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得源数据和目标数据的Sheet页</span></span><br><span class="line">        IWorkbook iSourceWorkbook = <span class="literal">null</span>;</span><br><span class="line">        ISheet iSourceSheet = GetExcelSheetAt(strSourceExcelPath, strFromSheetName, <span class="keyword">out</span> iSourceWorkbook);</span><br><span class="line">        IWorkbook iTargetWorkbook = <span class="literal">null</span>;</span><br><span class="line">        ISheet iTargetSheet = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (iSourceSheet == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            TXTHelper.Logs(<span class="built_in">string</span>.Format(<span class="string">&quot;指定源数据Sheet页为空!&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!File.Exists(strTargetExcelPath))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果文件不存在则创建Excel</span></span><br><span class="line">            <span class="keyword">if</span> (System.IO.Path.GetExtension(strTargetExcelPath) == <span class="string">&quot;.xls&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">bool</span> bCreare = CreateExcel_Office2003(strTargetExcelPath, strToSheetName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (System.IO.Path.GetExtension(strTargetExcelPath) == <span class="string">&quot;.xlsx&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">bool</span> bCreare = CreateExcel_Office2007(strTargetExcelPath, strToSheetName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                TXTHelper.Logs(<span class="built_in">string</span>.Format(<span class="string">&quot;指定目标Excel文件路径格式错误!&quot;</span>));</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            iTargetSheet = GetExcelSheetAt(strTargetExcelPath, strToSheetName, <span class="keyword">out</span> iTargetWorkbook);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果文件存在则判断是否存在执行Sheet</span></span><br><span class="line">            Dictionary&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; dicAllSheet = GetExcelAllSheet(strTargetExcelPath);</span><br><span class="line">            <span class="keyword">if</span> (dicAllSheet.ContainsValue(strToSheetName))</span><br><span class="line">            &#123;</span><br><span class="line">                iTargetSheet = GetExcelSheetAt(strTargetExcelPath, strToSheetName, <span class="keyword">out</span> iTargetWorkbook);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                iTargetSheet = CreateExcelSheetAt(strTargetExcelPath, strToSheetName, <span class="keyword">out</span> iTargetWorkbook);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调用Sheet拷贝Sheet方法</span></span><br><span class="line">        <span class="built_in">bool</span> bCopySheet = CopySheetAt(iSourceWorkbook, iSourceSheet, iTargetWorkbook, iTargetSheet);</span><br><span class="line">        <span class="keyword">if</span> (bCopySheet)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (System.IO.Path.GetExtension(strTargetExcelPath) == <span class="string">&quot;.xls&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                FileStream fileStream2003 = <span class="keyword">new</span> FileStream(Path.ChangeExtension(strTargetExcelPath, <span class="string">&quot;xls&quot;</span>), FileMode.Create);</span><br><span class="line">                iTargetWorkbook.Write(fileStream2003);</span><br><span class="line">                fileStream2003.Close();</span><br><span class="line">                iTargetWorkbook.Close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (System.IO.Path.GetExtension(strTargetExcelPath) == <span class="string">&quot;.xlsx&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                FileStream fileStream2007 = <span class="keyword">new</span> FileStream(Path.ChangeExtension(strTargetExcelPath, <span class="string">&quot;xlsx&quot;</span>), FileMode.Create);</span><br><span class="line">                iTargetWorkbook.Write(fileStream2007);</span><br><span class="line">                fileStream2007.Close();</span><br><span class="line">                iTargetWorkbook.Close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            TXTHelper.Logs(<span class="built_in">string</span>.Format(<span class="string">&quot;拷贝失败!&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &lt;summary&gt;</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 拷贝Sheet页到另一个Sheet页(浅拷贝,不提供保存方法)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Office2003单Sheet页仅支持4000个样式</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;iSourceWorkbook&quot;&gt;</span>源Excel工作簿<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;iFromSheet&quot;&gt;</span>源Sheet页<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;iTargetWorkbook&quot;&gt;</span>目标Excel工作簿<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;iToSheet&quot;&gt;</span>目标Sheet页<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">CopySheetAt</span>(<span class="params">IWorkbook iSourceWorkbook, ISheet iFromSheet, IWorkbook iTargetWorkbook, ISheet iToSheet</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//拷贝数据</span></span><br><span class="line">        DataTable dtExcelFromData = GetDataTable(iFromSheet, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        iToSheet = FillDataTable(iToSheet, dtExcelFromData, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//拷贝单元格合并</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> iMergedRegions = <span class="number">0</span>; iMergedRegions &lt; iFromSheet.NumMergedRegions; iMergedRegions++)</span><br><span class="line">        &#123;</span><br><span class="line">            iToSheet.AddMergedRegion(iFromSheet.GetMergedRegion(iMergedRegions));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//拷贝样式(遍历Sheet页行)</span></span><br><span class="line">        List&lt;ICellStyle&gt; listCellStyle = <span class="keyword">new</span> List&lt;ICellStyle&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> iRowNum = <span class="number">0</span>; iRowNum &lt;= iFromSheet.LastRowNum; iRowNum++)</span><br><span class="line">        &#123;</span><br><span class="line">            IRow iFromRowData = iFromSheet.GetRow(iRowNum);</span><br><span class="line">            IRow iToRowData = iToSheet.GetRow(iRowNum);</span><br><span class="line">            <span class="keyword">if</span> (iFromRowData == <span class="literal">null</span> || iToRowData == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//设置行高</span></span><br><span class="line">            <span class="built_in">short</span> sFromHeight = iFromRowData.Height;</span><br><span class="line">            iToRowData.Height = sFromHeight;</span><br><span class="line">            <span class="comment">//遍历Sheet页列</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> iRowCell = <span class="number">0</span>; iRowCell &lt;= iFromRowData.LastCellNum; iRowCell++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//设置列宽</span></span><br><span class="line">                <span class="built_in">int</span> iFromColumnWidth = iFromSheet.GetColumnWidth(iRowNum) / <span class="number">256</span>;</span><br><span class="line">                iToSheet.SetColumnWidth(iRowNum, iFromColumnWidth * <span class="number">256</span>);</span><br><span class="line">                <span class="comment">//复制数据</span></span><br><span class="line">                ICell iFromCell = iFromRowData.GetCell(iRowCell);</span><br><span class="line">                <span class="keyword">if</span> (iFromCell != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//获得源Sheet页的样式</span></span><br><span class="line">                    ICellStyle iFromCellStyle = iFromCell.CellStyle;</span><br><span class="line">                    <span class="comment">//获得目标Excel指定Cell</span></span><br><span class="line">                    ICell iToCell = iToRowData.GetCell(iRowCell);</span><br><span class="line">                    <span class="keyword">if</span> (iToCell == <span class="literal">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="meta">#<span class="meta-keyword">region</span> 复制单元格样式</span></span><br><span class="line">                    <span class="comment">//指定Cell创新目标Excel工作簿新样式</span></span><br><span class="line">                    ICellStyle iToNewCellStyle = <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">foreach</span> (ICellStyle vCellStyle <span class="keyword">in</span> listCellStyle)</span><br><span class="line">                    &#123;</span><br><span class="line">                        IFont iVToFont = vCellStyle.GetFont(iTargetWorkbook);</span><br><span class="line">                        IFont iFromFont = iFromCellStyle.GetFont(iSourceWorkbook);</span><br><span class="line">                        <span class="keyword">if</span> (vCellStyle.Alignment == iFromCellStyle.Alignment &amp;&amp;</span><br><span class="line">                            vCellStyle.BorderBottom == iFromCellStyle.BorderBottom &amp;&amp;</span><br><span class="line">                            vCellStyle.BorderLeft == iFromCellStyle.BorderLeft &amp;&amp;</span><br><span class="line">                            vCellStyle.BorderRight == iFromCellStyle.BorderRight &amp;&amp;</span><br><span class="line">                            vCellStyle.BorderTop == iFromCellStyle.BorderTop &amp;&amp;</span><br><span class="line">                            vCellStyle.BottomBorderColor == iFromCellStyle.BottomBorderColor &amp;&amp;</span><br><span class="line">                            vCellStyle.DataFormat == iFromCellStyle.DataFormat &amp;&amp;</span><br><span class="line">                            vCellStyle.FillBackgroundColor == iFromCellStyle.FillBackgroundColor &amp;&amp;</span><br><span class="line">                            vCellStyle.FillForegroundColor == iFromCellStyle.FillForegroundColor &amp;&amp;</span><br><span class="line">                            vCellStyle.FillPattern == iFromCellStyle.FillPattern &amp;&amp;</span><br><span class="line">                            vCellStyle.Indention == iFromCellStyle.Indention &amp;&amp;</span><br><span class="line">                            vCellStyle.IsHidden == iFromCellStyle.IsHidden &amp;&amp;</span><br><span class="line">                            vCellStyle.IsLocked == iFromCellStyle.IsLocked &amp;&amp;</span><br><span class="line">                            vCellStyle.LeftBorderColor == iFromCellStyle.LeftBorderColor &amp;&amp;</span><br><span class="line">                            vCellStyle.RightBorderColor == iFromCellStyle.RightBorderColor &amp;&amp;</span><br><span class="line">                            vCellStyle.Rotation == iFromCellStyle.Rotation &amp;&amp;</span><br><span class="line">                            vCellStyle.TopBorderColor == iFromCellStyle.TopBorderColor &amp;&amp;</span><br><span class="line">                            vCellStyle.VerticalAlignment == iFromCellStyle.VerticalAlignment &amp;&amp;</span><br><span class="line">                            vCellStyle.WrapText == iFromCellStyle.WrapText &amp;&amp;</span><br><span class="line">                            <span class="comment">//字体比对</span></span><br><span class="line">                            iVToFont.Color == iFromFont.Color &amp;&amp;</span><br><span class="line">                            iVToFont.FontHeightInPoints == iFromFont.FontHeightInPoints &amp;&amp;</span><br><span class="line">                            iVToFont.FontName == iFromFont.FontName &amp;&amp;</span><br><span class="line">                            iVToFont.IsBold == iFromFont.IsBold &amp;&amp;</span><br><span class="line">                            iVToFont.IsItalic == iFromFont.IsItalic &amp;&amp;</span><br><span class="line">                            iVToFont.IsStrikeout == iFromFont.IsStrikeout &amp;&amp;</span><br><span class="line">                            iVToFont.Underline == iFromFont.Underline)</span><br><span class="line">                        &#123;</span><br><span class="line">                            iToNewCellStyle = vCellStyle;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (iToNewCellStyle == <span class="literal">null</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//创建新样式</span></span><br><span class="line">                        iToNewCellStyle = iTargetWorkbook.CreateCellStyle();</span><br><span class="line">                        <span class="comment">//复制样式</span></span><br><span class="line">                        iToNewCellStyle.Alignment = iFromCellStyle.Alignment;<span class="comment">//对齐</span></span><br><span class="line">                        iToNewCellStyle.BorderBottom = iFromCellStyle.BorderBottom;<span class="comment">//下边框</span></span><br><span class="line">                        iToNewCellStyle.BorderLeft = iFromCellStyle.BorderLeft;<span class="comment">//左边框</span></span><br><span class="line">                        iToNewCellStyle.BorderRight = iFromCellStyle.BorderRight;<span class="comment">//右边框</span></span><br><span class="line">                        iToNewCellStyle.BorderTop = iFromCellStyle.BorderTop;<span class="comment">//上边框</span></span><br><span class="line">                        iToNewCellStyle.BottomBorderColor = iFromCellStyle.BottomBorderColor;<span class="comment">//下边框颜色</span></span><br><span class="line">                        iToNewCellStyle.DataFormat = iFromCellStyle.DataFormat;<span class="comment">//数据格式</span></span><br><span class="line">                        iToNewCellStyle.FillBackgroundColor = iFromCellStyle.FillBackgroundColor;<span class="comment">//填充背景色</span></span><br><span class="line">                        iToNewCellStyle.FillForegroundColor = iFromCellStyle.FillForegroundColor;<span class="comment">//填充前景色</span></span><br><span class="line">                        iToNewCellStyle.FillPattern = iFromCellStyle.FillPattern;<span class="comment">//填充图案</span></span><br><span class="line">                        iToNewCellStyle.Indention = iFromCellStyle.Indention;<span class="comment">//压痕</span></span><br><span class="line">                        iToNewCellStyle.IsHidden = iFromCellStyle.IsHidden;<span class="comment">//隐藏</span></span><br><span class="line">                        iToNewCellStyle.IsLocked = iFromCellStyle.IsLocked;<span class="comment">//锁定</span></span><br><span class="line">                        iToNewCellStyle.LeftBorderColor = iFromCellStyle.LeftBorderColor;<span class="comment">//左边框颜色</span></span><br><span class="line">                        iToNewCellStyle.RightBorderColor = iFromCellStyle.RightBorderColor;<span class="comment">//右边框颜色</span></span><br><span class="line">                        iToNewCellStyle.Rotation = iFromCellStyle.Rotation;<span class="comment">//旋转</span></span><br><span class="line">                        iToNewCellStyle.TopBorderColor = iFromCellStyle.TopBorderColor;<span class="comment">//上边框颜色</span></span><br><span class="line">                        iToNewCellStyle.VerticalAlignment = iFromCellStyle.VerticalAlignment;<span class="comment">//垂直对齐</span></span><br><span class="line">                        iToNewCellStyle.WrapText = iFromCellStyle.WrapText;<span class="comment">//文字换行</span></span><br><span class="line">                        <span class="comment">//复制字体</span></span><br><span class="line">                        IFont iFromFont = iFromCellStyle.GetFont(iSourceWorkbook);</span><br><span class="line">                        IFont iToFont = iTargetWorkbook.CreateFont();</span><br><span class="line">                        iToFont.Color = iFromFont.Color;<span class="comment">//颜色</span></span><br><span class="line">                        iToFont.FontHeightInPoints = iFromFont.FontHeightInPoints;<span class="comment">//字号</span></span><br><span class="line">                        iToFont.FontName = iFromFont.FontName;<span class="comment">//字体</span></span><br><span class="line">                        iToFont.IsBold = iFromFont.IsBold;<span class="comment">//加粗</span></span><br><span class="line">                        iToFont.IsItalic = iFromFont.IsItalic;<span class="comment">//斜体</span></span><br><span class="line">                        iToFont.IsStrikeout = iFromFont.IsStrikeout;<span class="comment">//删除线</span></span><br><span class="line">                        iToFont.Underline = iFromFont.Underline;<span class="comment">//下划线</span></span><br><span class="line">                        iToNewCellStyle.SetFont(iToFont);</span><br><span class="line">                        <span class="comment">//保存到缓存集合中</span></span><br><span class="line">                        listCellStyle.Add(iToNewCellStyle);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//复制样式到指定表格中</span></span><br><span class="line">                    iToCell.CellStyle = iToNewCellStyle;</span><br><span class="line">                    <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Word文件操作"><a href="#Word文件操作" class="headerlink" title="Word文件操作"></a>Word文件操作</h4><p><a href="https://github.com/Sadness96/Sadness/blob/master/Code/Helper/NPOI.Helper/Word/WordHelper.cs">WordHelper</a>提供创建文件（2003/2007）及替换段落表格标签（匹配替换’{标签}’,’#标签#’），替换图片功能。仅显示最外层引用方法，详细调用请在帮助类种查看！<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 替换文本标签</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strDataSourcePath&quot;&gt;</span>Word文件路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strLabelName&quot;&gt;</span>标签名称(带标签符号)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strReplaceLabel&quot;&gt;</span>替换标签文本<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回替换数量,失败返回-1<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">ReplaceTextLabel</span>(<span class="params"><span class="built_in">string</span> strDataSourcePath, <span class="built_in">string</span> strLabelName, <span class="built_in">string</span> strReplaceLabel</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strDataSourcePath) || !File.Exists(strDataSourcePath) || <span class="built_in">string</span>.IsNullOrEmpty(strLabelName) || <span class="built_in">string</span>.IsNullOrEmpty(strReplaceLabel))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> iNumber = <span class="number">0</span>;</span><br><span class="line">        FileStream fileStreamOpen = <span class="keyword">new</span> FileStream(strDataSourcePath, FileMode.Open, FileAccess.Read);</span><br><span class="line">        XWPFDocument wordDocument = <span class="keyword">new</span> XWPFDocument(fileStreamOpen);</span><br><span class="line">        <span class="keyword">foreach</span> (XWPFParagraph wordParagraph <span class="keyword">in</span> wordDocument.Paragraphs)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (wordParagraph.ParagraphText.IndexOf(strLabelName) &gt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> strReplaceTextLabel = wordParagraph.ParagraphText.Replace(strLabelName, strReplaceLabel);</span><br><span class="line">                <span class="keyword">foreach</span> (XWPFRun wordRun <span class="keyword">in</span> wordParagraph.Runs)</span><br><span class="line">                &#123;</span><br><span class="line">                    wordRun.SetText(<span class="built_in">string</span>.Empty, <span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                wordParagraph.CreateRun().SetText(strReplaceTextLabel, <span class="number">0</span>);</span><br><span class="line">                iNumber++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">foreach</span> (XWPFTable wordTable <span class="keyword">in</span> wordDocument.Tables)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (XWPFTableRow wordTableRow <span class="keyword">in</span> wordTable.Rows)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">foreach</span> (XWPFTableCell wordTableCell <span class="keyword">in</span> wordTableRow.GetTableCells())</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">foreach</span> (XWPFParagraph wordParagraph <span class="keyword">in</span> wordTableCell.Paragraphs)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (wordParagraph.ParagraphText.IndexOf(strLabelName) &gt;= <span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">string</span> strReplaceTextLabel = wordParagraph.ParagraphText.Replace(strLabelName, strReplaceLabel);</span><br><span class="line">                            <span class="keyword">foreach</span> (XWPFRun wordRun <span class="keyword">in</span> wordParagraph.Runs)</span><br><span class="line">                            &#123;</span><br><span class="line">                                wordRun.SetText(<span class="built_in">string</span>.Empty, <span class="number">0</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                            wordParagraph.CreateRun().SetText(strReplaceTextLabel, <span class="number">0</span>);</span><br><span class="line">                            iNumber++;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        FileStream fileStreamSave = <span class="keyword">new</span> FileStream(strDataSourcePath, FileMode.Create);</span><br><span class="line">        wordDocument.Write(fileStreamSave);</span><br><span class="line">        fileStreamSave.Close();</span><br><span class="line">        wordDocument.Close();</span><br><span class="line">        <span class="keyword">return</span> iNumber;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 替换表格标签(DataTable替换)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strDataSourcePath&quot;&gt;</span>Word文件路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strLabelName&quot;&gt;</span>标签名称(带标签符号)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;dtReplaceLabel&quot;&gt;</span>替换标签DataTable<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回1,失败返回-1<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">ReplaceDataTableLabel</span>(<span class="params"><span class="built_in">string</span> strDataSourcePath, <span class="built_in">string</span> strLabelName, DataTable dtReplaceLabel</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strDataSourcePath) || !File.Exists(strDataSourcePath) || <span class="built_in">string</span>.IsNullOrEmpty(strLabelName) || dtReplaceLabel == <span class="literal">null</span> || dtReplaceLabel.Rows.Count &lt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        FileStream fileStreamOpen = <span class="keyword">new</span> FileStream(strDataSourcePath, FileMode.Open, FileAccess.Read);</span><br><span class="line">        XWPFDocument wordDocument = <span class="keyword">new</span> XWPFDocument(fileStreamOpen);</span><br><span class="line">        <span class="built_in">int</span> iLableRowPosition = <span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">int</span> iLableCellPosition = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (XWPFTable wordTable <span class="keyword">in</span> wordDocument.Tables)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> iTableRow = <span class="number">0</span>; iTableRow &lt; wordTable.Rows.Count; iTableRow++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> iTableCell = <span class="number">0</span>; iTableCell &lt; wordTable.Rows[iTableRow].GetTableCells().Count; iTableCell++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">foreach</span> (XWPFParagraph wordParagraph <span class="keyword">in</span> wordTable.Rows[iTableRow].GetTableCells()[iTableCell].Paragraphs)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (wordParagraph.ParagraphText.IndexOf(strLabelName) &gt;= <span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span> (iLableRowPosition &lt; <span class="number">0</span> &amp;&amp; iLableCellPosition &lt; <span class="number">0</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                iLableRowPosition = iTableRow;</span><br><span class="line">                                iLableCellPosition = iTableCell;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (iLableRowPosition &gt;= <span class="number">0</span> &amp;&amp; iLableCellPosition &gt;= <span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="built_in">int</span> iCurrentRow = iTableRow - iLableRowPosition;</span><br><span class="line">                            <span class="built_in">int</span> iCurrentCell = iTableCell - iLableCellPosition;</span><br><span class="line">                            <span class="keyword">if</span> ((iCurrentRow &lt; dtReplaceLabel.Rows.Count &amp;&amp; iCurrentRow &gt;= <span class="number">0</span>) &amp;&amp; (iCurrentCell &lt; dtReplaceLabel.Columns.Count &amp;&amp; iCurrentCell &gt;= <span class="number">0</span>))</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="keyword">foreach</span> (XWPFRun wordRun <span class="keyword">in</span> wordParagraph.Runs)</span><br><span class="line">                                &#123;</span><br><span class="line">                                    wordRun.SetText(<span class="built_in">string</span>.Empty, <span class="number">0</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                                wordParagraph.CreateRun().SetText(dtReplaceLabel.Rows[iCurrentRow][iCurrentCell].ToString(), <span class="number">0</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        FileStream fileStreamSave = <span class="keyword">new</span> FileStream(strDataSourcePath, FileMode.Create);</span><br><span class="line">        wordDocument.Write(fileStreamSave);</span><br><span class="line">        fileStreamSave.Close();</span><br><span class="line">        wordDocument.Close();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 替换图片标签(使用DocX.dll类库,调用这个方法后NPOI无法读取文档)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strDataSourcePath&quot;&gt;</span>Word文件路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strLabelName&quot;&gt;</span>标签名称(带标签符号)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strImagePath&quot;&gt;</span>替换的图片路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;iImageWidth&quot;&gt;</span>替换的图片宽度(小于0则显示原图宽度)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;iImageHeight&quot;&gt;</span>替换的图片高度(小于0则显示原图高度)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回替换数量,失败返回-1<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">ReplaceImageLabel</span>(<span class="params"><span class="built_in">string</span> strDataSourcePath, <span class="built_in">string</span> strLabelName, <span class="built_in">string</span> strImagePath, <span class="built_in">int</span> iImageWidth, <span class="built_in">int</span> iImageHeight</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strDataSourcePath) || !File.Exists(strDataSourcePath) || <span class="built_in">string</span>.IsNullOrEmpty(strLabelName) || <span class="built_in">string</span>.IsNullOrEmpty(strImagePath) || !File.Exists(strImagePath))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> iNumber = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//使用DocX.dll类库</span></span><br><span class="line">        DocX mDocX = DocX.Load(strDataSourcePath);</span><br><span class="line">        <span class="comment">//遍历段落</span></span><br><span class="line">        <span class="keyword">foreach</span> (Paragraph wordParagraph <span class="keyword">in</span> mDocX.Paragraphs)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (wordParagraph.Text.IndexOf(strLabelName) &gt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//添加图片</span></span><br><span class="line">                Novacode.Image pImag = mDocX.AddImage(strImagePath);</span><br><span class="line">                Picture pPicture = pImag.CreatePicture();</span><br><span class="line">                <span class="comment">//如果传入宽度小于0,则以原始大小插入</span></span><br><span class="line">                <span class="keyword">if</span> (iImageWidth &gt;= <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    pPicture.Width = iImageWidth;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//如果传入高度小于0,则以原始大小插入</span></span><br><span class="line">                <span class="keyword">if</span> (iImageHeight &gt;= <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    pPicture.Height = iImageHeight;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//将图像插入到段落后面</span></span><br><span class="line">                wordParagraph.InsertPicture(pPicture);</span><br><span class="line">                <span class="comment">//清空文本(清空放在前面会导致替换失败文字消失)</span></span><br><span class="line">                wordParagraph.ReplaceText(strLabelName, <span class="built_in">string</span>.Empty);</span><br><span class="line">                iNumber++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mDocX.SaveAs(strDataSourcePath);</span><br><span class="line">        <span class="keyword">return</span> iNumber;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>helper</tag>
        <tag>excel</tag>
        <tag>npoi</tag>
        <tag>docx</tag>
        <tag>word</tag>
      </tags>
  </entry>
  <entry>
    <title>ZIP压缩文件帮助类</title>
    <url>/blog/2017/05/25/csharp-ZIPHelper/</url>
    <content><![CDATA[<h3 id="操作-ZIP-7z-压缩文件帮助类，以及压缩数据文本的-GZIP-帮助类"><a href="#操作-ZIP-7z-压缩文件帮助类，以及压缩数据文本的-GZIP-帮助类" class="headerlink" title="操作 ZIP/7z 压缩文件帮助类，以及压缩数据文本的 GZIP 帮助类"></a>操作 ZIP/7z 压缩文件帮助类，以及压缩数据文本的 GZIP 帮助类</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>工作中会有需求把数据集打包成压缩文件，封装一个帮助以方便调用。<br><a href="https://baike.baidu.com/item/Zip/16684862#viewPageContent">ZIP</a> 通用且最为常见的压缩格式。<br><a href="https://www.7-zip.org/">7-ZIP</a> 自由开源的压缩格式，压缩效果要比普通的ZIP效果要好。<br><a href="https://baike.baidu.com/item/gzip/4487553?fr=aladdin">GZIP</a> 用于压缩数据流或文本。</p>
<h4 id="帮助类代码及引用"><a href="#帮助类代码及引用" class="headerlink" title="帮助类代码及引用"></a>帮助类代码及引用</h4><h5 id="ZIP："><a href="#ZIP：" class="headerlink" title="ZIP："></a>ZIP：</h5><p><a href="https://github.com/Sadness96/Sadness/blob/master/Code/Helper/FileIO.Helper/ZIP/ZIPHelper.cs">ZIPHelper</a> 引用 ICSharpCode.SharpZipLib.Zip 库<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 压缩ZIP文件</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strZipPath&quot;&gt;</span>ZIP压缩文件保存位置<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;listFolderOrFilePath&quot;&gt;</span>需要压缩的文件夹或文件<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">CompressionZip</span>(<span class="params"><span class="built_in">string</span> strZipPath, List&lt;<span class="built_in">string</span>&gt; listFolderOrFilePath</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> CompressionZip(strZipPath, listFolderOrFilePath, <span class="built_in">string</span>.Empty);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 压缩ZIP文件(加密)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strZipPath&quot;&gt;</span>ZIP压缩文件保存位置<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;listFolderOrFilePath&quot;&gt;</span>需要压缩的文件夹或文件<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strPassword&quot;&gt;</span>压缩文件密码<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">CompressionZip</span>(<span class="params"><span class="built_in">string</span> strZipPath, List&lt;<span class="built_in">string</span>&gt; listFolderOrFilePath, <span class="built_in">string</span> strPassword</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        ZipOutputStream ComStream = <span class="keyword">new</span> ZipOutputStream(File.Create(strZipPath));</span><br><span class="line">        <span class="comment">//压缩等级(0-9)</span></span><br><span class="line">        ComStream.SetLevel(<span class="number">9</span>);</span><br><span class="line">        <span class="comment">//压缩文件加密</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strPassword))</span><br><span class="line">        &#123;</span><br><span class="line">            ComStream.Password = strPassword;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">string</span> strFolderOrFilePath <span class="keyword">in</span> listFolderOrFilePath)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (Directory.Exists(strFolderOrFilePath))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//如果路径是文件目录</span></span><br><span class="line">                CompressionZipDirectory(strFolderOrFilePath, ComStream, <span class="built_in">string</span>.Empty);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (File.Exists(strFolderOrFilePath))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//如果路径是文件路径</span></span><br><span class="line">                FileStream fileStream = File.OpenRead(strFolderOrFilePath);</span><br><span class="line">                <span class="built_in">byte</span>[] btsLength = <span class="keyword">new</span> <span class="built_in">byte</span>[fileStream.Length];</span><br><span class="line">                fileStream.Read(btsLength, <span class="number">0</span>, btsLength.Length);</span><br><span class="line">                ZipEntry zipEntry = <span class="keyword">new</span> ZipEntry(<span class="keyword">new</span> FileInfo(strFolderOrFilePath).Name);</span><br><span class="line">                ComStream.PutNextEntry(zipEntry);</span><br><span class="line">                ComStream.Write(btsLength, <span class="number">0</span>, btsLength.Length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ComStream.Finish();</span><br><span class="line">        ComStream.Close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 压缩ZIP文件夹</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strRootPath&quot;&gt;</span>根目录路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;ComStream&quot;&gt;</span>ZIP文件输出流<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strSubPath&quot;&gt;</span>子目录路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CompressionZipDirectory</span>(<span class="params"><span class="built_in">string</span> strRootPath, ZipOutputStream ComStream, <span class="built_in">string</span> strSubPath</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//创建当前文件夹</span></span><br><span class="line">        ZipEntry zipEntry = <span class="keyword">new</span> ZipEntry(Path.Combine(strSubPath, Path.GetFileName(strRootPath) + <span class="string">&quot;/&quot;</span>));</span><br><span class="line">        ComStream.PutNextEntry(zipEntry);</span><br><span class="line">        ComStream.Flush();</span><br><span class="line">        <span class="comment">//遍历压缩目录</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">string</span> strFolder <span class="keyword">in</span> Directory.GetDirectories(strRootPath))</span><br><span class="line">        &#123;</span><br><span class="line">            CompressionZipDirectory(strFolder, ComStream, Path.Combine(strSubPath, Path.GetFileName(strRootPath)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历压缩文件</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">string</span> strFileName <span class="keyword">in</span> Directory.GetFiles(strRootPath))</span><br><span class="line">        &#123;</span><br><span class="line">            FileStream fileStream = File.OpenRead(strFileName);</span><br><span class="line">            <span class="built_in">byte</span>[] btsLength = <span class="keyword">new</span> <span class="built_in">byte</span>[fileStream.Length];</span><br><span class="line">            fileStream.Read(btsLength, <span class="number">0</span>, btsLength.Length);</span><br><span class="line">            zipEntry = <span class="keyword">new</span> ZipEntry(Path.Combine(strSubPath, Path.GetFileName(strRootPath) + <span class="string">&quot;/&quot;</span> + Path.GetFileName(strFileName)));</span><br><span class="line">            ComStream.PutNextEntry(zipEntry);</span><br><span class="line">            ComStream.Write(btsLength, <span class="number">0</span>, btsLength.Length);</span><br><span class="line">            <span class="keyword">if</span> (fileStream != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                fileStream.Close();</span><br><span class="line">                fileStream.Dispose();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (zipEntry != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            zipEntry = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        GC.Collect();</span><br><span class="line">        GC.Collect(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 解压缩ZIP文件</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strZipPath&quot;&gt;</span>ZIP压缩文件保存位置<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strDeCompressionPath&quot;&gt;</span>需要解压到的指定位置<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">DeCompressionZip</span>(<span class="params"><span class="built_in">string</span> strZipPath, <span class="built_in">string</span> strDeCompressionPath</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> DeCompressionZip(strZipPath, strDeCompressionPath, <span class="built_in">string</span>.Empty);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 解压缩ZIP文件(加密)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strZipPath&quot;&gt;</span>ZIP压缩文件保存位置<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strDeCompressionPath&quot;&gt;</span>需要解压到的指定位置<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strPassword&quot;&gt;</span>压缩文件密码<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">DeCompressionZip</span>(<span class="params"><span class="built_in">string</span> strZipPath, <span class="built_in">string</span> strDeCompressionPath, <span class="built_in">string</span> strPassword</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strZipPath) || !File.Exists(strZipPath))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ZipInputStream inputStream = <span class="keyword">new</span> ZipInputStream(File.OpenRead(strZipPath));</span><br><span class="line">        <span class="comment">//压缩文件解密</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strPassword))</span><br><span class="line">        &#123;</span><br><span class="line">            inputStream.Password = strPassword;</span><br><span class="line">        &#125;</span><br><span class="line">        ZipEntry zipEntry = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((zipEntry = inputStream.GetNextEntry()) != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(zipEntry.Name))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> strFileName = Path.Combine(strDeCompressionPath, zipEntry.Name);</span><br><span class="line">                strFileName = strFileName.Replace(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line">                <span class="keyword">if</span> (strFileName.EndsWith(<span class="string">&quot;\\&quot;</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    Directory.CreateDirectory(strFileName);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    FileStream fileStream = <span class="literal">null</span>;</span><br><span class="line">                    <span class="built_in">int</span> intSize = <span class="number">2048</span>;</span><br><span class="line">                    <span class="built_in">byte</span>[] btsData = <span class="keyword">new</span> <span class="built_in">byte</span>[intSize];</span><br><span class="line">                    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        intSize = inputStream.Read(btsData, <span class="number">0</span>, btsData.Length);</span><br><span class="line">                        <span class="keyword">if</span> (fileStream == <span class="literal">null</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            fileStream = File.Create(strFileName);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (intSize &gt; <span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            fileStream.Write(btsData, <span class="number">0</span>, btsData.Length);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (fileStream != <span class="literal">null</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        fileStream.Close();</span><br><span class="line">                        fileStream.Dispose();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (zipEntry != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            zipEntry = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (inputStream != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            inputStream.Close();</span><br><span class="line">            inputStream.Dispose();</span><br><span class="line">        &#125;</span><br><span class="line">        GC.Collect();</span><br><span class="line">        GC.Collect(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="7-ZIP："><a href="#7-ZIP：" class="headerlink" title="7-ZIP："></a>7-ZIP：</h5><p><a href="https://github.com/Sadness96/Sadness/blob/master/Code/Helper/FileIO.Helper/ZIP/ZIP7Helper.cs">ZIP7Helper</a> 动态引用 7z.dll 库<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获得当前系统X86架构7ZIP类库路径</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> strX86_DllPath</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Format(<span class="string">@&quot;&#123;0&#125;\x86\7z.dll&quot;</span>, System.Environment.CurrentDirectory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获得当前系统X64架构7ZIP类库路径</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> strX64_DllPath</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Format(<span class="string">@&quot;&#123;0&#125;\x64\7z.dll&quot;</span>, System.Environment.CurrentDirectory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 动态链接7ZIP类库</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetLibraryPath7z</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//动态链接7ZIP类库</span></span><br><span class="line">    <span class="keyword">if</span> (IntPtr.Size == <span class="number">8</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        SevenZipExtractor.SetLibraryPath(strX64_DllPath);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        SevenZipExtractor.SetLibraryPath(strX86_DllPath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 压缩7-ZIP文件</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strZipPath&quot;&gt;</span>ZIP压缩文件保存位置<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;fileFullNames&quot;&gt;</span>需要压缩的文件<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">Compression7Zip</span>(<span class="params"><span class="built_in">string</span> strZipPath, <span class="keyword">params</span> <span class="built_in">string</span>[] fileFullNames</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//动态链接7ZIP类库</span></span><br><span class="line">        SetLibraryPath7z();</span><br><span class="line">        <span class="comment">//默认格式为(*.7z)</span></span><br><span class="line">        strZipPath = Path.ChangeExtension(strZipPath, <span class="string">&quot;7z&quot;</span>);</span><br><span class="line">        <span class="comment">//压缩7-ZIP文件</span></span><br><span class="line">        SevenZipCompressor sevenZipCompressor = <span class="keyword">new</span> SevenZipCompressor();</span><br><span class="line">        <span class="comment">//压缩等级(默认正常值)</span></span><br><span class="line">        sevenZipCompressor.CompressionLevel = CompressionLevel.Normal;</span><br><span class="line">        <span class="comment">//压缩格式(默认7z压缩)</span></span><br><span class="line">        sevenZipCompressor.ArchiveFormat = OutArchiveFormat.SevenZip;</span><br><span class="line">        <span class="comment">//是否保持目录结构(默认为true)</span></span><br><span class="line">        sevenZipCompressor.DirectoryStructure = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//是否包含空目录(默认true)  </span></span><br><span class="line">        sevenZipCompressor.IncludeEmptyDirectories = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//压缩目录时是否使用顶层目录(默认false)  </span></span><br><span class="line">        sevenZipCompressor.PreserveDirectoryRoot = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//加密7z头(默认false)  </span></span><br><span class="line">        sevenZipCompressor.EncryptHeaders = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//文件加密算法</span></span><br><span class="line">        sevenZipCompressor.ZipEncryptionMethod = ZipEncryptionMethod.ZipCrypto;</span><br><span class="line">        <span class="comment">//尽快压缩(不会触发*Started事件,仅触发*Finished事件)  </span></span><br><span class="line">        sevenZipCompressor.FastCompression = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//压缩文件</span></span><br><span class="line">        sevenZipCompressor.CompressFiles(strZipPath, fileFullNames);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 压缩7-ZIP文件(加密)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strZipPath&quot;&gt;</span>ZIP压缩文件保存位置<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strPassword&quot;&gt;</span>压缩文件密码<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;fileFullNames&quot;&gt;</span>需要压缩的文件<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">Compression7Zip</span>(<span class="params"><span class="built_in">string</span> strZipPath, <span class="built_in">string</span> strPassword, <span class="keyword">params</span> <span class="built_in">string</span>[] fileFullNames</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//动态链接7ZIP类库</span></span><br><span class="line">        SetLibraryPath7z();</span><br><span class="line">        <span class="comment">//默认格式为(*.7z)</span></span><br><span class="line">        strZipPath = Path.ChangeExtension(strZipPath, <span class="string">&quot;7z&quot;</span>);</span><br><span class="line">        <span class="comment">//压缩7-ZIP文件</span></span><br><span class="line">        SevenZipCompressor sevenZipCompressor = <span class="keyword">new</span> SevenZipCompressor();</span><br><span class="line">        <span class="comment">//压缩等级(默认正常值)</span></span><br><span class="line">        sevenZipCompressor.CompressionLevel = CompressionLevel.Normal;</span><br><span class="line">        <span class="comment">//压缩格式(默认7z压缩)</span></span><br><span class="line">        sevenZipCompressor.ArchiveFormat = OutArchiveFormat.SevenZip;</span><br><span class="line">        <span class="comment">//是否保持目录结构(默认为true)</span></span><br><span class="line">        sevenZipCompressor.DirectoryStructure = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//是否包含空目录(默认true)  </span></span><br><span class="line">        sevenZipCompressor.IncludeEmptyDirectories = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//压缩目录时是否使用顶层目录(默认false)  </span></span><br><span class="line">        sevenZipCompressor.PreserveDirectoryRoot = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//加密7z头(默认false)  </span></span><br><span class="line">        sevenZipCompressor.EncryptHeaders = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//文件加密算法</span></span><br><span class="line">        sevenZipCompressor.ZipEncryptionMethod = ZipEncryptionMethod.ZipCrypto;</span><br><span class="line">        <span class="comment">//尽快压缩(不会触发*Started事件,仅触发*Finished事件)  </span></span><br><span class="line">        sevenZipCompressor.FastCompression = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//压缩文件</span></span><br><span class="line">        sevenZipCompressor.CompressFilesEncrypted(strZipPath, strPassword, fileFullNames);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 压缩7-ZIP文件夹</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strZipPath&quot;&gt;</span>ZIP压缩文件夹<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strDirectory&quot;&gt;</span>需要压缩的文件夹<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">Compression7ZipDirectory</span>(<span class="params"><span class="built_in">string</span> strZipPath, <span class="built_in">string</span> strDirectory</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//动态链接7ZIP类库</span></span><br><span class="line">        SetLibraryPath7z();</span><br><span class="line">        <span class="comment">//默认格式为(*.7z)</span></span><br><span class="line">        strZipPath = Path.ChangeExtension(strZipPath, <span class="string">&quot;7z&quot;</span>);</span><br><span class="line">        <span class="comment">//压缩7-ZIP文件</span></span><br><span class="line">        SevenZipCompressor sevenZipCompressor = <span class="keyword">new</span> SevenZipCompressor();</span><br><span class="line">        <span class="comment">//压缩等级(默认正常值)</span></span><br><span class="line">        sevenZipCompressor.CompressionLevel = CompressionLevel.Normal;</span><br><span class="line">        <span class="comment">//压缩格式(默认7z压缩)</span></span><br><span class="line">        sevenZipCompressor.ArchiveFormat = OutArchiveFormat.SevenZip;</span><br><span class="line">        <span class="comment">//是否保持目录结构(默认为true)</span></span><br><span class="line">        sevenZipCompressor.DirectoryStructure = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//是否包含空目录(默认true)  </span></span><br><span class="line">        sevenZipCompressor.IncludeEmptyDirectories = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//压缩目录时是否使用顶层目录(默认false)  </span></span><br><span class="line">        sevenZipCompressor.PreserveDirectoryRoot = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//加密7z头(默认false)  </span></span><br><span class="line">        sevenZipCompressor.EncryptHeaders = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//文件加密算法</span></span><br><span class="line">        sevenZipCompressor.ZipEncryptionMethod = ZipEncryptionMethod.ZipCrypto;</span><br><span class="line">        <span class="comment">//尽快压缩(不会触发*Started事件,仅触发*Finished事件)  </span></span><br><span class="line">        sevenZipCompressor.FastCompression = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//压缩文件</span></span><br><span class="line">        sevenZipCompressor.CompressDirectory(strDirectory, strZipPath);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 压缩7-ZIP文件夹(加密)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strZipPath&quot;&gt;</span>ZIP压缩文件夹<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strPassword&quot;&gt;</span>压缩文件密码<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strDirectory&quot;&gt;</span>需要压缩的文件夹<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">Compression7ZipDirectory</span>(<span class="params"><span class="built_in">string</span> strZipPath, <span class="built_in">string</span> strPassword, <span class="built_in">string</span> strDirectory</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//动态链接7ZIP类库</span></span><br><span class="line">        SetLibraryPath7z();</span><br><span class="line">        <span class="comment">//默认格式为(*.7z)</span></span><br><span class="line">        strZipPath = Path.ChangeExtension(strZipPath, <span class="string">&quot;7z&quot;</span>);</span><br><span class="line">        <span class="comment">//压缩7-ZIP文件</span></span><br><span class="line">        SevenZipCompressor sevenZipCompressor = <span class="keyword">new</span> SevenZipCompressor();</span><br><span class="line">        <span class="comment">//压缩等级(默认正常值)</span></span><br><span class="line">        sevenZipCompressor.CompressionLevel = CompressionLevel.Normal;</span><br><span class="line">        <span class="comment">//压缩格式(默认7z压缩)</span></span><br><span class="line">        sevenZipCompressor.ArchiveFormat = OutArchiveFormat.SevenZip;</span><br><span class="line">        <span class="comment">//是否保持目录结构(默认为true)</span></span><br><span class="line">        sevenZipCompressor.DirectoryStructure = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//是否包含空目录(默认true)  </span></span><br><span class="line">        sevenZipCompressor.IncludeEmptyDirectories = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//压缩目录时是否使用顶层目录(默认false)  </span></span><br><span class="line">        sevenZipCompressor.PreserveDirectoryRoot = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//加密7z头(默认false)  </span></span><br><span class="line">        sevenZipCompressor.EncryptHeaders = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//文件加密算法</span></span><br><span class="line">        sevenZipCompressor.ZipEncryptionMethod = ZipEncryptionMethod.ZipCrypto;</span><br><span class="line">        <span class="comment">//尽快压缩(不会触发*Started事件,仅触发*Finished事件)  </span></span><br><span class="line">        sevenZipCompressor.FastCompression = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//压缩文件</span></span><br><span class="line">        sevenZipCompressor.CompressDirectory(strDirectory, strZipPath, strPassword);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 解压缩7-ZIP文件</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strZipPath&quot;&gt;</span>ZIP压缩文件保存位置<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strDeCompressionPath&quot;&gt;</span>需要解压到的指定位置<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">DeCompression7Zip</span>(<span class="params"><span class="built_in">string</span> strZipPath, <span class="built_in">string</span> strDeCompressionPath</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strZipPath) || !File.Exists(strZipPath))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//动态链接7ZIP类库</span></span><br><span class="line">        SetLibraryPath7z();</span><br><span class="line">        <span class="comment">//创建目录</span></span><br><span class="line">        <span class="keyword">if</span> (!Directory.Exists(strDeCompressionPath))</span><br><span class="line">        &#123;</span><br><span class="line">            Directory.CreateDirectory(strDeCompressionPath);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//解压数据</span></span><br><span class="line">        SevenZipExtractor sevenZipExtractor = <span class="keyword">new</span> SevenZipExtractor(strZipPath);</span><br><span class="line">        <span class="keyword">foreach</span> (ArchiveFileInfo itemArchiveFileInfo <span class="keyword">in</span> sevenZipExtractor.ArchiveFileData)</span><br><span class="line">        &#123;</span><br><span class="line">            sevenZipExtractor.ExtractFiles(strDeCompressionPath, itemArchiveFileInfo.Index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 解压缩7-ZIP文件(加密)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strZipPath&quot;&gt;</span>ZIP压缩文件保存位置<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strDeCompressionPath&quot;&gt;</span>需要解压到的指定位置<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strPassword&quot;&gt;</span>压缩文件密码<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">DeCompression7Zip</span>(<span class="params"><span class="built_in">string</span> strZipPath, <span class="built_in">string</span> strDeCompressionPath, <span class="built_in">string</span> strPassword</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strZipPath) || !File.Exists(strZipPath))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//动态链接7ZIP类库</span></span><br><span class="line">        SetLibraryPath7z();</span><br><span class="line">        <span class="comment">//创建目录</span></span><br><span class="line">        <span class="keyword">if</span> (!Directory.Exists(strDeCompressionPath))</span><br><span class="line">        &#123;</span><br><span class="line">            Directory.CreateDirectory(strDeCompressionPath);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//解压数据</span></span><br><span class="line">        SevenZipExtractor sevenZipExtractor = <span class="keyword">new</span> SevenZipExtractor(strZipPath, strPassword);</span><br><span class="line">        <span class="keyword">foreach</span> (ArchiveFileInfo itemArchiveFileInfo <span class="keyword">in</span> sevenZipExtractor.ArchiveFileData)</span><br><span class="line">        &#123;</span><br><span class="line">            sevenZipExtractor.ExtractFiles(strDeCompressionPath, itemArchiveFileInfo.Index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="GZIP："><a href="#GZIP：" class="headerlink" title="GZIP："></a>GZIP：</h5><p><a href="https://github.com/Sadness96/Sadness/blob/master/Code/Helper/FileIO.Helper/ZIP/GZIPHelper.cs">GZIPHelper</a> 引用 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.io.compression.gzipstream?redirectedfrom=MSDN&amp;view=netframework-4.8">System.IO.Compression.GZipStream</a> 库<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 压缩GZIP数据</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;bytesSourceData&quot;&gt;</span>源数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>压缩数据<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] <span class="title">CompressionGZIP</span>(<span class="params"><span class="built_in">byte</span>[] bytesSourceData</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">        GZipStream compressedzipStream = <span class="keyword">new</span> GZipStream(memoryStream, CompressionMode.Compress, <span class="literal">true</span>);</span><br><span class="line">        compressedzipStream.Write(bytesSourceData, <span class="number">0</span>, bytesSourceData.Length);</span><br><span class="line">        compressedzipStream.Close();</span><br><span class="line">        <span class="keyword">return</span> memoryStream.ToArray();</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 解压缩GZIP数据</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;bytesSourceData&quot;&gt;</span>源数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>解压缩数据<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] <span class="title">DeCompressionGZIP</span>(<span class="params"><span class="built_in">byte</span>[] bytesSourceData</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream(bytesSourceData);</span><br><span class="line">        GZipStream compressedzipStream = <span class="keyword">new</span> GZipStream(memoryStream, CompressionMode.Decompress);</span><br><span class="line">        MemoryStream outBuffer = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">        <span class="built_in">byte</span>[] block = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> bytesRead = compressedzipStream.Read(block, <span class="number">0</span>, block.Length);</span><br><span class="line">            <span class="keyword">if</span> (bytesRead &lt;= <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                outBuffer.Write(block, <span class="number">0</span>, bytesRead);</span><br><span class="line">        &#125;</span><br><span class="line">        compressedzipStream.Close();</span><br><span class="line">        <span class="keyword">return</span> outBuffer.ToArray();</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 压缩String类型GZIP数据</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strSourceData&quot;&gt;</span>源数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>压缩数据(Base64)<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">CompressionStringGZIP</span>(<span class="params"><span class="built_in">string</span> strSourceData</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strSourceData))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">byte</span>[] rawData = Encoding.UTF8.GetBytes(strSourceData);</span><br><span class="line">            <span class="built_in">byte</span>[] zippedData = CompressionGZIP(rawData);</span><br><span class="line">            <span class="keyword">return</span> Convert.ToBase64String(zippedData);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 解压缩String类型GZIP数据</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strSourceData&quot;&gt;</span>源数据(Base64)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>解压缩数据<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">DeCompressionStringGZIP</span>(<span class="params"><span class="built_in">string</span> strSourceData</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strSourceData))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">byte</span>[] zippedData = Convert.FromBase64String(strSourceData.ToString());</span><br><span class="line">            <span class="keyword">return</span> Encoding.UTF8.GetString(DeCompressionGZIP(zippedData));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>helper</tag>
        <tag>zip</tag>
        <tag>7z</tag>
        <tag>gzip</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机硬件维修检测</title>
    <url>/blog/2020/02/07/repair-ComputerHardware/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/repair-ComputerHardware/mainboard.jpg"/></p>
<span id="more"></span>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在上大学之前，曾在百脑汇电子城工作过大半年，有维修过电脑、打印机、监控摄像头，时隔多年，这依然使我受益匪浅，在此记录一些硬件故障排除的经验，以及一些检测软件的使用。以组装台式机为主，部分介绍笔记本。</p>
<h3 id="电脑构成以及可能存在的问题"><a href="#电脑构成以及可能存在的问题" class="headerlink" title="电脑构成以及可能存在的问题"></a>电脑构成以及可能存在的问题</h3><table>
<thead>
<tr>
<th>计算机硬件</th>
<th>是否必须</th>
<th>可能存在的问题</th>
</tr>
</thead>
<tbody>
<tr>
<td>机箱</td>
<td>可选</td>
<td><a href="#机箱内部静电导致无法开机">内部静电导致无法开机</a>、<a href="#机箱前面板接主板容易接错">机箱前面板接主板容易接错</a></td>
</tr>
<tr>
<td>电源</td>
<td>是</td>
<td><a href="#风扇转速不够导致声音大或过热短路">风扇转速不够导致声音大或过热短路</a>、<a href="#电源不工作">电源不工作</a></td>
</tr>
<tr>
<td>主板</td>
<td>是</td>
<td><a href="#主板南桥北桥芯片过热">主板南桥北桥芯片过热</a>、<a href="#电容鼓包等导致运行中断电或无法开机">电容鼓包等导致运行中断电或无法开机</a>、<a href="#按开机键无反应">按开机键无反应</a>、<a href="#无法从优盘启动">无法从U盘启动</a></td>
</tr>
<tr>
<td>CPU</td>
<td>是</td>
<td><a href="#CPU完全不工作">CPU 完全不工作(可能性较低并且不能修复)</a></td>
</tr>
<tr>
<td>内存</td>
<td>是</td>
<td>闪存颗粒损坏(不建议维修)、<a href="#接口虚连">接触不良导致无法开机(参考：接口虚连</a>)</td>
</tr>
<tr>
<td>硬盘</td>
<td>是</td>
<td><a href="#机械硬盘坏道导致数据丢失或电脑死机">(机械)硬盘坏道导致数据丢失或电脑死机</a>、<a href="#机械硬盘主控板损坏">(机械)硬盘主控板损坏</a>、<a href="#固态硬盘写入次数达到上限">(固态)硬盘写入次数达到上限</a>、(固态)硬盘内存颗粒损坏(不建议维修)、<a href="#系统引导错误无法进入系统">系统引导错误无法进入系统</a>、<a href="#SATA线损坏导致无法读取磁盘">SATA 线损坏导致无法读取磁盘</a>、<a href="#FAT32磁盘格式单个文件最大只能支持4GB">FAT32 磁盘格式单个文件最大只能支持4GB</a></td>
</tr>
<tr>
<td>显卡</td>
<td>可选(板载)</td>
<td><a href="#电容鼓包等导致运行中断电或无法开机">电容鼓包(参考：电容鼓包等导致运行中断电或无法开机)</a>、<a href="#接口虚连">接触不良导致无法开机(参考：接口虚连</a>)</td>
</tr>
<tr>
<td>散热器</td>
<td>是</td>
<td><a href="#风扇转速不够导致声音大或过热短路">缺少硅脂或风扇转速不够导致声音大或过热短路</a></td>
</tr>
<tr>
<td>光驱</td>
<td>可选</td>
<td><a href="#标记为RW的光驱才可以刻录光盘">标记为 RW 的光驱才可以刻录光盘</a></td>
</tr>
<tr>
<td>声卡</td>
<td>可选(板载)</td>
<td><a href="#由于接口错误或系统设置导致的麦克风或音响失效">由于接口错误或系统设置导致的麦克风或音响失效</a></td>
</tr>
<tr>
<td>网卡</td>
<td>可选(板载)</td>
<td><a href="#掐网线及检测">网线损坏</a>、<a href="#部分系统安装不包含网卡驱动">部分系统安装不包含网卡驱动</a>、配置问题导致的网络无法连接</td>
</tr>
<tr>
<td>显示器</td>
<td>可选(远程)</td>
<td>线材损坏(VGA/DVI/HDMI/DP)无法显示、<a href="#高压板或驱动板损坏">高压板或驱动板损坏</a>、<a href="#亮点或屏线">亮点或屏线(修复概率较低)</a></td>
</tr>
<tr>
<td>键盘</td>
<td>是</td>
<td><a href="#维修建议使用PS/2接口">维修建议使用 PS/2 接口</a>、<a href="#机械键盘轴脱焊">(机械)键盘轴脱焊</a></td>
</tr>
<tr>
<td>鼠标</td>
<td>可选(极客)</td>
<td><a href="#鼠标连键">鼠标连键(单击变双击)</a></td>
</tr>
<tr>
<td>音响</td>
<td>可选(耳麦)</td>
<td><a href="#外置USB供电的音响出现杂音">外置 USB 供电的音响出现杂音</a></td>
</tr>
<tr>
<td>打印机</td>
<td>可选</td>
<td>驱动问题导致无法使用、(针式)打印机色带打卷或断裂、(喷墨式)打印机喷头堵塞或需更换墨盒、(激光)打印机卡纸重影</td>
</tr>
<tr>
<td>游戏手柄</td>
<td>可选</td>
<td><a href="#游戏手柄连接数据线虚连">连接数据线虚连</a></td>
</tr>
</tbody>
</table>
<h3 id="运行中故障-软件或硬件导致"><a href="#运行中故障-软件或硬件导致" class="headerlink" title="运行中故障(软件或硬件导致)"></a>运行中故障(软件或硬件导致)</h3><table>
<thead>
<tr>
<th>问题状况</th>
<th>可能存在的问题</th>
</tr>
</thead>
<tbody>
<tr>
<td>移动电脑后无法开机</td>
<td>搬运导致的 PCI 或内存接口松动，参考：<a href="#按开机键无反应">按开机键无反应</a></td>
</tr>
<tr>
<td>电脑运行一段时间后突然关机</td>
<td><a href="#电脑温度过高">温度过高</a>、<a href="#电脑电压不稳">电压不稳</a></td>
</tr>
<tr>
<td>电脑运行一段时间后突然蓝屏</td>
<td><a href="#机械硬盘坏道导致数据丢失或电脑死机">磁盘出现坏道</a>、<a href="#系统软件或应用软件导致驱动异常">系统软件或应用软件导致驱动异常</a></td>
</tr>
<tr>
<td>鼠标键盘操作明显延迟</td>
<td>CPU/内存/磁盘占用过高导致</td>
</tr>
<tr>
<td>屏幕花屏或色彩异常</td>
<td>线材松动或损坏(VGA/DVI/HDMI/DP)、<a href="#接口虚连">显卡接触不良</a></td>
</tr>
</tbody>
</table>
<h3 id="系统软件或应用软件相关推荐"><a href="#系统软件或应用软件相关推荐" class="headerlink" title="系统软件或应用软件相关推荐"></a>系统软件或应用软件相关推荐</h3><table>
<thead>
<tr>
<th>软件功能</th>
<th>推荐软件</th>
<th>简介</th>
</tr>
</thead>
<tbody>
<tr>
<td>U盘启动(WinPE)</td>
<td><a href="http://rufus.ie/">Rufus</a>、 <a href="https://www.laomaotao.net/">老毛桃</a>、<a href="http://www.winbaicai.com/">大白菜</a></td>
<td>通过U盘启动提供的 WinPE 包含很多有用的工具，比如：<a href="http://www.diskgenius.cn/">DiskGenius 分区工具</a>、<a href="https://baike.baidu.com/item/ghost/847?fr=aladdin">Ghost</a></td>
</tr>
<tr>
<td>操作系统</td>
<td>Windows、Linux</td>
<td>现大部分装电脑都会选择 Windows(原版建议通过<a href="https://msdn.itellyou.cn/">itellyou</a>下载，Ghost 版建议使用<a href="http://www.deepinghost.com/">Deepin</a>或<a href="http://www.ylmf888.com/">雨林木风</a>)、部分企业或个人学习选择 Linux(建议使用<a href="https://ubuntu.com/download">Ubuntu</a>、<a href="https://www.centos.org/">CentOS</a>、<a href="https://www.redhat.com/en">Red Hat</a>、<a href="https://www.debian.org/">Debian</a>)、MAC(黑苹果请移步到社区论坛吧)</td>
</tr>
<tr>
<td>系统还原</td>
<td><a href="https://www.bingdianhuanyuan.cn/">冰点还原</a></td>
<td>重启电脑还原至初始状态，避免病毒入侵，广泛用于银行学校宾馆，除了硬件 PCI 接口的还原卡之外，用软件还原也是不错的选择</td>
</tr>
<tr>
<td>磁盘分区/坏道检测/数据恢复</td>
<td><a href="http://www.diskgenius.cn/">DiskGenius</a>、<a href="https://baike.baidu.com/item/MHDD/2755765?fr=aladdin">MHDD</a>、<a href="https://www.easyrecoverychina.com/">EasyRecovery</a></td>
<td>1.DiskGenius 是一个常用的分区、坏道检测以及数据恢复的工具。<br />2.MHDD 是一个古老的坏道检测工具，适用于老式 AMD 型机器坏道检测，但是其工具强大可以抹除坏道，现 U 盘启动 DOS 工具箱包含<br />3. EasyRecovery 更专业的数据恢复厂商</td>
</tr>
<tr>
<td>光盘刻录</td>
<td><a href="https://cn.ultraiso.net/">UltraISO</a>、<a href="https://www.nero.com/chs/">Nero</a></td>
<td>个人觉着重要的数据刻录在光盘里还是蛮棒的</td>
</tr>
<tr>
<td>副本分屏</td>
<td><a href="https://github.com/LorenzCK/OnTopReplica">OnTopReplica</a></td>
<td>这超过了维修的范围，但还是推荐一下，一个打游戏时可以优雅的把小地图投到另一块屏幕上(放大至全屏)</td>
</tr>
<tr>
<td>驱动安装</td>
<td><a href="https://www.ludashi.com/">鲁大师</a>、<a href="http://www.drivergenius.com/">驱动精灵</a>、<a href="https://www.160.com/">驱动人生</a>、<a href="https://www.itsk.com/">万能驱动</a></td>
<td>除了官网下载指定型号的驱动外，选择国内厂商制作的一键安装也不错。<br />1.鲁大师(娱乐大师、鲁大姐)是最常见的驱动安装软件，压力检测也可以很好的测试电脑问题以及…没什么太大用的跑分<br />2.驱动精灵、驱动人生 特色在于可以下载带网卡驱动版，有些时候系统装完没有安装网卡驱动，需要联网才能下载网卡驱动，没有网卡驱动又连不上网，陷入死循环<br />3.万能驱动是 IT 天空制作的整合版驱动包，文件较大，一般 Ghost 系统中集成的就是万能驱动，另外 IT 天空提供了完整的工具程序，直接 Ghost 出一个自己的系统也不错哦</td>
</tr>
<tr>
<td>测试软件</td>
<td><a href="https://www.3dmark.com/">3DMark</a>、<a href="http://www.jens-hartmann.at/Fritzmarks/">FritzChessBenchmark</a>、<a href="https://geeks3d.com/furmark/">FurMark</a>、<a href="https://benchmark.unigine.com/heaven?lang=en">Unigine Heaven</a>、<a href="https://crystalmark.info/en/software/crystaldiskmark/">CrystalDiskMark</a></td>
<td>1.3DMark 测试显卡游戏性能的专业软件<br />2.FritzChessBenchmark 国际象棋算法测试 CPU 运算速度<br />3. FurMark 知名的 GPU 拷机压力测试软件<br />4. Unigine Heaven 同样是知名的性能稳定测试软件<br />5.知名的磁盘读写基准测试软件</td>
</tr>
</tbody>
</table>
<h3 id="维修"><a href="#维修" class="headerlink" title="维修"></a>维修</h3><h4 id="维修前建议准备"><a href="#维修前建议准备" class="headerlink" title="维修前建议准备"></a>维修前建议准备</h4><p>1.各种型号螺丝刀<br>2.条件允许的情况下准备测试机(能够正常运行的低配零件)，用于维修时替换部分可用零件检测。<br>3.主板诊断卡<br>4.U盘或光盘(包含启动项和系统)<br>5.电烙铁、焊锡、焊油、匹配型号的电容等零件、电工万能表<br>6.网线钳、水晶头、网线、网线测线仪</p>
<p><span id="机箱内部静电导致无法开机"><span/></p>
<h4 id="机箱内部静电导致无法开机"><a href="#机箱内部静电导致无法开机" class="headerlink" title="机箱内部静电导致无法开机"></a>机箱内部静电导致无法开机</h4><p>有遇到过几次这样的情况：电脑无法开机，短接主板开关灯不亮风扇不转，主板诊断卡不显示数字，主板上不存在明显损坏(鼓电容等)，重新插拔内存以及 PCI 接口设备后无明显改善，短接电源却可以使电源正常工作，尝试将所有零部件取出放在桌子上可以正常运行，应该是机箱设计缺陷或太多灰尘导致主板短路无法运行，全部拆出来清理灰尘即可。</p>
<p><span id="机箱前面板接主板容易接错"><span/></p>
<h4 id="机箱前面板接主板容易接错"><a href="#机箱前面板接主板容易接错" class="headerlink" title="机箱前面板接主板容易接错"></a>机箱前面板接主板容易接错</h4><p>机箱的前面板都会有一些功能型接线，常见的有音频、USB/SD、电源开关/复位需要对应的接在主板的接口上(通常是下方)，每种主板的接口顺序和位置不一样，建议查看主板上标记的缩写，或根据型号查询使用手册。<br>举例我现在使用的主板是 ASUS PRIME Z390-A<br><img src="https://sadness96.github.io/images/blog/repair-ComputerHardware/AsusPrimeZ390-A.png"/></p>
<p><span id="电源不工作"><span/></p>
<h4 id="电源不工作"><a href="#电源不工作" class="headerlink" title="电源不工作"></a>电源不工作</h4><p>1.确认其他硬件正常后无法通过主板开关运行电源，可尝试通过短路电源 ATX 24 PIN 接线的 PS-ON 与 COM 尝试启动电源。<br><img src="https://sadness96.github.io/images/blog/repair-ComputerHardware/Atx24Pin.png"/><br>2.尝试更换 220V 接入电源线(电脑通用三口品字尾电源线，实在没有多余可以找找身边电饭锅)<br>3.如果是内部高压滤波电容损坏或变压器损坏，不建议维修，想动手尝试的可以玩一玩。</p>
<p><span id="风扇转速不够导致声音大或过热短路"><span/></p>
<h4 id="风扇转速不够导致声音大或过热短路"><a href="#风扇转速不够导致声音大或过热短路" class="headerlink" title="风扇转速不够导致声音大或过热短路"></a>风扇转速不够导致声音大或过热短路</h4><p>目前大部分设备还避免不了使用风冷散热，使用过久以后会导致积灰严重，噪音较大或没有良好散热后导致计算机突然保护断电。<br>1.拆出风扇清理灰尘、可适当涂抹润滑油。<br>2.直接更换相同型号风扇部件。<br>3.CPU 由于缺少硅脂也会出现过热保护断电情况。</p>
<p><span id="主板南桥北桥芯片过热"><span/></p>
<h4 id="主板南桥北桥芯片过热"><a href="#主板南桥北桥芯片过热" class="headerlink" title="主板南桥北桥芯片过热"></a>主板南桥北桥芯片过热</h4><p>1.如果运行时突然保护断电，可尝试触摸桥芯片是否过热，如果没有影响到基础硬件使用，可尝试在桥芯片上涂抹硅脂然后贴上一片铝制散热片。<br>2.如果无法开机或影响其他硬件工作且桥芯片过热，需要更换桥芯片才可以，通常桥芯片为 <a href="https://baike.baidu.com/item/BGA%E5%B0%81%E8%A3%85/5900329?fr=aladdin">BGA 封装</a>，除了购买到型号匹配的芯片外(通常电脑店都是用废板上拆一个同型号的)，还需要准备热风枪或 <a href="https://baike.baidu.com/item/BGA%E7%84%8A%E5%8F%B0/9588841?fr=aladdin">BGA 焊台</a>(芯片级维修存在很大风险，救活了赚不少，救不活赔个芯片钱还有时间)。</p>
<p><span id="电容鼓包等导致运行中断电或无法开机"><span/></p>
<h4 id="电容鼓包等导致运行中断电或无法开机"><a href="#电容鼓包等导致运行中断电或无法开机" class="headerlink" title="电容鼓包等导致运行中断电或无法开机"></a>电容鼓包等导致运行中断电或无法开机</h4><p>电容鼓包是主板上比较常见的问题，大部分情况更换电容可以修复好，但是也难免有出现隐藏的其他问题导致更换完部件效果，下图是一个比较常见的鼓电容情况，更换同型号电容即可。<br><img src="https://sadness96.github.io/images/blog/repair-ComputerHardware/Capacitance.png"/></p>
<p><span id="按开机键无反应"><span/></p>
<h4 id="按开机键无反应"><a href="#按开机键无反应" class="headerlink" title="按开机键无反应"></a>按开机键无反应</h4><p>有时难免遇到接通电源后按开机键电脑无响应，逐步排除<br>1.机箱前面板按钮或连接线出现问题，尝试使用短接主板上的开关启动，以主板 ASUS PRIME Z390-A 为例：短接 PWRSW<br><img src="https://sadness96.github.io/images/blog/repair-ComputerHardware/AsusPrimeZ390-A.png"/></p>
<p>2.如依旧无法点亮机器依次更换电源，主板等主要零件测试。</p>
<p>如果按开机键后点亮机器，但是短时间内未进系统再次关机，逐步排除<br>1.如果有主板诊断卡，可插入诊断卡开机检查故障诊断码检测对应的硬件设备。通常来说两位诊断卡会提示大概错误如下，详细错误请查询购买诊断卡说明书。</p>
<table>
<thead>
<tr>
<th>故障代码</th>
<th>故障位置</th>
</tr>
</thead>
<tbody>
<tr>
<td>FF、00、C0、D0、CF、F1</td>
<td>CPU 未通过</td>
</tr>
<tr>
<td>C1、C6、C3、D3、D4、D6、D8、B0、A7、E1</td>
<td>内存未通过</td>
</tr>
<tr>
<td>24、25、26、01、0A、0B、2A、2B、31</td>
<td>显卡未通过</td>
</tr>
</tbody>
</table>
<p>2.如手头没有诊断卡，尝试重新插拔 PCI 接口上的设备和内存，参考<a href="#接口虚连">接口虚连</a>，减少至最简零件数启动，通过替换配件检测故障。</p>
<p><span id="无法从优盘启动"><span/></p>
<h4 id="无法从U盘启动"><a href="#无法从U盘启动" class="headerlink" title="无法从U盘启动"></a>无法从U盘启动</h4><p>对于维修人员来讲，排除所有硬件问题后，重装系统就可以做最后的收尾了，但是对于市面上各式各样的 U 盘来说，主板经常存在无法识别的情况，如果 U 盘作为系统盘的话，购买时优先考虑与主板类似时间出厂的产品，匹配 USB 标准(v1.1/v2.0/v3.0)，WinPE 推荐使用与主板出厂时间相近的镜像(<a href="https://www.laomaotao.net/">老毛桃</a>、<a href="http://www.winbaicai.com/">大白菜</a>)，选择与主板设置匹配的启动方式(BIOS/UEFI)，如果依旧无法启动，建议把系统镜像以 ISO 光盘的方式写入到 U 盘中。<br>以下记录各厂商进入 BIOS 的快捷键：</p>
<table>
<thead>
<tr>
<th>组装机主板</th>
<th></th>
<th>品牌笔记本</th>
<th></th>
<th>品牌台式机</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>主板品牌</td>
<td>启动按键</td>
<td>笔记本品牌</td>
<td>启动按键</td>
<td>台式机品牌</td>
<td>启动按键</td>
</tr>
<tr>
<td>华硕主板</td>
<td>F8</td>
<td>联想笔记本</td>
<td>F12</td>
<td>联想台式机</td>
<td>F12</td>
</tr>
<tr>
<td>技嘉主板</td>
<td>F12</td>
<td>弘基笔记本</td>
<td>F12</td>
<td>惠普台式机</td>
<td>F12</td>
</tr>
<tr>
<td>微星主板</td>
<td>F11</td>
<td>华硕笔记本</td>
<td>ESC</td>
<td>宏基台式机</td>
<td>F12</td>
</tr>
<tr>
<td>映泰主板</td>
<td>F9</td>
<td>惠普笔记本</td>
<td>F9</td>
<td>戴尔台式机</td>
<td>ESC</td>
</tr>
<tr>
<td>梅捷主板</td>
<td>ESC或F12</td>
<td>联想Thinkpad</td>
<td>F12</td>
<td>神舟台式机</td>
<td>F12</td>
</tr>
<tr>
<td>七彩虹主板</td>
<td>ESC或F11</td>
<td>戴尔笔记本</td>
<td>F12</td>
<td>华硕台式机</td>
<td>F8</td>
</tr>
<tr>
<td>华擎主板</td>
<td>F11</td>
<td>神舟笔记本</td>
<td>F12</td>
<td>方正台式机</td>
<td>F12</td>
</tr>
<tr>
<td>斯巴达主板</td>
<td>ESC</td>
<td>东芝笔记本</td>
<td>F12</td>
<td>清华同方台式机</td>
<td>F12</td>
</tr>
<tr>
<td>昂达主板</td>
<td>F11</td>
<td>三星笔记本</td>
<td>F12</td>
<td>海尔台式机</td>
<td>F12</td>
</tr>
<tr>
<td>双敏主板</td>
<td>ESC</td>
<td>IBM笔记本</td>
<td>F12</td>
<td>明基台式机</td>
<td>F8</td>
</tr>
<tr>
<td>翔升主板</td>
<td>F10</td>
<td>富士通笔记本</td>
<td>F12</td>
</tr>
<tr>
<td>精英主板</td>
<td>ESC或F11</td>
<td>海尔笔记本</td>
<td>F12</td>
</tr>
<tr>
<td>冠盟主板</td>
<td>F11或F12</td>
<td>方正笔记本</td>
<td>F12</td>
</tr>
<tr>
<td>富士康主板</td>
<td>ESC或F12</td>
<td>清华同方笔记本</td>
<td>F12</td>
</tr>
<tr>
<td>顶星主板</td>
<td>F11或F12</td>
<td>微星笔记本</td>
<td>F11</td>
</tr>
<tr>
<td>铭瑄主板</td>
<td>ESC</td>
<td>明基笔记本</td>
<td>F9</td>
</tr>
<tr>
<td>盈通主板</td>
<td>F8</td>
<td>技嘉笔记本</td>
<td>F12</td>
</tr>
<tr>
<td>捷波主板</td>
<td>ESC</td>
<td>Gateway笔记本</td>
<td>F12</td>
</tr>
<tr>
<td>Intel主板</td>
<td>F12</td>
<td>eMachines笔记本</td>
<td>F12</td>
</tr>
<tr>
<td>杰微主板</td>
<td>ESC或F8</td>
<td>索尼笔记本</td>
<td>ESC</td>
</tr>
<tr>
<td>致铭主板</td>
<td>F12</td>
</tr>
<tr>
<td>磐英主板</td>
<td>ESC</td>
</tr>
<tr>
<td>磐正主板</td>
<td>ESC</td>
</tr>
<tr>
<td>冠铭主板</td>
<td>F9</td>
</tr>
</tbody>
</table>
<p><span id="CPU完全不工作"><span/></p>
<h4 id="CPU-完全不工作"><a href="#CPU-完全不工作" class="headerlink" title="CPU 完全不工作"></a>CPU 完全不工作</h4><p>由于 CPU 的做工及其技术导致无法修复，排除 CPU 损坏，尝试更换相同针脚的 CPU 测试。<br>扔了怪可惜的，做成项链还是蛮不错的(上班路上偷拍)<br><img src="https://sadness96.github.io/images/blog/repair-ComputerHardware/CPUNecklace.jpg"/></p>
<p><span id="接口虚连"><span/></p>
<h4 id="PCI-E-接口设备与内存接口氧化虚连"><a href="#PCI-E-接口设备与内存接口氧化虚连" class="headerlink" title="PCI-E 接口设备与内存接口氧化虚连"></a>PCI-E 接口设备与内存接口氧化虚连</h4><p>电脑无法开机最常见的问题之一，由于 PCI-E 接口设备(例如显卡)和内存氧化或颠簸导致接触不良的虚连，使用主板诊断卡可以检测出具体故障的位置，参考<a href="#按开机键无反应">按开机键无反应</a>中故障代码部分。拔出设备使用橡皮擦擦拭金手指部分(解决氧化问题)，重新插好尝试，如问题没有改善，尝试插在其它插槽尝试，或在测试机中测试硬件是否损坏。</p>
<p><span id="机械硬盘坏道导致数据丢失或电脑死机"><span/></p>
<h4 id="机械-硬盘坏道导致数据丢失或电脑死机"><a href="#机械-硬盘坏道导致数据丢失或电脑死机" class="headerlink" title="(机械)硬盘坏道导致数据丢失或电脑死机"></a>(机械)硬盘坏道导致数据丢失或电脑死机</h4><p>机械硬盘比较常见的问题就是磁盘出现坏道，其实一块刚出厂全新的硬盘或多或少的也存在坏道，不过会被厂商隐藏在P表和G表中，使用时根本不会有任何察觉，但是用过一段时间之后硬盘中出现的新的坏道，就是一件麻烦事了，数据丢失可是头等大事，还会造成操作系统的不稳定。如果电脑经常出现一块分区中的数据损坏，或者操作系统异常死机或蓝屏，建议使用 <a href="http://www.diskgenius.cn/">DiskGenius</a>、<a href="https://baike.baidu.com/item/MHDD/2755765?fr=aladdin">MHDD</a> 优先检查硬盘。</p>
<p><span id="机械硬盘主控板损坏"><span/></p>
<h4 id="机械-硬盘主控板损坏"><a href="#机械-硬盘主控板损坏" class="headerlink" title="(机械)硬盘主控板损坏"></a>(机械)硬盘主控板损坏</h4><p>机械硬盘主控盘是暴露在硬盘外面的一部分电路板，损坏少见却存在的情况，我没有直接购买到过主控板，店里工作时都是拿其它损坏的硬盘拆除部件替换尝试。如果没有办法找到相同型号的主控板就不要对修好硬盘抱有希望了，如果硬盘上有重要的数据，还是优先考虑恢复数据吧，由于硬盘已经无法正常运行，需要在无尘环境中拿出盘片放到其它硬盘中拷贝出数据。</p>
<p><span id="固态硬盘写入次数达到上限"><span/></p>
<h4 id="固态-硬盘写入次数达到上限"><a href="#固态-硬盘写入次数达到上限" class="headerlink" title="(固态)硬盘写入次数达到上限"></a>(固态)硬盘写入次数达到上限</h4><p>固态提供的飞速同时，就是拥有者写入次数上限的弊端，理论上来说正常使用可能其它硬件比固态先报废，但是我还是遇到过两次，体现为硬盘正常识别，原有的文件可以向外拷贝，但是却无法编辑内容或创建拷贝进新内容，相当于是一次性刻好的光盘，寿命到了无法修复，建议备份好重要文件，留作纪念或是销毁。</p>
<p><span id="系统引导错误无法进入系统"><span/></p>
<h4 id="系统引导错误无法进入系统"><a href="#系统引导错误无法进入系统" class="headerlink" title="系统引导错误无法进入系统"></a>系统引导错误无法进入系统</h4><p>在装系统时，或在安装双系统或多系统时或是受病毒感染，可能会存在开机时找不到磁盘引导，首先在 BIOS 中确认可以识别到硬盘，然后通过 U盘进入 WinPE 进行修复，可以使用 <a href="http://www.diskgenius.cn/">DiskGenius</a> 工具重建主引导记录(重建MBR或重建GUID)，双系统或多系统可使用 WinPE 中的引导修复工具。</p>
<p><span id="SATA线损坏导致无法读取磁盘"><span/></p>
<h4 id="SATA-线损坏导致无法读取磁盘"><a href="#SATA-线损坏导致无法读取磁盘" class="headerlink" title="SATA 线损坏导致无法读取磁盘"></a>SATA 线损坏导致无法读取磁盘</h4><p>其实有时数据线比硬盘更容易损坏，曾经在店里干活的时候有这样一段插曲：我在五楼维修，一楼一位惠普的员工带来一对母女来修电脑，他初步检测是硬盘坏了，他跟师娘打了个招呼，这个任务就到我手里了，我首先拿来一块硬盘装好准备重装系统，但是 BIOS 依旧没有识别，顺手就换了一根新的线接上，硬盘识别了，我又把硬盘换回原来的内块，电脑正常运行没有问题，我决定跟师娘确定一下，说明是 SATA 线损坏了而已，其他的都没问题，但是师娘说人家惠普的员工带来的人，说好的换硬盘，就换了硬盘吧，顺便把线也给换掉了。</p>
<p><span id="FAT32磁盘格式单个文件最大只能支持4GB"><span/></p>
<h4 id="FAT32-磁盘格式单个文件最大只能支持4GB"><a href="#FAT32-磁盘格式单个文件最大只能支持4GB" class="headerlink" title="FAT32 磁盘格式单个文件最大只能支持4GB"></a>FAT32 磁盘格式单个文件最大只能支持4GB</h4><p>比较常见的问题，现在新出厂的 U盘或是较老的系统盘(一键四分区)等默认格式化类型还是 FAT32 ，但是由于该类型单个文件最大只能支持4GB，导致一些大文件无法保存，需要重新格式化分区类型为 NTFS。</p>
<p><span id="标记为RW的光驱才可以刻录光盘"><span/></p>
<h4 id="标记为-RW-的光驱才可以刻录光盘"><a href="#标记为-RW-的光驱才可以刻录光盘" class="headerlink" title="标记为 RW 的光驱才可以刻录光盘"></a>标记为 RW 的光驱才可以刻录光盘</h4><p>现在光盘在市面上比较少见了，但是在其它地方却有更大的用途，例如 <a href="https://www.playstation.com.cn/index.html">PlayStation</a>/<a href="https://www.xbox.com/zh-CN/">Xbox</a> 还依旧使用蓝光光盘，防盗版的效果还是很棒的！这里仅仅只是记录一下，并不是所有的光驱都可以刻录光盘，只有标记为 RW 的光驱才可以。</p>
<p><span id="由于接口错误或系统设置导致的麦克风或音响失效"><span/></p>
<h4 id="由于接口错误或系统设置导致的麦克风或音响失效"><a href="#由于接口错误或系统设置导致的麦克风或音响失效" class="headerlink" title="由于接口错误或系统设置导致的麦克风或音响失效"></a>由于接口错误或系统设置导致的麦克风或音响失效</h4><p>音频输入输出接口多用颜色区分<br>举例我现在使用的主板是 ASUS PRIME Z390-A<br><img src="https://sadness96.github.io/images/blog/repair-ComputerHardware/AsusPrimeZ390-A-Audio.png"/></p>
<p>若连接机箱前面板没有声音，检查机箱前面板 Audio 连接线是否正常连接主板上。<br>根据系统以及声卡不同检查对应驱动配置，例：<br><img src="https://sadness96.github.io/images/blog/repair-ComputerHardware/RealtekAudioControl.png"/></p>
<p><span id="掐网线及检测"><span/></p>
<h4 id="掐网线及检测"><a href="#掐网线及检测" class="headerlink" title="掐网线及检测"></a>掐网线及检测</h4><p>网线作为暴露在外部的线材，还是比较脆弱的，比如家里有一只喜欢拆家的小可爱！<br><img src="https://sadness96.github.io/images/blog/repair-ComputerHardware/IMG_20190306_191036.jpg"/></p>
<p><img src="https://sadness96.github.io/images/blog/repair-ComputerHardware/IMG_20181222_192946.jpg"/></p>
<p>常备一箱网线还是很有必要的，还需要准备网线钳、水晶头、网线测线仪<br>1.以 <a href="https://baike.baidu.com/item/RJ45/3401007?fr=aladdin">RJ45</a> 型网线插头的 T568B 线序制作<br><img src="https://sadness96.github.io/images/blog/repair-ComputerHardware/RJ45.png"/></p>
<p>2.使用网线测线仪检测顺序：百兆网线序 1.2.3.6 亮即为可以联网，千兆网线则需要 8 根线全亮<br><img src="https://sadness96.github.io/images/blog/repair-ComputerHardware/NetworkLineTester.png"/></p>
<p><span id="部分系统安装不包含网卡驱动"><span/></p>
<h4 id="部分系统安装不包含网卡驱动"><a href="#部分系统安装不包含网卡驱动" class="headerlink" title="部分系统安装不包含网卡驱动"></a>部分系统安装不包含网卡驱动</h4><p>较为经常出现的情况，Ghost 版本的系统镜像包含的驱动程序包无法驱动网卡，导致无法联网，驱动又需要联网才能安装，推荐提前在官网下载网卡驱动或下载带网卡版的<a href="http://www.drivergenius.com/">驱动精灵</a>、<a href="https://www.160.com/">驱动人生</a>或是更加完整的<a href="https://www.itsk.com/">万能驱动</a></p>
<p><span id="高压板或驱动板损坏"><span/></p>
<h4 id="高压板或驱动板损坏"><a href="#高压板或驱动板损坏" class="headerlink" title="高压板或驱动板损坏"></a>高压板或驱动板损坏</h4><p>液晶显示器不亮，常见的情况是高压板或驱动板损坏，高压板大部分有通用型号，驱动板尽可能找匹配的型号更换测试即可。<br><img src="https://sadness96.github.io/images/blog/repair-ComputerHardware/高压板.png"/></p>
<p><span id="亮点或屏线"><span/></p>
<h4 id="亮点或屏线"><a href="#亮点或屏线" class="headerlink" title="亮点或屏线"></a>亮点或屏线</h4><p>屏幕出现亮点或屏线是最糟糕不过的情况了，<a href="https://www.jscreenfix.com/">https://www.jscreenfix.com/</a> 网站提供了一种亮点的解决方案，但是我并没有成功过。</p>
<p><span id="维修建议使用PS/2接口"><span/></p>
<h4 id="维修建议使用-PS-2-接口"><a href="#维修建议使用-PS-2-接口" class="headerlink" title="维修建议使用 PS/2 接口"></a>维修建议使用 PS/2 接口</h4><p>虽然现在主流的外设都是 USB 接口，但是不得不说 PS/2 接口依旧很强大，很多机械键盘通过 PS/2 接口连接可以支持更多键无冲突，在维修的时候，有极个别主板在 BIOS 时不识别 USB 外设。</p>
<p><span id="机械键盘轴脱焊"><span/></p>
<h4 id="机械-键盘轴脱焊"><a href="#机械-键盘轴脱焊" class="headerlink" title="(机械)键盘轴脱焊"></a>(机械)键盘轴脱焊</h4><p>虽然说 Cherry 官网给出的理论寿命有5000万次，但是也难免有按到轴脱焊的情况，不妨重新焊一下吧。<br><img src="https://sadness96.github.io/images/blog/repair-ComputerHardware/20190607_150347.jpg"/></p>
<p><span id="鼠标连键"><span/></p>
<h4 id="鼠标连键-单击变双击"><a href="#鼠标连键-单击变双击" class="headerlink" title="鼠标连键(单击变双击)"></a>鼠标连键(单击变双击)</h4><p>鼠标用久了就会出现连键的情况，单击变双击，打英雄联盟新买的中亚沙漏还没出门拖动一下就被用掉了，不舍得扔掉就换个微动吧，很便宜的，邮费比产品贵系列。<br><img src="https://sadness96.github.io/images/blog/repair-ComputerHardware/鼠标微动.png"/></p>
<p><span id="外置USB供电的音响出现杂音"><span/></p>
<h4 id="外置-USB-供电的音响出现杂音"><a href="#外置-USB-供电的音响出现杂音" class="headerlink" title="外置 USB 供电的音响出现杂音"></a>外置 USB 供电的音响出现杂音</h4><p>新买的小音箱使用 USB 独立供电，接在电脑主板上或是 Switch 的底座上就会滋滋滋的响个不停，还是老老实实的接个充电头插在插排上吧。</p>
<p><span id="游戏手柄连接数据线虚连"><span/></p>
<h4 id="游戏手柄连接数据线虚连"><a href="#游戏手柄连接数据线虚连" class="headerlink" title="游戏手柄连接数据线虚连"></a>游戏手柄连接数据线虚连</h4><p>之前朋友送的一个 Xbox 360 手柄用的太久了出现时断时连的情况，检查一圈是连接的数据线虚连了，换了一根线就好了，后出的 Xbox One 手柄已经改成无线连接了，点个赞！<br><img src="https://sadness96.github.io/images/blog/repair-ComputerHardware/20190615_134144.jpg"/></p>
<p><span id="电脑温度过高"><span/></p>
<h4 id="电脑温度过高"><a href="#电脑温度过高" class="headerlink" title="电脑温度过高"></a>电脑温度过高</h4><p>大部分的电脑还是采用风冷散热，难免的吸灰，清理风扇上的灰尘，或更换风扇，定期更换硅脂。</p>
<p><span id="电脑电压不稳"><span/></p>
<h4 id="电脑电压不稳"><a href="#电脑电压不稳" class="headerlink" title="电脑电压不稳"></a>电脑电压不稳</h4><p>国内普遍电压为 220V，但是由于建筑原因，难免有些地区电压不稳定，导致电源的负荷过大，建议在电脑前安装<a href="https://baike.baidu.com/item/%E4%B8%8D%E9%97%B4%E6%96%AD%E7%94%B5%E6%BA%90/271297?fromtitle=UPS&amp;fromid=2734349&amp;fr=aladdin">不间断电源(UPS)</a></p>
<p><span id="系统软件或应用软件导致驱动异常"><span/></p>
<h4 id="系统软件或应用软件导致驱动异常"><a href="#系统软件或应用软件导致驱动异常" class="headerlink" title="系统软件或应用软件导致驱动异常"></a>系统软件或应用软件导致驱动异常</h4><p>微软给出的意见是蓝屏大多由内存或驱动异常导致，检查每个软件的运行是否对驱动程序的运行造成了影响。当然可以准备一块完好的硬盘装一个熟悉的系统，排除一下是否是硬件原因导致。</p>
]]></content>
      <categories>
        <category>Repair</category>
      </categories>
      <tags>
        <tag>repair</tag>
        <tag>computer</tag>
        <tag>hardware</tag>
      </tags>
  </entry>
  <entry>
    <title>加密解密帮助类</title>
    <url>/blog/2018/01/10/csharp-EncryptionHelper/</url>
    <content><![CDATA[<p><img src="https://sadness96.github.io/images/blog/csharp-DevFramework/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E5%B7%A5%E5%85%B7.png"/></p>
<span id="more"></span>
<h3 id="提供几种对称加密与非对称加密算法，以及单项加密与文件夹加密"><a href="#提供几种对称加密与非对称加密算法，以及单项加密与文件夹加密" class="headerlink" title="提供几种对称加密与非对称加密算法，以及单项加密与文件夹加密"></a>提供几种对称加密与非对称加密算法，以及单项加密与文件夹加密</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>工作中需要各种方式的加密（传输文本加密，文件加密，图片Base64编码，文件MD5与SHA1值计算），既有对称式加密与非对称式加密，也有单向加密，应用于各种使用环境。</p>
<h4 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h4><p>由于2017年5月12日的比特币勒索病毒 <a href="https://baike.baidu.com/item/WannaCry/20797421?fr=aladdin">WannaCry</a> 爆发，100多个国家和地区超过10万台电脑遭到了勒索病毒攻击、感染。其原理就是加密电脑中的文件，以用秘钥勒索比特币。技术本质并无好坏之分，多行善事。</p>
<h4 id="帮助类、介绍"><a href="#帮助类、介绍" class="headerlink" title="帮助类、介绍"></a>帮助类、介绍</h4><h5 id="对称式加密"><a href="#对称式加密" class="headerlink" title="对称式加密"></a>对称式加密</h5><p><a href="https://baike.baidu.com/item/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/211953?fr=aladdin">对称加密算法</a> 解密使用相同密钥及相同算法的逆算法对密文进行解密。</p>
<h6 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h6><p><a href="https://baike.baidu.com/item/aes/5903?fr=aladdin">AES</a> 一种区块加密标准，替代原先的DES，对称密钥加密中最流行的算法之一。<br><a href="https://github.com/Sadness96/Sadness/blob/master/Code/Helper/Utils.Helper/Encryption/AESHelper.cs">AESHelper</a><br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> AES加密</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strPlaintext&quot;&gt;</span>明文<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strKey&quot;&gt;</span>秘钥<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>AES密文<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">AESEncrypt</span>(<span class="params"><span class="built_in">string</span> strPlaintext, <span class="built_in">string</span> strKey</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strPlaintext))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">        &#125;</span><br><span class="line">        strKey = strKey.Length &lt; <span class="number">32</span> ? strKey.PadRight(<span class="number">32</span>, <span class="string">&#x27;0&#x27;</span>) : strKey.Substring(<span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">        Byte[] toEncryptArray = Encoding.UTF8.GetBytes(strPlaintext);</span><br><span class="line">        RijndaelManaged rijndaelManaged = <span class="keyword">new</span> RijndaelManaged</span><br><span class="line">        &#123;</span><br><span class="line">            Key = Encoding.UTF8.GetBytes(strKey),</span><br><span class="line">            Mode = CipherMode.ECB,</span><br><span class="line">            Padding = PaddingMode.PKCS7</span><br><span class="line">        &#125;;</span><br><span class="line">        ICryptoTransform pCryptoTransform = rijndaelManaged.CreateEncryptor();</span><br><span class="line">        Byte[] resultArray = pCryptoTransform.TransformFinalBlock(toEncryptArray, <span class="number">0</span>, toEncryptArray.Length);</span><br><span class="line">        <span class="keyword">return</span> Convert.ToBase64String(resultArray, <span class="number">0</span>, resultArray.Length);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> AES解密</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strCiphertext&quot;&gt;</span>AES密文<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strKey&quot;&gt;</span>秘钥<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>明文<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">AESDecrypt</span>(<span class="params"><span class="built_in">string</span> strCiphertext, <span class="built_in">string</span> strKey</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strCiphertext))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">        &#125;</span><br><span class="line">        strKey = strKey.Length &lt; <span class="number">32</span> ? strKey.PadRight(<span class="number">32</span>, <span class="string">&#x27;0&#x27;</span>) : strKey.Substring(<span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">        Byte[] toEncryptArray = Convert.FromBase64String(strCiphertext);</span><br><span class="line">        RijndaelManaged rijndaelManaged = <span class="keyword">new</span> RijndaelManaged</span><br><span class="line">        &#123;</span><br><span class="line">            Key = Encoding.UTF8.GetBytes(strKey),</span><br><span class="line">            Mode = CipherMode.ECB,</span><br><span class="line">            Padding = PaddingMode.PKCS7</span><br><span class="line">        &#125;;</span><br><span class="line">        ICryptoTransform pCryptoTransform = rijndaelManaged.CreateDecryptor();</span><br><span class="line">        Byte[] resultArray = pCryptoTransform.TransformFinalBlock(toEncryptArray, <span class="number">0</span>, toEncryptArray.Length);</span><br><span class="line">        <span class="keyword">return</span> Encoding.UTF8.GetString(resultArray);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 文件AES加密</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strFilePath&quot;&gt;</span>文件路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strSaveFilePath&quot;&gt;</span>加密文件目录<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strKey&quot;&gt;</span>秘钥<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">FileAESEncrypt</span>(<span class="params"><span class="built_in">string</span> strFilePath, <span class="built_in">string</span> strSaveFilePath, <span class="built_in">string</span> strKey</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//设置Aes秘钥和格式</span></span><br><span class="line">        strKey = strKey.Length &lt; <span class="number">32</span> ? strKey.PadRight(<span class="number">32</span>, <span class="string">&#x27;0&#x27;</span>) : strKey.Substring(<span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">        RijndaelManaged rijndaelManaged = <span class="keyword">new</span> RijndaelManaged</span><br><span class="line">        &#123;</span><br><span class="line">            Key = Encoding.UTF8.GetBytes(strKey),</span><br><span class="line">            Mode = CipherMode.ECB,</span><br><span class="line">            Padding = PaddingMode.PKCS7</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//读取文本加密数据</span></span><br><span class="line">        FileStream fileStream = File.OpenRead(strFilePath);</span><br><span class="line">        <span class="built_in">byte</span>[] byteFileStream = <span class="keyword">new</span> <span class="built_in">byte</span>[fileStream.Length];</span><br><span class="line">        fileStream.Read(byteFileStream, <span class="number">0</span>, (<span class="built_in">int</span>)fileStream.Length);</span><br><span class="line">        fileStream.Close();</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> memoryStream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> cryptoStream = <span class="keyword">new</span> CryptoStream(memoryStream, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write))</span><br><span class="line">            &#123;</span><br><span class="line">                cryptoStream.Write(byteFileStream, <span class="number">0</span>, byteFileStream.Length);</span><br><span class="line">                cryptoStream.FlushFinalBlock();</span><br><span class="line">                fileStream = File.OpenWrite(strSaveFilePath);</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="built_in">byte</span> byteMemoryStream <span class="keyword">in</span> memoryStream.ToArray())</span><br><span class="line">                &#123;</span><br><span class="line">                    fileStream.WriteByte(byteMemoryStream);</span><br><span class="line">                &#125;</span><br><span class="line">                fileStream.Close();</span><br><span class="line">                cryptoStream.Close();</span><br><span class="line">                memoryStream.Close();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 文件AES解密</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strFilePath&quot;&gt;</span>被加密的文件路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strSaveFilePath&quot;&gt;</span>解密文件目录<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strKey&quot;&gt;</span>秘钥<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">FileAESDecrypt</span>(<span class="params"><span class="built_in">string</span> strFilePath, <span class="built_in">string</span> strSaveFilePath, <span class="built_in">string</span> strKey</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        strKey = strKey.Length &lt; <span class="number">32</span> ? strKey.PadRight(<span class="number">32</span>, <span class="string">&#x27;0&#x27;</span>) : strKey.Substring(<span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">        RijndaelManaged rijndaelManaged = <span class="keyword">new</span> RijndaelManaged</span><br><span class="line">        &#123;</span><br><span class="line">            Key = Encoding.UTF8.GetBytes(strKey),</span><br><span class="line">            Mode = CipherMode.ECB,</span><br><span class="line">            Padding = PaddingMode.PKCS7</span><br><span class="line">        &#125;;</span><br><span class="line">        FileStream fileStream = File.OpenRead(strFilePath);</span><br><span class="line">        <span class="built_in">byte</span>[] byteFileStream = <span class="keyword">new</span> <span class="built_in">byte</span>[fileStream.Length];</span><br><span class="line">        fileStream.Read(byteFileStream, <span class="number">0</span>, (<span class="built_in">int</span>)fileStream.Length);</span><br><span class="line">        fileStream.Close();</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> memoryStream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> cryptoStream = <span class="keyword">new</span> CryptoStream(memoryStream, rijndaelManaged.CreateDecryptor(), CryptoStreamMode.Write))</span><br><span class="line">            &#123;</span><br><span class="line">                cryptoStream.Write(byteFileStream, <span class="number">0</span>, byteFileStream.Length);</span><br><span class="line">                cryptoStream.FlushFinalBlock();</span><br><span class="line">                fileStream = File.OpenWrite(strSaveFilePath);</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="built_in">byte</span> byteMemoryStream <span class="keyword">in</span> memoryStream.ToArray())</span><br><span class="line">                &#123;</span><br><span class="line">                    fileStream.WriteByte(byteMemoryStream);</span><br><span class="line">                &#125;</span><br><span class="line">                fileStream.Close();</span><br><span class="line">                cryptoStream.Close();</span><br><span class="line">                memoryStream.Close();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h6 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h6><p><a href="https://baike.baidu.com/item/DES">DES</a> 一种使用密钥加密的块算法,1977年被美国联邦政府的国家标准局确定为联邦资料处理标准（FIPS），并授权在非密级政府通信中使用。<br><a href="https://github.com/Sadness96/Sadness/blob/master/Code/Helper/Utils.Helper/Encryption/DESHelper.cs">DESHelper</a><br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> DES加密</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strPlaintext&quot;&gt;</span>明文<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strKey&quot;&gt;</span>秘钥(8位)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strIV&quot;&gt;</span>向量(8位)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>DES密文<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">DESEncrypt</span>(<span class="params"><span class="built_in">string</span> strPlaintext, <span class="built_in">string</span> strKey, <span class="built_in">string</span> strIV</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        DESCryptoServiceProvider desCrypto = <span class="keyword">new</span> DESCryptoServiceProvider();</span><br><span class="line">        desCrypto.Key = UTF8Encoding.Default.GetBytes(strKey);</span><br><span class="line">        desCrypto.IV = UTF8Encoding.UTF8.GetBytes(strIV);</span><br><span class="line">        <span class="keyword">using</span> (ICryptoTransform cryptoTransform = desCrypto.CreateEncryptor())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">byte</span>[] byteBaseUTF8 = Encoding.UTF8.GetBytes(strPlaintext);</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> memoryStream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">using</span> (<span class="keyword">var</span> cryptoStream = <span class="keyword">new</span> CryptoStream(memoryStream, cryptoTransform, CryptoStreamMode.Write))</span><br><span class="line">                &#123;</span><br><span class="line">                    cryptoStream.Write(byteBaseUTF8, <span class="number">0</span>, byteBaseUTF8.Length);</span><br><span class="line">                    cryptoStream.FlushFinalBlock();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> Convert.ToBase64String(memoryStream.ToArray());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> DES解密</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strCiphertext&quot;&gt;</span>DES密文<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strKey&quot;&gt;</span>秘钥(8位)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strIV&quot;&gt;</span>向量(8位)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>明文<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">DESDecrypt</span>(<span class="params"><span class="built_in">string</span> strCiphertext, <span class="built_in">string</span> strKey, <span class="built_in">string</span> strIV</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        DESCryptoServiceProvider desCrypto = <span class="keyword">new</span> DESCryptoServiceProvider();</span><br><span class="line">        desCrypto.Key = UTF8Encoding.Default.GetBytes(strKey);</span><br><span class="line">        desCrypto.IV = UTF8Encoding.UTF8.GetBytes(strIV);</span><br><span class="line">        <span class="keyword">using</span> (ICryptoTransform cryptoTransform = desCrypto.CreateDecryptor())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">byte</span>[] byteBase64 = Convert.FromBase64String(strCiphertext);</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> memoryStream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">using</span> (<span class="keyword">var</span> cryptoStream = <span class="keyword">new</span> CryptoStream(memoryStream, cryptoTransform, CryptoStreamMode.Write))</span><br><span class="line">                &#123;</span><br><span class="line">                    cryptoStream.Write(byteBase64, <span class="number">0</span>, byteBase64.Length);</span><br><span class="line">                    cryptoStream.FlushFinalBlock();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> Encoding.UTF8.GetString(memoryStream.ToArray());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 文件DES加密</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strFilePath&quot;&gt;</span>文件路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strSaveFilePath&quot;&gt;</span>加密文件目录<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strKey&quot;&gt;</span>秘钥(8位)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strIV&quot;&gt;</span>向量(8位)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">FileDESEncrypt</span>(<span class="params"><span class="built_in">string</span> strFilePath, <span class="built_in">string</span> strSaveFilePath, <span class="built_in">string</span> strKey, <span class="built_in">string</span> strIV</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        DESCryptoServiceProvider desCrypto = <span class="keyword">new</span> DESCryptoServiceProvider();</span><br><span class="line">        desCrypto.Key = UTF8Encoding.Default.GetBytes(strKey);</span><br><span class="line">        desCrypto.IV = UTF8Encoding.UTF8.GetBytes(strIV);</span><br><span class="line">        FileStream fileStream = File.OpenRead(strFilePath);</span><br><span class="line">        <span class="built_in">byte</span>[] byteFileStream = <span class="keyword">new</span> <span class="built_in">byte</span>[fileStream.Length];</span><br><span class="line">        fileStream.Read(byteFileStream, <span class="number">0</span>, (<span class="built_in">int</span>)fileStream.Length);</span><br><span class="line">        fileStream.Close();</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> memoryStream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> cryptoStream = <span class="keyword">new</span> CryptoStream(memoryStream, desCrypto.CreateEncryptor(), CryptoStreamMode.Write))</span><br><span class="line">            &#123;</span><br><span class="line">                cryptoStream.Write(byteFileStream, <span class="number">0</span>, byteFileStream.Length);</span><br><span class="line">                cryptoStream.FlushFinalBlock();</span><br><span class="line">                fileStream = File.OpenWrite(strSaveFilePath);</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="built_in">byte</span> byteMemoryStream <span class="keyword">in</span> memoryStream.ToArray())</span><br><span class="line">                &#123;</span><br><span class="line">                    fileStream.WriteByte(byteMemoryStream);</span><br><span class="line">                &#125;</span><br><span class="line">                fileStream.Close();</span><br><span class="line">                cryptoStream.Close();</span><br><span class="line">                memoryStream.Close();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 文件DES解密</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strFilePath&quot;&gt;</span>被加密的文件路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strSaveFilePath&quot;&gt;</span>解密文件目录<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strKey&quot;&gt;</span>秘钥(8位)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strIV&quot;&gt;</span>向量(8位)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">FileDESDecrypt</span>(<span class="params"><span class="built_in">string</span> strFilePath, <span class="built_in">string</span> strSaveFilePath, <span class="built_in">string</span> strKey, <span class="built_in">string</span> strIV</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        DESCryptoServiceProvider desCrypto = <span class="keyword">new</span> DESCryptoServiceProvider();</span><br><span class="line">        desCrypto.Key = UTF8Encoding.Default.GetBytes(strKey);</span><br><span class="line">        desCrypto.IV = UTF8Encoding.UTF8.GetBytes(strIV);</span><br><span class="line">        FileStream fileStream = File.OpenRead(strFilePath);</span><br><span class="line">        <span class="built_in">byte</span>[] byteFileStream = <span class="keyword">new</span> <span class="built_in">byte</span>[fileStream.Length];</span><br><span class="line">        fileStream.Read(byteFileStream, <span class="number">0</span>, (<span class="built_in">int</span>)fileStream.Length);</span><br><span class="line">        fileStream.Close();</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> memoryStream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> cryptoStream = <span class="keyword">new</span> CryptoStream(memoryStream, desCrypto.CreateDecryptor(), CryptoStreamMode.Write))</span><br><span class="line">            &#123;</span><br><span class="line">                cryptoStream.Write(byteFileStream, <span class="number">0</span>, byteFileStream.Length);</span><br><span class="line">                cryptoStream.FlushFinalBlock();</span><br><span class="line">                fileStream = File.OpenWrite(strSaveFilePath);</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="built_in">byte</span> byteMemoryStream <span class="keyword">in</span> memoryStream.ToArray())</span><br><span class="line">                &#123;</span><br><span class="line">                    fileStream.WriteByte(byteMemoryStream);</span><br><span class="line">                &#125;</span><br><span class="line">                fileStream.Close();</span><br><span class="line">                cryptoStream.Close();</span><br><span class="line">                memoryStream.Close();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="非对称式加密"><a href="#非对称式加密" class="headerlink" title="非对称式加密"></a>非对称式加密</h5><p><a href="https://baike.baidu.com/item/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95">非对称加密算法</a> 需要两个密钥：公开密钥（publickey:简称公钥）和私有密钥（privatekey:简称私钥）。公钥与私钥是一对，如果用公钥对数据进行加密，只有用对应的私钥才能解密。</p>
<h6 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h6><p><a href="https://baike.baidu.com/item/RSA%E7%AE%97%E6%B3%95?fromtitle=RSA&amp;fromid=210678">RSA</a> 一种非对称加密算法。在公开密钥加密和电子商业中RSA被广泛使用。<br><a href="https://github.com/Sadness96/Sadness/blob/master/Code/Helper/Utils.Helper/Encryption/RSAHelper.cs">RSAHelper</a> 只能使用产生出的密钥，且加密更加复杂所以只能加密短文本（测试加密长度上限为58字节）。<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> RSA产生秘钥</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;xmlPublicKey&quot;&gt;</span>公钥<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;xmlPrivateKey&quot;&gt;</span>私钥<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RSAKey</span>(<span class="params"><span class="keyword">out</span> <span class="built_in">string</span> xmlPublicKey, <span class="keyword">out</span> <span class="built_in">string</span> xmlPrivateKey</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        RSACryptoServiceProvider rsaCrypto = <span class="keyword">new</span> RSACryptoServiceProvider();</span><br><span class="line">        xmlPublicKey = rsaCrypto.ToXmlString(<span class="literal">false</span>);</span><br><span class="line">        xmlPrivateKey = rsaCrypto.ToXmlString(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        xmlPublicKey = <span class="built_in">string</span>.Empty;</span><br><span class="line">        xmlPrivateKey = <span class="built_in">string</span>.Empty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> RSA加密</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strPlaintext&quot;&gt;</span>明文<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;xmlPublicKey&quot;&gt;</span>公钥<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>RSA密文<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">RSAEncrypt</span>(<span class="params"><span class="built_in">string</span> strPlaintext, <span class="built_in">string</span> xmlPublicKey</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        RSACryptoServiceProvider rsaCrypto = <span class="keyword">new</span> RSACryptoServiceProvider();</span><br><span class="line">        rsaCrypto.FromXmlString(xmlPublicKey);</span><br><span class="line">        UnicodeEncoding unicodeEncoding = <span class="keyword">new</span> UnicodeEncoding();</span><br><span class="line">        <span class="built_in">byte</span>[] byteBaseUnicode = unicodeEncoding.GetBytes(strPlaintext);</span><br><span class="line">        <span class="built_in">byte</span>[] byteBaseEncrypt = rsaCrypto.Encrypt(byteBaseUnicode, <span class="literal">false</span>);</span><br><span class="line">        <span class="built_in">string</span> strRSAEncrypt = Convert.ToBase64String(byteBaseEncrypt);</span><br><span class="line">        <span class="keyword">return</span> strRSAEncrypt;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> RSA解密</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strCiphertext&quot;&gt;</span>RSA密文<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;xmlPrivateKey&quot;&gt;</span>私钥<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>明文<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">RSADecrypt</span>(<span class="params"><span class="built_in">string</span> strCiphertext, <span class="built_in">string</span> xmlPrivateKey</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        RSACryptoServiceProvider rsaCrypto = <span class="keyword">new</span> RSACryptoServiceProvider();</span><br><span class="line">        rsaCrypto.FromXmlString(xmlPrivateKey);</span><br><span class="line">        <span class="built_in">byte</span>[] byteBase64 = Convert.FromBase64String(strCiphertext);</span><br><span class="line">        <span class="built_in">byte</span>[] byteBaseDecrypt = rsaCrypto.Decrypt(byteBase64, <span class="literal">false</span>);</span><br><span class="line">        <span class="built_in">string</span> strRSADecrypt = (<span class="keyword">new</span> UnicodeEncoding()).GetString(byteBaseDecrypt);</span><br><span class="line">        <span class="keyword">return</span> strRSADecrypt;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="单项加密"><a href="#单项加密" class="headerlink" title="单项加密"></a>单项加密</h5><p><a href="https://baike.baidu.com/item/%E5%AF%86%E7%A0%81%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0">密码散列函数</a> 一种单向函数，也就是说极其难以由散列函数输出的结果，回推输入的数据是什么。多用于文件效验完整性。</p>
<h6 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h6><p><a href="https://baike.baidu.com/item/MD5">MD5</a> 一种被广泛使用的密码散列函数，可以产生出一个128位（16字节）的散列值（hash value），用于确保信息传输完整一致。<br><a href="https://github.com/Sadness96/Sadness/blob/master/Code/Helper/Utils.Helper/Encryption/MD5Helper.cs">MD5Helper</a><br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> MD5加密(16位小写)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strPlaintext&quot;&gt;</span>明文<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>MD5密文(16位小写)<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">MD5Encrypt_16Lower</span>(<span class="params"><span class="built_in">string</span> strPlaintext</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        MD5CryptoServiceProvider md5Crypto = <span class="keyword">new</span> MD5CryptoServiceProvider();</span><br><span class="line">        <span class="built_in">string</span> strCiphertext = BitConverter.ToString(md5Crypto.ComputeHash(UTF8Encoding.Default.GetBytes(strPlaintext)), <span class="number">4</span>, <span class="number">8</span>);</span><br><span class="line">        strCiphertext = strCiphertext.Replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        strCiphertext = strCiphertext.ToLower();</span><br><span class="line">        <span class="keyword">return</span> strCiphertext;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> MD5加密(16位大写)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strPlaintext&quot;&gt;</span>明文<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>MD5密文(16位小写)<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">MD5Encrypt_16Upper</span>(<span class="params"><span class="built_in">string</span> strPlaintext</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        MD5CryptoServiceProvider md5Crypto = <span class="keyword">new</span> MD5CryptoServiceProvider();</span><br><span class="line">        <span class="built_in">string</span> strCiphertext = BitConverter.ToString(md5Crypto.ComputeHash(UTF8Encoding.Default.GetBytes(strPlaintext)), <span class="number">4</span>, <span class="number">8</span>);</span><br><span class="line">        strCiphertext = strCiphertext.Replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        strCiphertext = strCiphertext.ToUpper();</span><br><span class="line">        <span class="keyword">return</span> strCiphertext;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> MD5加密(32位小写)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strPlaintext&quot;&gt;</span>明文<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>MD5密文(32位小写)<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">MD5Encrypt_32Lower</span>(<span class="params"><span class="built_in">string</span> strPlaintext</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        MD5CryptoServiceProvider md5Crypto = <span class="keyword">new</span> MD5CryptoServiceProvider();</span><br><span class="line">        <span class="built_in">string</span> strCiphertext = BitConverter.ToString(md5Crypto.ComputeHash(UTF8Encoding.Default.GetBytes(strPlaintext)));</span><br><span class="line">        strCiphertext = strCiphertext.Replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        strCiphertext = strCiphertext.ToLower();</span><br><span class="line">        <span class="keyword">return</span> strCiphertext;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> MD5加密(32位大写)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strPlaintext&quot;&gt;</span>明文<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>MD5密文(32位小写)<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">MD5Encrypt_32Upper</span>(<span class="params"><span class="built_in">string</span> strPlaintext</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        MD5CryptoServiceProvider md5Crypto = <span class="keyword">new</span> MD5CryptoServiceProvider();</span><br><span class="line">        <span class="built_in">string</span> strCiphertext = BitConverter.ToString(md5Crypto.ComputeHash(UTF8Encoding.Default.GetBytes(strPlaintext)));</span><br><span class="line">        strCiphertext = strCiphertext.Replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        strCiphertext = strCiphertext.ToUpper();</span><br><span class="line">        <span class="keyword">return</span> strCiphertext;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获取文件MD5值(32位小写)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strFilePath&quot;&gt;</span>文件路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>文件MD5值(32位小写)<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">FileMD5Encrypt_32Lower</span>(<span class="params"><span class="built_in">string</span> strFilePath</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        FileStream fileStream = <span class="keyword">new</span> FileStream(strFilePath, FileMode.Open, FileAccess.Read);</span><br><span class="line">        System.Security.Cryptography.MD5 md5 = <span class="keyword">new</span> System.Security.Cryptography.MD5CryptoServiceProvider();</span><br><span class="line">        <span class="built_in">byte</span>[] byteHash = md5.ComputeHash(fileStream);</span><br><span class="line">        fileStream.Close();</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; byteHash.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            stringBuilder.Append(byteHash[i].ToString(<span class="string">&quot;x2&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获取文件MD5值(32位大写)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strFilePath&quot;&gt;</span>文件路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>文件MD5值(32位大写)<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">FileMD5Encrypt_32Upper</span>(<span class="params"><span class="built_in">string</span> strFilePath</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        FileStream fileStream = <span class="keyword">new</span> FileStream(strFilePath, FileMode.Open, FileAccess.Read);</span><br><span class="line">        System.Security.Cryptography.MD5 md5 = <span class="keyword">new</span> System.Security.Cryptography.MD5CryptoServiceProvider();</span><br><span class="line">        <span class="built_in">byte</span>[] byteHash = md5.ComputeHash(fileStream);</span><br><span class="line">        fileStream.Close();</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; byteHash.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            stringBuilder.Append(byteHash[i].ToString(<span class="string">&quot;X2&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h6 id="SHA1"><a href="#SHA1" class="headerlink" title="SHA1"></a>SHA1</h6><p><a href="https://baike.baidu.com/item/SHA1">SHA1</a> 安全哈希算法（Secure Hash Algorithm）主要适用于数字签名标准 （Digital Signature Standard DSS）里面定义的数字签名算法（Digital Signature Algorithm DSA）。<br><a href="https://github.com/Sadness96/Sadness/blob/master/Code/Helper/Utils.Helper/Encryption/SHA1Helper.cs">SHA1Helper</a><br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> SHA1加密(40位小写)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strPlaintext&quot;&gt;</span>明文<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>SHA1密文(40位小写)<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">SHA1Encrypt_40Lower</span>(<span class="params"><span class="built_in">string</span> strPlaintext</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.Security.Cryptography.SHA1 sha1Crypto = <span class="keyword">new</span> SHA1CryptoServiceProvider();</span><br><span class="line">        <span class="built_in">byte</span>[] bytes_sha1_in = UTF8Encoding.Default.GetBytes(strPlaintext);</span><br><span class="line">        <span class="built_in">byte</span>[] bytes_sha1_out = sha1Crypto.ComputeHash(bytes_sha1_in);</span><br><span class="line">        <span class="built_in">string</span> str_sha1_out = BitConverter.ToString(bytes_sha1_out);</span><br><span class="line">        str_sha1_out = str_sha1_out.Replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        str_sha1_out = str_sha1_out.ToLower();</span><br><span class="line">        <span class="keyword">return</span> str_sha1_out;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> SHA1加密(40位大写)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strPlaintext&quot;&gt;</span>明文<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>SHA1密文(40位大写)<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">SHA1Encrypt_40Upper</span>(<span class="params"><span class="built_in">string</span> strPlaintext</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.Security.Cryptography.SHA1 sha1Crypto = <span class="keyword">new</span> SHA1CryptoServiceProvider();</span><br><span class="line">        <span class="built_in">byte</span>[] bytes_sha1_in = UTF8Encoding.Default.GetBytes(strPlaintext);</span><br><span class="line">        <span class="built_in">byte</span>[] bytes_sha1_out = sha1Crypto.ComputeHash(bytes_sha1_in);</span><br><span class="line">        <span class="built_in">string</span> str_sha1_out = BitConverter.ToString(bytes_sha1_out);</span><br><span class="line">        str_sha1_out = str_sha1_out.Replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        str_sha1_out = str_sha1_out.ToUpper();</span><br><span class="line">        <span class="keyword">return</span> str_sha1_out;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获取文件SHA1值(40位小写)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strFilePath&quot;&gt;</span>文件路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>文件SHA1值(40位小写)<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">FileSHA1Encrypt_40Lower</span>(<span class="params"><span class="built_in">string</span> strFilePath</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        FileStream fileStream = <span class="keyword">new</span> FileStream(strFilePath, FileMode.Open, FileAccess.Read);</span><br><span class="line">        System.Security.Cryptography.SHA1 sha1 = <span class="keyword">new</span> SHA1CryptoServiceProvider();</span><br><span class="line">        <span class="built_in">byte</span>[] byteHash = sha1.ComputeHash(fileStream);</span><br><span class="line">        fileStream.Close();</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; byteHash.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            stringBuilder.Append(byteHash[i].ToString(<span class="string">&quot;x2&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获取文件SHA1值(40位大写)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strFilePath&quot;&gt;</span>文件路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>文件SHA1值(40位大写)<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">FileSHA1Encrypt_40Upper</span>(<span class="params"><span class="built_in">string</span> strFilePath</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        FileStream fileStream = <span class="keyword">new</span> FileStream(strFilePath, FileMode.Open, FileAccess.Read);</span><br><span class="line">        System.Security.Cryptography.SHA1 sha1 = <span class="keyword">new</span> SHA1CryptoServiceProvider();</span><br><span class="line">        <span class="built_in">byte</span>[] byteHash = sha1.ComputeHash(fileStream);</span><br><span class="line">        fileStream.Close();</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; byteHash.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            stringBuilder.Append(byteHash[i].ToString(<span class="string">&quot;X2&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h6 id="CRC32"><a href="#CRC32" class="headerlink" title="CRC32"></a>CRC32</h6><p><a href="https://baike.baidu.com/item/CRC32">CRC32</a> 循环冗余校验。在数据存储和数据通讯领域，为了保证数据的正确，就不得不采用检错的手段。在诸多检错手段中，CRC是最著名的一种。<br><a href="https://github.com/Sadness96/Sadness/blob/master/Code/Helper/Utils.Helper/Encryption/CRC32Helper.cs">CRC32Helper</a><br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> CRC32加密(8位小写)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strPlaintext&quot;&gt;</span>明文<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>CRC32密文(8位小写)<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">CRC32Encrypt_8Lower</span>(<span class="params"><span class="built_in">string</span> strPlaintext</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        Crc32 crc32Crypto = <span class="keyword">new</span> Crc32();</span><br><span class="line">        <span class="built_in">byte</span>[] bytes_crc32_in = UTF8Encoding.Default.GetBytes(strPlaintext);</span><br><span class="line">        <span class="built_in">byte</span>[] bytes_crc32_out = crc32Crypto.ComputeHash(bytes_crc32_in);</span><br><span class="line">        <span class="built_in">string</span> str_crc32_out = BitConverter.ToString(bytes_crc32_out);</span><br><span class="line">        str_crc32_out = str_crc32_out.Replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        str_crc32_out = str_crc32_out.ToLower();</span><br><span class="line">        <span class="keyword">return</span> str_crc32_out;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> CRC32加密(8位大写)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strPlaintext&quot;&gt;</span>明文<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>CRC32密文(8位大写)<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">CRC32Encrypt_8Upper</span>(<span class="params"><span class="built_in">string</span> strPlaintext</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        Crc32 crc32Crypto = <span class="keyword">new</span> Crc32();</span><br><span class="line">        <span class="built_in">byte</span>[] bytes_crc32_in = UTF8Encoding.Default.GetBytes(strPlaintext);</span><br><span class="line">        <span class="built_in">byte</span>[] bytes_crc32_out = crc32Crypto.ComputeHash(bytes_crc32_in);</span><br><span class="line">        <span class="built_in">string</span> str_crc32_out = BitConverter.ToString(bytes_crc32_out);</span><br><span class="line">        str_crc32_out = str_crc32_out.Replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        str_crc32_out = str_crc32_out.ToUpper();</span><br><span class="line">        <span class="keyword">return</span> str_crc32_out;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获取文件CRC32值(8位小写)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strFilePath&quot;&gt;</span>文件路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>文件CRC32值(8位小写)<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">FileCRC32Encrypt_8Lower</span>(<span class="params"><span class="built_in">string</span> strFilePath</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        String hashCRC32 = String.Empty;</span><br><span class="line">        <span class="comment">//检查文件是否存在,如果文件存在则进行计算,否则返回空值</span></span><br><span class="line">        <span class="keyword">if</span> (System.IO.File.Exists(strFilePath))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (System.IO.FileStream fileStream = <span class="keyword">new</span> System.IO.FileStream(strFilePath, System.IO.FileMode.Open, System.IO.FileAccess.Read))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//计算文件的CSC32值</span></span><br><span class="line">                Crc32 calculator = <span class="keyword">new</span> Crc32();</span><br><span class="line">                Byte[] buffer = calculator.ComputeHash(fileStream);</span><br><span class="line">                calculator.Clear();</span><br><span class="line">                <span class="comment">//将字节数组转换成十六进制的字符串形式</span></span><br><span class="line">                StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; buffer.Length; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    stringBuilder.Append(buffer[i].ToString(<span class="string">&quot;x2&quot;</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                hashCRC32 = stringBuilder.ToString();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hashCRC32;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获取文件CRC32值(8位大写)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strFilePath&quot;&gt;</span>文件路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>文件CRC32值(8位大写)<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">FileCRC32Encrypt_8Upper</span>(<span class="params"><span class="built_in">string</span> strFilePath</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        String hashCRC32 = String.Empty;</span><br><span class="line">        <span class="comment">//检查文件是否存在,如果文件存在则进行计算,否则返回空值</span></span><br><span class="line">        <span class="keyword">if</span> (System.IO.File.Exists(strFilePath))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (System.IO.FileStream fileStream = <span class="keyword">new</span> System.IO.FileStream(strFilePath, System.IO.FileMode.Open, System.IO.FileAccess.Read))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//计算文件的CSC32值</span></span><br><span class="line">                Crc32 calculator = <span class="keyword">new</span> Crc32();</span><br><span class="line">                Byte[] buffer = calculator.ComputeHash(fileStream);</span><br><span class="line">                calculator.Clear();</span><br><span class="line">                <span class="comment">//将字节数组转换成十六进制的字符串形式</span></span><br><span class="line">                StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; buffer.Length; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    stringBuilder.Append(buffer[i].ToString(<span class="string">&quot;X2&quot;</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                hashCRC32 = stringBuilder.ToString();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hashCRC32;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 提供 CRC32 算法的实现</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Crc32</span> : <span class="title">System.Security.Cryptography.HashAlgorithm</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Default Polynomial</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> UInt32 DefaultPolynomial = <span class="number">0xedb88320</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Default Seed</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> UInt32 DefaultSeed = <span class="number">0xffffffff</span>;</span><br><span class="line">    <span class="keyword">private</span> UInt32 hash;</span><br><span class="line">    <span class="keyword">private</span> UInt32 seed;</span><br><span class="line">    <span class="keyword">private</span> UInt32[] table;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> UInt32[] defaultTable;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Crc32</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Crc32</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        table = InitializeTable(DefaultPolynomial);</span><br><span class="line">        seed = DefaultSeed;</span><br><span class="line">        Initialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Crc32</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;polynomial&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;seed&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Crc32</span>(<span class="params">UInt32 polynomial, UInt32 seed</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        table = InitializeTable(polynomial);</span><br><span class="line">        <span class="keyword">this</span>.seed = seed;</span><br><span class="line">        Initialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 初始化</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Initialize</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        hash = seed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Hash Core</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;buffer&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;start&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;length&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">HashCore</span>(<span class="params"><span class="built_in">byte</span>[] buffer, <span class="built_in">int</span> start, <span class="built_in">int</span> length</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        hash = CalculateHash(table, hash, buffer, start, length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Hash Final</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="built_in">byte</span>[] <span class="title">HashFinal</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] hashBuffer = UInt32ToBigEndianBytes(~hash);</span><br><span class="line">        <span class="keyword">this</span>.HashValue = hashBuffer;</span><br><span class="line">        <span class="keyword">return</span> hashBuffer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Compute</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;buffer&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UInt32 <span class="title">Compute</span>(<span class="params"><span class="built_in">byte</span>[] buffer</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> ~CalculateHash(InitializeTable(DefaultPolynomial), DefaultSeed, buffer, <span class="number">0</span>, buffer.Length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Compute</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;seed&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;buffer&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UInt32 <span class="title">Compute</span>(<span class="params">UInt32 seed, <span class="built_in">byte</span>[] buffer</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> ~CalculateHash(InitializeTable(DefaultPolynomial), seed, buffer, <span class="number">0</span>, buffer.Length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Compute</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;polynomial&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;seed&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;buffer&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UInt32 <span class="title">Compute</span>(<span class="params">UInt32 polynomial, UInt32 seed, <span class="built_in">byte</span>[] buffer</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> ~CalculateHash(InitializeTable(polynomial), seed, buffer, <span class="number">0</span>, buffer.Length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> UInt32[] <span class="title">InitializeTable</span>(<span class="params">UInt32 polynomial</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (polynomial == DefaultPolynomial &amp;&amp; defaultTable != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> defaultTable;</span><br><span class="line">        &#125;</span><br><span class="line">        UInt32[] createTable = <span class="keyword">new</span> UInt32[<span class="number">256</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            UInt32 entry = (UInt32)i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ((entry &amp; <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">                    entry = (entry &gt;&gt; <span class="number">1</span>) ^ polynomial;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    entry = entry &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            createTable[i] = entry;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (polynomial == DefaultPolynomial)</span><br><span class="line">        &#123;</span><br><span class="line">            defaultTable = createTable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> createTable;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> UInt32 <span class="title">CalculateHash</span>(<span class="params">UInt32[] table, UInt32 seed, <span class="built_in">byte</span>[] buffer, <span class="built_in">int</span> start, <span class="built_in">int</span> size</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        UInt32 crc = seed;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = start; i &lt; size; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">unchecked</span></span><br><span class="line">            &#123;</span><br><span class="line">                crc = (crc &gt;&gt; <span class="number">8</span>) ^ table[buffer[i] ^ crc &amp; <span class="number">0xff</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> crc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">byte</span>[] <span class="title">UInt32ToBigEndianBytes</span>(<span class="params">UInt32 x</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">byte</span>[] &#123; (<span class="built_in">byte</span>)((x &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>), (<span class="built_in">byte</span>)((x &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>), (<span class="built_in">byte</span>)((x &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>), (<span class="built_in">byte</span>)(x &amp; <span class="number">0xff</span>) &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="其它方式（Base64）"><a href="#其它方式（Base64）" class="headerlink" title="其它方式（Base64）"></a>其它方式（Base64）</h5><h6 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h6><p><a href="https://baike.baidu.com/item/base64">Base64</a> 网络上最常见的用于传输8Bit字节码的编码方式之一，准确的来说Base64不属于加密范围，仅是一种基于64个可打印字符来表示二进制数据的方法。多用于图片传输使用。<br><a href="https://github.com/Sadness96/Sadness/blob/master/Code/Helper/Utils.Helper/Encryption/Base64Helper.cs">Base64Helper</a><br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Base64加密</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strPlaintext&quot;&gt;</span>明文<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>Base64密文<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Base64Encrypt</span>(<span class="params"><span class="built_in">string</span> strPlaintext</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] bytes = Encoding.UTF8.GetBytes(strPlaintext);</span><br><span class="line">        <span class="keyword">return</span> Convert.ToBase64String(bytes);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Base64解密</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strCiphertext&quot;&gt;</span>Base64密文<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>明文<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">Base64Decrypt</span>(<span class="params"><span class="built_in">string</span> strCiphertext</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] bytes = Convert.FromBase64String(strCiphertext);</span><br><span class="line">        <span class="keyword">return</span> Encoding.UTF8.GetString(bytes);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 图片Base64加密</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strImagePath&quot;&gt;</span>图片路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;imageFormat&quot;&gt;</span>指定图像格式<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>Base64密文<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">ImageBase64Encrypt</span>(<span class="params"><span class="built_in">string</span> strImagePath, ImageFormat imageFormat</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">        Bitmap bitmap = <span class="keyword">new</span> Bitmap(strImagePath);</span><br><span class="line">        <span class="keyword">if</span> (imageFormat == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            imageFormat = GetImageFormatFromPath(strImagePath);</span><br><span class="line">        &#125;</span><br><span class="line">        bitmap.Save(memoryStream, imageFormat);</span><br><span class="line">        <span class="built_in">byte</span>[] bytes = memoryStream.GetBuffer();</span><br><span class="line">        <span class="keyword">return</span> Convert.ToBase64String(bytes);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 图片Base64解密</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strCiphertext&quot;&gt;</span>Base64密文<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strSaveFilePath&quot;&gt;</span>解密图片目录<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;imageFormat&quot;&gt;</span>指定图像格式<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">ImageBase64Decrypt</span>(<span class="params"><span class="built_in">string</span> strCiphertext, <span class="built_in">string</span> strSaveFilePath, ImageFormat imageFormat</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] bytes = Convert.FromBase64String(strCiphertext);</span><br><span class="line">        MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream(bytes);</span><br><span class="line">        Bitmap bitmap = <span class="keyword">new</span> Bitmap(memoryStream);</span><br><span class="line">        <span class="keyword">if</span> (imageFormat == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            imageFormat = GetImageFormatFromPath(strSaveFilePath);</span><br><span class="line">        &#125;</span><br><span class="line">        bitmap.Save(strSaveFilePath, imageFormat);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 根据图片路径获得图片格式(缺少MemoryBmp)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strImagePath&quot;&gt;</span>图片路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>图片格式<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ImageFormat <span class="title">GetImageFormatFromPath</span>(<span class="params"><span class="built_in">string</span> strImagePath</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> strImageExtension = Path.GetExtension(strImagePath).ToLower();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strImageExtension))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (strImageExtension.Equals(<span class="string">&quot;.bmp&quot;</span>) || strImageExtension.Equals(<span class="string">&quot;.rle&quot;</span>) || strImageExtension.Equals(<span class="string">&quot;.dlb&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> ImageFormat.Bmp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (strImageExtension.Equals(<span class="string">&quot;.emf&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> ImageFormat.Emf;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (strImageExtension.Equals(<span class="string">&quot;.exif&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> ImageFormat.Exif;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (strImageExtension.Equals(<span class="string">&quot;.gif&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> ImageFormat.Gif;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (strImageExtension.Equals(<span class="string">&quot;.ico&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> ImageFormat.Icon;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (strImageExtension.Equals(<span class="string">&quot;.jpg&quot;</span>) || strImageExtension.Equals(<span class="string">&quot;.jpeg&quot;</span>) || strImageExtension.Equals(<span class="string">&quot;.jpe&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> ImageFormat.Jpeg;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (strImageExtension.Equals(<span class="string">&quot;.png&quot;</span>) || strImageExtension.Equals(<span class="string">&quot;.pns&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> ImageFormat.Png;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (strImageExtension.Equals(<span class="string">&quot;.tif&quot;</span>) || strImageExtension.Equals(<span class="string">&quot;.tiff&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> ImageFormat.Tiff;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (strImageExtension.Equals(<span class="string">&quot;.wmf&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> ImageFormat.Wmf;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="文件夹加密"><a href="#文件夹加密" class="headerlink" title="文件夹加密"></a>文件夹加密</h5><p>起因是一个女性朋友提出的需求，大概是说不想自己电脑的文件夹被其他人打开，但是又不想加密文件，因为耗时会很久，只想加密文件夹。查过各种资料后没有找到更好的方法，暂且使用一种修改文件夹后缀名达到让电脑识别为控制面板或回收站等图标的方式，然后修改恢复文件夹的时候预设匹对一个设定好的密码文件，就可以达到加密解密文件夹的效果，但是理解原理的人是可以直接破解的，但是我相信理解这项技术的不多，并且不会对每一个系统图标虎视眈眈的。<br><a href="https://github.com/Sadness96/Sadness/blob/master/Code/Helper/Utils.Helper/Encryption/FolderHelper.cs">FolderHelper</a><br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 加密文件</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> Lock = <span class="string">&quot;.&#123;2559a1f2-21d7-11d4-bdaf-00c04f60b9f0&#125;&quot;</span>;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 控制面板</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> Control = <span class="string">&quot;.&#123;21EC2020-3AEA-1069-A2DD-08002B30309D&#125;&quot;</span>;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> RunIE</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> RunIE = <span class="string">&quot;.&#123;2559a1f4-21d7-11d4-bdaf-00c04f60b9f0&#125;&quot;</span>;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 回收站</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> Recycle = <span class="string">&quot;.&#123;645FF040-5081-101B-9F08-00AA002F954E&#125;&quot;</span>;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Help</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> Help = <span class="string">&quot;.&#123;2559a1f1-21d7-11d4-bdaf-00c04f60b9f0&#125;&quot;</span>;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> NetWork</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> NetWork = <span class="string">&quot;.&#123;7007ACC7-3202-11D1-AAD2-00805FC1270E&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 文件夹加密(可破解)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strFolderPath&quot;&gt;</span>文件夹路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strClsid&quot;&gt;</span>Clsid类型<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">FolderEncrypt</span>(<span class="params"><span class="built_in">string</span> strFolderPath, <span class="built_in">string</span> strClsid</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        DirectoryInfo directoryInfo = <span class="keyword">new</span> DirectoryInfo(strFolderPath);</span><br><span class="line">        directoryInfo.MoveTo(directoryInfo.Parent.FullName + <span class="string">&quot;\\&quot;</span> + directoryInfo.Name + strClsid);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 文件夹解密</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 理论上可以解密所有该方法加密的文件夹</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strFolderPath&quot;&gt;</span>文件夹路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">FolderDecrypt</span>(<span class="params"><span class="built_in">string</span> strFolderPath</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        DirectoryInfo directoryInfo = <span class="keyword">new</span> DirectoryInfo(strFolderPath);</span><br><span class="line">        directoryInfo.MoveTo(strFolderPath.Substring(<span class="number">0</span>, strFolderPath.LastIndexOf(<span class="string">&quot;.&quot;</span>)));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 文件夹加密(带密码)(可破解)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strFolderPath&quot;&gt;</span>文件夹路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strClsid&quot;&gt;</span>Clsid类型<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strPassword&quot;&gt;</span>加密密码<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">FolderEncrypt</span>(<span class="params"><span class="built_in">string</span> strFolderPath, <span class="built_in">string</span> strClsid, <span class="built_in">string</span> strPassword</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        DirectoryInfo directoryInfo = <span class="keyword">new</span> DirectoryInfo(strFolderPath);</span><br><span class="line">        XmlDocument xmlDocument = <span class="keyword">new</span> XmlDocument();</span><br><span class="line">        XmlNode xmlNode = xmlDocument.CreateNode(XmlNodeType.XmlDeclaration, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        xmlDocument.AppendChild(xmlNode);</span><br><span class="line">        XmlElement xmlElement = xmlDocument.CreateElement(<span class="string">&quot;&quot;</span>, <span class="string">&quot;ROOT&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        XmlText xmlText = xmlDocument.CreateTextNode(strPassword);</span><br><span class="line">        xmlElement.AppendChild(xmlText);</span><br><span class="line">        xmlDocument.AppendChild(xmlElement);</span><br><span class="line">        xmlDocument.Save(strFolderPath + <span class="string">&quot;\\Lock.xml&quot;</span>);</span><br><span class="line">        directoryInfo.MoveTo(directoryInfo.Parent.FullName + <span class="string">&quot;\\&quot;</span> + directoryInfo.Name + strClsid);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 文件夹解密(带密码)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strFolderPath&quot;&gt;</span>文件夹路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strPassword&quot;&gt;</span>加密密码<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">FolderDecrypt</span>(<span class="params"><span class="built_in">string</span> strFolderPath, <span class="built_in">string</span> strPassword</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        DirectoryInfo directoryInfo = <span class="keyword">new</span> DirectoryInfo(strFolderPath);</span><br><span class="line">        <span class="built_in">bool</span> bIsPassword = <span class="literal">false</span>;</span><br><span class="line">        XmlTextReader xmlTextReader = <span class="keyword">new</span> XmlTextReader(strFolderPath + <span class="string">&quot;\\Lock.xml&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (xmlTextReader.Read())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (xmlTextReader.NodeType == XmlNodeType.Text)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (xmlTextReader.Value == strPassword)</span><br><span class="line">                &#123;</span><br><span class="line">                    bIsPassword = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        xmlTextReader.Close();</span><br><span class="line">        <span class="keyword">if</span> (bIsPassword)</span><br><span class="line">        &#123;</span><br><span class="line">            File.Delete(strFolderPath + <span class="string">&quot;\\Lock.xml&quot;</span>);</span><br><span class="line">            directoryInfo.MoveTo(strFolderPath.Substring(<span class="number">0</span>, strFolderPath.LastIndexOf(<span class="string">&quot;.&quot;</span>)));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>helper</tag>
        <tag>aes</tag>
        <tag>base64</tag>
        <tag>crc32</tag>
        <tag>des</tag>
        <tag>folder</tag>
        <tag>md5</tag>
        <tag>rsa</tag>
        <tag>sha1</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis操作帮助类</title>
    <url>/blog/2018/07/07/csharp-RedisHelper/</url>
    <content><![CDATA[<h3 id="基于-StackExchange-Redis-库操作-Redis-帮助类"><a href="#基于-StackExchange-Redis-库操作-Redis-帮助类" class="headerlink" title="基于 StackExchange.Redis 库操作 Redis 帮助类"></a>基于 StackExchange.Redis 库操作 Redis 帮助类</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><a href="https://redis.io/">Redis</a> 作为典型的 <a href="https://baike.baidu.com/item/%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/6376860?fr=aladdin">非关系型数据库（NoSQL）</a> 采用Key-Value方式储存数据，持久化储存于内存中，对于请发请求速度要远高于传统数据库。</p>
<h4 id="帮助类"><a href="#帮助类" class="headerlink" title="帮助类"></a>帮助类</h4><p><a href="https://github.com/Sadness96/Sadness/blob/master/Code/Helper/Utils.Helper/Redis/RedisHelper.cs">RedisHelper</a> 引用 <a href="https://github.com/StackExchange/StackExchange.Redis/">StackExchange.Redis</a> 库。<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Redis 排序类型</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> OrderType</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 提升</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    Ascending,</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 下降</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    Descending</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获取 Redis 连接对象</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IConnectionMultiplexer <span class="title">GetConnectionRedisMultiplexer</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_connMultiplexer == <span class="literal">null</span> || !_connMultiplexer.IsConnected)</span><br><span class="line">        <span class="keyword">lock</span> (Locker)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_connMultiplexer == <span class="literal">null</span> || !_connMultiplexer.IsConnected)</span><br><span class="line">                _connMultiplexer = ConnectionMultiplexer.Connect(ConnectionString);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _connMultiplexer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">region</span> 其它</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获取事务</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ITransaction <span class="title">GetTransaction</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _db.CreateTransaction();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span> 其它</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">region</span> private field</span></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 连接字符串</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">string</span> ConnectionString;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> redis 连接对象</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> IConnectionMultiplexer _connMultiplexer;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 默认的 Key 值（用来当作 RedisKey 的前缀）</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">string</span> DefaultKey;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 锁</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">object</span> Locker = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 数据库</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> IDatabase _db;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span> private field</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">region</span> 构造函数</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 构造函数</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">RedisHelper</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        ConnectionString = ConfigurationManager.ConnectionStrings[<span class="string">&quot;RedisConnectionString&quot;</span>].ConnectionString;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception)</span><br><span class="line">    &#123;</span><br><span class="line">        ConnectionString = <span class="string">&quot;127.0.0.1:6379&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    _connMultiplexer = ConnectionMultiplexer.Connect(ConnectionString);</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        DefaultKey = ConfigurationManager.AppSettings[<span class="string">&quot;Redis.DefaultKey&quot;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception)</span><br><span class="line">    &#123;</span><br><span class="line">        DefaultKey = <span class="built_in">string</span>.Empty;</span><br><span class="line">    &#125;</span><br><span class="line">    AddRegisterEvent();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 构造函数</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;db&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RedisHelper</span>(<span class="params"><span class="built_in">int</span> db = <span class="number">0</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _db = _connMultiplexer.GetDatabase(db);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span> 构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">region</span> String 操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 设置 key 并保存字符串（如果 key 已存在，则覆盖值）</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisValue&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;expiry&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">StringSet</span>(<span class="params"><span class="built_in">string</span> redisKey, <span class="built_in">string</span> redisValue, TimeSpan? expiry = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> _db.StringSet(redisKey, redisValue, expiry);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 保存多个 Key-value</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;keyValuePairs&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">StringSet</span>(<span class="params">IEnumerable&lt;KeyValuePair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&gt; keyValuePairs</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pairs = keyValuePairs.Select(x =&gt; <span class="keyword">new</span> KeyValuePair&lt;RedisKey, RedisValue&gt;(AddKeyPrefix(x.Key), x.Value));</span><br><span class="line">    <span class="keyword">return</span> _db.StringSet(pairs.ToArray());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获取字符串</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;expiry&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">StringGet</span>(<span class="params"><span class="built_in">string</span> redisKey, TimeSpan? expiry = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> _db.StringGet(redisKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 存储一个对象（该对象会被序列化保存）</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisValue&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;expiry&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">StringSet</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> redisKey, T redisValue, TimeSpan? expiry = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">var</span> json = Serialize(redisValue);</span><br><span class="line">    <span class="keyword">return</span> _db.StringSet(redisKey, json, expiry);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获取一个对象（会进行反序列化）</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;expiry&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">StringGet</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> redisKey, TimeSpan? expiry = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> Deserialize&lt;T&gt;(_db.StringGet(redisKey));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">region</span> async</span></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 保存一个字符串值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisValue&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;expiry&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">bool</span>&gt; <span class="title">StringSetAsync</span>(<span class="params"><span class="built_in">string</span> redisKey, <span class="built_in">string</span> redisValue, TimeSpan? expiry = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> _db.StringSetAsync(redisKey, redisValue, expiry);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 保存一组字符串值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;keyValuePairs&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">bool</span>&gt; <span class="title">StringSetAsync</span>(<span class="params">IEnumerable&lt;KeyValuePair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&gt; keyValuePairs</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pairs = keyValuePairs.Select(x =&gt; <span class="keyword">new</span> KeyValuePair&lt;RedisKey, RedisValue&gt;(AddKeyPrefix(x.Key), x.Value));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> _db.StringSetAsync(pairs.ToArray());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获取单个值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisValue&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;expiry&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">string</span>&gt; <span class="title">StringGetAsync</span>(<span class="params"><span class="built_in">string</span> redisKey, <span class="built_in">string</span> redisValue, TimeSpan? expiry = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> _db.StringGetAsync(redisKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 存储一个对象（该对象会被序列化保存）</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisValue&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;expiry&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="title">Task</span>&lt;<span class="title">bool</span>&gt; <span class="title">StringSetAsync</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> redisKey, T redisValue, TimeSpan? expiry = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">var</span> json = Serialize(redisValue);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> _db.StringSetAsync(redisKey, json, expiry);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获取一个对象（会进行反序列化）</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;expiry&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="title">Task</span>&lt;<span class="title">T</span>&gt; <span class="title">StringGetAsync</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> redisKey, TimeSpan? expiry = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> Deserialize&lt;T&gt;(<span class="keyword">await</span> _db.StringGetAsync(redisKey));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span> async</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span> String 操作</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">region</span> Hash 操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 判断该字段是否存在 hash 中</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;hashField&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">HashExists</span>(<span class="params"><span class="built_in">string</span> redisKey, <span class="built_in">string</span> hashField</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> _db.HashExists(redisKey, hashField);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 从 hash 中移除指定字段</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;hashField&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">HashDelete</span>(<span class="params"><span class="built_in">string</span> redisKey, <span class="built_in">string</span> hashField</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> _db.HashDelete(redisKey, hashField);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 从 hash 中移除指定字段</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;hashFields&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">long</span> <span class="title">HashDelete</span>(<span class="params"><span class="built_in">string</span> redisKey, IEnumerable&lt;<span class="built_in">string</span>&gt; hashFields</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">var</span> fields = hashFields.Select(x =&gt; (RedisValue)x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _db.HashDelete(redisKey, fields.ToArray());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 在 hash 设定值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;hashField&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">HashSet</span>(<span class="params"><span class="built_in">string</span> redisKey, <span class="built_in">string</span> hashField, <span class="built_in">string</span> <span class="keyword">value</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> _db.HashSet(redisKey, hashField, <span class="keyword">value</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 在 hash 中设定值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;hashFields&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HashSet</span>(<span class="params"><span class="built_in">string</span> redisKey, IEnumerable&lt;KeyValuePair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&gt; hashFields</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">var</span> entries = hashFields.Select(x =&gt; <span class="keyword">new</span> HashEntry(x.Key, x.Value));</span><br><span class="line"></span><br><span class="line">    _db.HashSet(redisKey, entries.ToArray());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 在 hash 中获取值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;hashField&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">HashGet</span>(<span class="params"><span class="built_in">string</span> redisKey, <span class="built_in">string</span> hashField</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> _db.HashGet(redisKey, hashField);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 在 hash 中获取值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;hashFields&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IEnumerable&lt;<span class="built_in">string</span>&gt; <span class="title">HashGet</span>(<span class="params"><span class="built_in">string</span> redisKey, IEnumerable&lt;<span class="built_in">string</span>&gt; hashFields</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">var</span> fields = hashFields.Select(x =&gt; (RedisValue)x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ConvertStrings(_db.HashGet(redisKey, fields.ToArray()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 从 hash 返回所有的字段值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IEnumerable&lt;<span class="built_in">string</span>&gt; <span class="title">HashKeys</span>(<span class="params"><span class="built_in">string</span> redisKey</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> ConvertStrings(_db.HashKeys(redisKey));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 返回 hash 中的所有值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IEnumerable&lt;<span class="built_in">string</span>&gt; <span class="title">HashValues</span>(<span class="params"><span class="built_in">string</span> redisKey</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> ConvertStrings(_db.HashValues(redisKey));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 在 hash 设定值（序列化）</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;hashField&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisValue&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">HashSet</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> redisKey, <span class="built_in">string</span> hashField, T redisValue</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">var</span> json = Serialize(redisValue);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _db.HashSet(redisKey, hashField, json);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 在 hash 中获取值（反序列化）</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;hashField&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">HashGet</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> redisKey, <span class="built_in">string</span> hashField</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Deserialize&lt;T&gt;(_db.HashGet(redisKey, hashField));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">region</span> async</span></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 判断该字段是否存在 hash 中</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;hashField&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">bool</span>&gt; <span class="title">HashExistsAsync</span>(<span class="params"><span class="built_in">string</span> redisKey, <span class="built_in">string</span> hashField</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> _db.HashExistsAsync(redisKey, hashField);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 从 hash 中移除指定字段</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;hashField&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">bool</span>&gt; <span class="title">HashDeleteAsync</span>(<span class="params"><span class="built_in">string</span> redisKey, <span class="built_in">string</span> hashField</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> _db.HashDeleteAsync(redisKey, hashField);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 从 hash 中移除指定字段</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;hashFields&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">long</span>&gt; <span class="title">HashDeleteAsync</span>(<span class="params"><span class="built_in">string</span> redisKey, IEnumerable&lt;<span class="built_in">string</span>&gt; hashFields</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">var</span> fields = hashFields.Select(x =&gt; (RedisValue)x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> _db.HashDeleteAsync(redisKey, fields.ToArray());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 在 hash 设定值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;hashField&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">bool</span>&gt; <span class="title">HashSetAsync</span>(<span class="params"><span class="built_in">string</span> redisKey, <span class="built_in">string</span> hashField, <span class="built_in">string</span> <span class="keyword">value</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> _db.HashSetAsync(redisKey, hashField, <span class="keyword">value</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 在 hash 中设定值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;hashFields&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">HashSetAsync</span>(<span class="params"><span class="built_in">string</span> redisKey, IEnumerable&lt;KeyValuePair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&gt; hashFields</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">var</span> entries = hashFields.Select(x =&gt; <span class="keyword">new</span> HashEntry(AddKeyPrefix(x.Key), x.Value));</span><br><span class="line">    <span class="keyword">await</span> _db.HashSetAsync(redisKey, entries.ToArray());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 在 hash 中获取值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;hashField&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">string</span>&gt; <span class="title">HashGetAsync</span>(<span class="params"><span class="built_in">string</span> redisKey, <span class="built_in">string</span> hashField</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> _db.HashGetAsync(redisKey, hashField);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 在 hash 中获取值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;hashFields&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IEnumerable&lt;<span class="built_in">string</span>&gt;&gt; HashGetAsync(<span class="built_in">string</span> redisKey, IEnumerable&lt;<span class="built_in">string</span>&gt; hashFields,</span><br><span class="line">    <span class="built_in">string</span> <span class="keyword">value</span>)</span><br><span class="line">&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">var</span> fields = hashFields.Select(x =&gt; (RedisValue)x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ConvertStrings(<span class="keyword">await</span> _db.HashGetAsync(redisKey, fields.ToArray()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 从 hash 返回所有的字段值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IEnumerable&lt;<span class="built_in">string</span>&gt;&gt; HashKeysAsync(<span class="built_in">string</span> redisKey)</span><br><span class="line">&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> ConvertStrings(<span class="keyword">await</span> _db.HashKeysAsync(redisKey));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 返回 hash 中的所有值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IEnumerable&lt;<span class="built_in">string</span>&gt;&gt; HashValuesAsync(<span class="built_in">string</span> redisKey)</span><br><span class="line">&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> ConvertStrings(<span class="keyword">await</span> _db.HashValuesAsync(redisKey));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 在 hash 设定值（序列化）</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;hashField&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="title">Task</span>&lt;<span class="title">bool</span>&gt; <span class="title">HashSetAsync</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> redisKey, <span class="built_in">string</span> hashField, T <span class="keyword">value</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">var</span> json = Serialize(<span class="keyword">value</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> _db.HashSetAsync(redisKey, hashField, json);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 在 hash 中获取值（反序列化）</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;hashField&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="title">Task</span>&lt;<span class="title">T</span>&gt; <span class="title">HashGetAsync</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> redisKey, <span class="built_in">string</span> hashField</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> Deserialize&lt;T&gt;(<span class="keyword">await</span> _db.HashGetAsync(redisKey, hashField));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span> async</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span> Hash 操作</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">region</span> List 操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 移除并返回存储在该键列表的第一个元素</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">ListLeftPop</span>(<span class="params"><span class="built_in">string</span> redisKey</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> _db.ListLeftPop(redisKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 移除并返回存储在该键列表的最后一个元素</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">ListRightPop</span>(<span class="params"><span class="built_in">string</span> redisKey</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> _db.ListRightPop(redisKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 移除列表指定键上与该值相同的元素</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisValue&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">long</span> <span class="title">ListRemove</span>(<span class="params"><span class="built_in">string</span> redisKey, <span class="built_in">string</span> redisValue</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> _db.ListRemove(redisKey, redisValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 在列表尾部插入值。如果键不存在，先创建再插入值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisValue&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">long</span> <span class="title">ListRightPush</span>(<span class="params"><span class="built_in">string</span> redisKey, <span class="built_in">string</span> redisValue</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> _db.ListRightPush(redisKey, redisValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 在列表头部插入值。如果键不存在，先创建再插入值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisValue&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">long</span> <span class="title">ListLeftPush</span>(<span class="params"><span class="built_in">string</span> redisKey, <span class="built_in">string</span> redisValue</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> _db.ListLeftPush(redisKey, redisValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 返回列表上该键的长度，如果不存在，返回 0</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">long</span> <span class="title">ListLength</span>(<span class="params"><span class="built_in">string</span> redisKey</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> _db.ListLength(redisKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 返回在该列表上键所对应的元素</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;start&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;stop&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IEnumerable&lt;<span class="built_in">string</span>&gt; <span class="title">ListRange</span>(<span class="params"><span class="built_in">string</span> redisKey, <span class="built_in">long</span> start = <span class="number">0L</span>, <span class="built_in">long</span> stop = <span class="number">-1L</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> ConvertStrings(_db.ListRange(redisKey, start, stop));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 移除并返回存储在该键列表的第一个元素</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">ListLeftPop</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> redisKey</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> Deserialize&lt;T&gt;(_db.ListLeftPop(redisKey));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 移除并返回存储在该键列表的最后一个元素</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">ListRightPop</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> redisKey</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> Deserialize&lt;T&gt;(_db.ListRightPop(redisKey));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 在列表尾部插入值。如果键不存在，先创建再插入值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisValue&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">long</span> <span class="title">ListRightPush</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> redisKey, T redisValue</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> _db.ListRightPush(redisKey, Serialize(redisValue));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 在列表头部插入值。如果键不存在，先创建再插入值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisValue&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">long</span> <span class="title">ListLeftPush</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> redisKey, T redisValue</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> _db.ListLeftPush(redisKey, Serialize(redisValue));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">region</span> List-async</span></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 移除并返回存储在该键列表的第一个元素</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">string</span>&gt; <span class="title">ListLeftPopAsync</span>(<span class="params"><span class="built_in">string</span> redisKey</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> _db.ListLeftPopAsync(redisKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 移除并返回存储在该键列表的最后一个元素</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">string</span>&gt; <span class="title">ListRightPopAsync</span>(<span class="params"><span class="built_in">string</span> redisKey</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> _db.ListRightPopAsync(redisKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 移除列表指定键上与该值相同的元素</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisValue&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">long</span>&gt; <span class="title">ListRemoveAsync</span>(<span class="params"><span class="built_in">string</span> redisKey, <span class="built_in">string</span> redisValue</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> _db.ListRemoveAsync(redisKey, redisValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 在列表尾部插入值。如果键不存在，先创建再插入值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisValue&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">long</span>&gt; <span class="title">ListRightPushAsync</span>(<span class="params"><span class="built_in">string</span> redisKey, <span class="built_in">string</span> redisValue</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> _db.ListRightPushAsync(redisKey, redisValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 在列表头部插入值。如果键不存在，先创建再插入值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisValue&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">long</span>&gt; <span class="title">ListLeftPushAsync</span>(<span class="params"><span class="built_in">string</span> redisKey, <span class="built_in">string</span> redisValue</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> _db.ListLeftPushAsync(redisKey, redisValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 返回列表上该键的长度，如果不存在，返回 0</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">long</span>&gt; <span class="title">ListLengthAsync</span>(<span class="params"><span class="built_in">string</span> redisKey</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> _db.ListLengthAsync(redisKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 返回在该列表上键所对应的元素</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;start&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;stop&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IEnumerable&lt;<span class="built_in">string</span>&gt;&gt; ListRangeAsync(<span class="built_in">string</span> redisKey, <span class="built_in">long</span> start = <span class="number">0L</span>, <span class="built_in">long</span> stop = <span class="number">-1L</span>)</span><br><span class="line">&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">var</span> query = <span class="keyword">await</span> _db.ListRangeAsync(redisKey, start, stop);</span><br><span class="line">    <span class="keyword">return</span> query.Select(x =&gt; x.ToString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 移除并返回存储在该键列表的第一个元素</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="title">Task</span>&lt;<span class="title">T</span>&gt; <span class="title">ListLeftPopAsync</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> redisKey</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> Deserialize&lt;T&gt;(<span class="keyword">await</span> _db.ListLeftPopAsync(redisKey));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 移除并返回存储在该键列表的最后一个元素</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="title">Task</span>&lt;<span class="title">T</span>&gt; <span class="title">ListRightPopAsync</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> redisKey</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> Deserialize&lt;T&gt;(<span class="keyword">await</span> _db.ListRightPopAsync(redisKey));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 在列表尾部插入值。如果键不存在，先创建再插入值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisValue&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="title">Task</span>&lt;<span class="title">long</span>&gt; <span class="title">ListRightPushAsync</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> redisKey, T redisValue</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> _db.ListRightPushAsync(redisKey, Serialize(redisValue));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 在列表头部插入值。如果键不存在，先创建再插入值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisValue&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="title">Task</span>&lt;<span class="title">long</span>&gt; <span class="title">ListLeftPushAsync</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> redisKey, T redisValue</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> _db.ListLeftPushAsync(redisKey, Serialize(redisValue));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span> List-async</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span> List 操作</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">region</span> SortedSet 操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> SortedSet 新增</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;member&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;score&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">SortedSetAdd</span>(<span class="params"><span class="built_in">string</span> redisKey, <span class="built_in">string</span> member, <span class="built_in">double</span> score</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> _db.SortedSetAdd(redisKey, member, score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 在有序集合中返回指定范围的元素，默认情况下从低到高。</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;start&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;stop&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;order&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IEnumerable&lt;<span class="built_in">string</span>&gt; <span class="title">SortedSetRangeByRank</span>(<span class="params"><span class="built_in">string</span> redisKey, <span class="built_in">long</span> start = <span class="number">0L</span>, <span class="built_in">long</span> stop = <span class="number">-1L</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    OrderType order = OrderType.Ascending</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> _db.SortedSetRangeByRank(redisKey, start, stop, (Order)order).Select(x =&gt; x.ToString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 返回有序集合的元素个数</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">long</span> <span class="title">SortedSetLength</span>(<span class="params"><span class="built_in">string</span> redisKey</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> _db.SortedSetLength(redisKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 返回有序集合的元素个数</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;memebr&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">SortedSetLength</span>(<span class="params"><span class="built_in">string</span> redisKey, <span class="built_in">string</span> memebr</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> _db.SortedSetRemove(redisKey, memebr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> SortedSet 新增</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;member&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;score&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">SortedSetAdd</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> redisKey, T member, <span class="built_in">double</span> score</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">var</span> json = Serialize(member);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _db.SortedSetAdd(redisKey, json, score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 增量的得分排序的集合中的成员存储键值键按增量</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;member&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">SortedSetIncrement</span>(<span class="params"><span class="built_in">string</span> redisKey, <span class="built_in">string</span> member, <span class="built_in">double</span> <span class="keyword">value</span> = <span class="number">1</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> _db.SortedSetIncrement(redisKey, member, <span class="keyword">value</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">region</span> SortedSet-Async</span></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> SortedSet 新增</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;member&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;score&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">bool</span>&gt; <span class="title">SortedSetAddAsync</span>(<span class="params"><span class="built_in">string</span> redisKey, <span class="built_in">string</span> member, <span class="built_in">double</span> score</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> _db.SortedSetAddAsync(redisKey, member, score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 在有序集合中返回指定范围的元素，默认情况下从低到高。</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IEnumerable&lt;<span class="built_in">string</span>&gt;&gt; SortedSetRangeByRankAsync(<span class="built_in">string</span> redisKey)</span><br><span class="line">&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> ConvertStrings(<span class="keyword">await</span> _db.SortedSetRangeByRankAsync(redisKey));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 返回有序集合的元素个数</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">long</span>&gt; <span class="title">SortedSetLengthAsync</span>(<span class="params"><span class="built_in">string</span> redisKey</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> _db.SortedSetLengthAsync(redisKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 返回有序集合的元素个数</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;memebr&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">bool</span>&gt; <span class="title">SortedSetRemoveAsync</span>(<span class="params"><span class="built_in">string</span> redisKey, <span class="built_in">string</span> memebr</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> _db.SortedSetRemoveAsync(redisKey, memebr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> SortedSet 新增</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;member&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;score&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="title">Task</span>&lt;<span class="title">bool</span>&gt; <span class="title">SortedSetAddAsync</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> redisKey, T member, <span class="built_in">double</span> score</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">var</span> json = Serialize(member);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> _db.SortedSetAddAsync(redisKey, json, score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 增量的得分排序的集合中的成员存储键值键按增量</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;member&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Task&lt;<span class="built_in">double</span>&gt; <span class="title">SortedSetIncrementAsync</span>(<span class="params"><span class="built_in">string</span> redisKey, <span class="built_in">string</span> member, <span class="built_in">double</span> <span class="keyword">value</span> = <span class="number">1</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> _db.SortedSetIncrementAsync(redisKey, member, <span class="keyword">value</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span> SortedSet-Async</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span> SortedSet 操作</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">region</span> key 操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 移除指定 Key</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">KeyDelete</span>(<span class="params"><span class="built_in">string</span> redisKey</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> _db.KeyDelete(redisKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 移除指定 Key</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKeys&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">long</span> <span class="title">KeyDelete</span>(<span class="params">IEnumerable&lt;<span class="built_in">string</span>&gt; redisKeys</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> keys = redisKeys.Select(x =&gt; (RedisKey)AddKeyPrefix(x));</span><br><span class="line">    <span class="keyword">return</span> _db.KeyDelete(keys.ToArray());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 校验 Key 是否存在</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">KeyExists</span>(<span class="params"><span class="built_in">string</span> redisKey</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> _db.KeyExists(redisKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 重命名 Key</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisNewKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">KeyRename</span>(<span class="params"><span class="built_in">string</span> redisKey, <span class="built_in">string</span> redisNewKey</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> _db.KeyRename(redisKey, redisNewKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 设置 Key 的时间</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;expiry&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">KeyExpire</span>(<span class="params"><span class="built_in">string</span> redisKey, TimeSpan? expiry</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> _db.KeyExpire(redisKey, expiry);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">region</span> key-async</span></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 移除指定 Key</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">bool</span>&gt; <span class="title">KeyDeleteAsync</span>(<span class="params"><span class="built_in">string</span> redisKey</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> _db.KeyDeleteAsync(redisKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 移除指定 Key</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKeys&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">long</span>&gt; <span class="title">KeyDeleteAsync</span>(<span class="params">IEnumerable&lt;<span class="built_in">string</span>&gt; redisKeys</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> keys = redisKeys.Select(x =&gt; (RedisKey)AddKeyPrefix(x));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> _db.KeyDeleteAsync(keys.ToArray());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 校验 Key 是否存在</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">bool</span>&gt; <span class="title">KeyExistsAsync</span>(<span class="params"><span class="built_in">string</span> redisKey</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> _db.KeyExistsAsync(redisKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 重命名 Key</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisNewKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">bool</span>&gt; <span class="title">KeyRenameAsync</span>(<span class="params"><span class="built_in">string</span> redisKey, <span class="built_in">string</span> redisNewKey</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> _db.KeyRenameAsync(redisKey, redisNewKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 设置 Key 的时间</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;redisKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;expiry&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">bool</span>&gt; <span class="title">KeyExpireAsync</span>(<span class="params"><span class="built_in">string</span> redisKey, TimeSpan? expiry</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    redisKey = AddKeyPrefix(redisKey);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> _db.KeyExpireAsync(redisKey, expiry);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span> key-async</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span> key 操作</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">region</span> private method</span></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 添加 Key 的前缀</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;key&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">AddKeyPrefix</span>(<span class="params"><span class="built_in">string</span> key</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">$&quot;<span class="subst">&#123;DefaultKey&#125;</span><span class="subst">&#123;key&#125;</span>&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 转换为字符串</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span><span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;list&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="title">IEnumerable</span>&lt;<span class="title">string</span>&gt; <span class="title">ConvertStrings</span>&lt;<span class="title">T</span>&gt;(<span class="params">IEnumerable&lt;T&gt; list</span>) <span class="keyword">where</span> T : <span class="keyword">struct</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (list == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(list));</span><br><span class="line">    <span class="keyword">return</span> list.Select(x =&gt; x.ToString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">region</span> 注册事件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 添加注册事件</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AddRegisterEvent</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _connMultiplexer.ConnectionRestored += ConnMultiplexer_ConnectionRestored;</span><br><span class="line">    _connMultiplexer.ConnectionFailed += ConnMultiplexer_ConnectionFailed;</span><br><span class="line">    _connMultiplexer.ErrorMessage += ConnMultiplexer_ErrorMessage;</span><br><span class="line">    _connMultiplexer.ConfigurationChanged += ConnMultiplexer_ConfigurationChanged;</span><br><span class="line">    _connMultiplexer.HashSlotMoved += ConnMultiplexer_HashSlotMoved;</span><br><span class="line">    _connMultiplexer.InternalError += ConnMultiplexer_InternalError;</span><br><span class="line">    _connMultiplexer.ConfigurationChangedBroadcast += ConnMultiplexer_ConfigurationChangedBroadcast;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 重新配置广播时（通常意味着主从同步更改）</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ConnMultiplexer_ConfigurationChangedBroadcast</span>(<span class="params"><span class="built_in">object</span> sender, EndPointEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;<span class="keyword">nameof</span>(ConnMultiplexer_ConfigurationChangedBroadcast)&#125;</span>: <span class="subst">&#123;e.EndPoint&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 发生内部错误时（主要用于调试）</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ConnMultiplexer_InternalError</span>(<span class="params"><span class="built_in">object</span> sender, InternalErrorEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;<span class="keyword">nameof</span>(ConnMultiplexer_InternalError)&#125;</span>: <span class="subst">&#123;e.Exception&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 更改集群时</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ConnMultiplexer_HashSlotMoved</span>(<span class="params"><span class="built_in">object</span> sender, HashSlotMovedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Console.WriteLine(</span><br><span class="line">        <span class="string">$&quot;<span class="subst">&#123;<span class="keyword">nameof</span>(ConnMultiplexer_HashSlotMoved)&#125;</span>: <span class="subst">&#123;<span class="keyword">nameof</span>(e.OldEndPoint)&#125;</span>-<span class="subst">&#123;e.OldEndPoint&#125;</span> To <span class="subst">&#123;<span class="keyword">nameof</span>(e.NewEndPoint)&#125;</span>-<span class="subst">&#123;e.NewEndPoint&#125;</span>, &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 配置更改时</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ConnMultiplexer_ConfigurationChanged</span>(<span class="params"><span class="built_in">object</span> sender, EndPointEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;<span class="keyword">nameof</span>(ConnMultiplexer_ConfigurationChanged)&#125;</span>: <span class="subst">&#123;e.EndPoint&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 发生错误时</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ConnMultiplexer_ErrorMessage</span>(<span class="params"><span class="built_in">object</span> sender, RedisErrorEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;<span class="keyword">nameof</span>(ConnMultiplexer_ErrorMessage)&#125;</span>: <span class="subst">&#123;e.Message&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 物理连接失败时</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ConnMultiplexer_ConnectionFailed</span>(<span class="params"><span class="built_in">object</span> sender, ConnectionFailedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;<span class="keyword">nameof</span>(ConnMultiplexer_ConnectionFailed)&#125;</span>: <span class="subst">&#123;e.Exception&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 建立物理连接时</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ConnMultiplexer_ConnectionRestored</span>(<span class="params"><span class="built_in">object</span> sender, ConnectionFailedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;<span class="keyword">nameof</span>(ConnMultiplexer_ConnectionRestored)&#125;</span>: <span class="subst">&#123;e.Exception&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span> 注册事件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 序列化</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;obj&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] <span class="title">Serialize</span>(<span class="params"><span class="built_in">object</span> obj</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> binaryFormatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> memoryStream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">    &#123;</span><br><span class="line">        binaryFormatter.Serialize(memoryStream, obj);</span><br><span class="line">        <span class="keyword">var</span> data = memoryStream.ToArray();</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 反序列化</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span><span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;data&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> T <span class="title">Deserialize</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">byte</span>[] data</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (data == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">default</span>(T);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> binaryFormatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> memoryStream = <span class="keyword">new</span> MemoryStream(data))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> result = (T)binaryFormatter.Deserialize(memoryStream);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span> private method</span></span><br></pre></td></tr></table></figure><br>2018年9月6日补充方法：获得所有Key/Key-Value<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获得Redis所有Key值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>Redis所有Key值<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;<span class="built_in">string</span>&gt; <span class="title">GetAllKeys</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    List&lt;<span class="built_in">string</span>&gt; keyList = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> ep <span class="keyword">in</span> _connMultiplexer.GetEndPoints())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> server = _connMultiplexer.GetServer(ep);</span><br><span class="line">        <span class="keyword">var</span> keys = server.Keys(<span class="number">0</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> keys)</span><br><span class="line">        &#123;</span><br><span class="line">            keyList.Add((<span class="built_in">string</span>)item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> keyList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获得Redis所有Key值和Value值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>Redis所有Key值和Value值<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; <span class="title">GetAllKeysValues</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; dicAllKeysValues = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;();</span><br><span class="line">    List&lt;<span class="built_in">string</span>&gt; listAllKeys = GetAllKeys();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> listAllKeys)</span><br><span class="line">    &#123;</span><br><span class="line">        dicAllKeysValues.Add(item, StringGet(item));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dicAllKeysValues;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><p>Redis错误信息：MISCONG Redis is configured to save RDB<br>执行：config set stop-writes-on-bgsave-error no</p>
]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>helper</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows注册表帮助类</title>
    <url>/blog/2017/06/22/csharp-RegistryHelper/</url>
    <content><![CDATA[<h3 id="基于-Microsoft-Win32-库操作Windows注册表帮助类"><a href="#基于-Microsoft-Win32-库操作Windows注册表帮助类" class="headerlink" title="基于 Microsoft.Win32 库操作Windows注册表帮助类"></a>基于 Microsoft.Win32 库操作Windows注册表帮助类</h3><span id="more"></span>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><a href="https://baike.baidu.com/item/%E6%B3%A8%E5%86%8C%E8%A1%A8/101856?fr=aladdin">注册表（Registry）</a> 作为Windows操作系统中的一个核心数据库，用于存储系统和应用程序的设置信息。修改常见的功能有：软件启动项、系统级菜单、文件默认启动程序及默认图标。常见的修改方式有Windows自带的命令regedit进入图形界面修改，或者熟悉<a href="https://baike.baidu.com/item/%E6%89%B9%E5%A4%84%E7%90%86/1448600?fromtitle=.bat&amp;fromid=6476412&amp;fr=aladdin">批处理脚本（.bat）</a>的朋友可以更方便的修改。</p>
<h4 id="帮助类"><a href="#帮助类" class="headerlink" title="帮助类"></a>帮助类</h4><p><a href="https://github.com/Sadness96/Sadness/blob/master/Code/Helper/Utils.Helper/Registry/RegistryHelper.cs">RegistryHelper</a> 引用 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.win32?redirectedfrom=MSDN&amp;view=netframework-4.8">Microsoft.Win32</a> 库。</p>
<h5 id="设置软件启动项"><a href="#设置软件启动项" class="headerlink" title="设置软件启动项"></a>设置软件启动项</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">region</span> Registry Startup Items</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 创建注册表启动项</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strName&quot;&gt;</span>键值名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strSoftwarePath&quot;&gt;</span>启动项软件路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">CreateStartupItems</span>(<span class="params"><span class="built_in">string</span> strName, <span class="built_in">string</span> strSoftwarePath</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strName) || <span class="built_in">string</span>.IsNullOrEmpty(strSoftwarePath))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        RegistryKey registryKey = Microsoft.Win32.Registry.CurrentUser.OpenSubKey(<span class="string">@&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Run&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            registryKey = Microsoft.Win32.Registry.CurrentUser.CreateSubKey(<span class="string">@&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Run&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        registryKey.SetValue(strName, strSoftwarePath);</span><br><span class="line">        registryKey.Close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 删除注册表启动项</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strName&quot;&gt;</span>键值名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">DeleteStartupItems</span>(<span class="params"><span class="built_in">string</span> strName</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strName))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        RegistryKey registryKey = Microsoft.Win32.Registry.CurrentUser.OpenSubKey(<span class="string">@&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Run&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        registryKey.DeleteValue(strName, <span class="literal">false</span>);</span><br><span class="line">        registryKey.Close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获得注册表中所有启动项</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>注册表中启动项(键值,启动路径)<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; <span class="title">GetAllStartupItems</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; dicAllStartupItems = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;();</span><br><span class="line">        RegistryKey registryKey = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//获取HKEY_CURRENT_USER中的启动项</span></span><br><span class="line">        registryKey = Microsoft.Win32.Registry.CurrentUser.OpenSubKey(<span class="string">@&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Run&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (registryKey != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">string</span> strValeName <span class="keyword">in</span> registryKey.GetValueNames())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!dicAllStartupItems.ContainsKey(strValeName))</span><br><span class="line">                &#123;</span><br><span class="line">                    dicAllStartupItems.Add(strValeName, registryKey.GetValue(strValeName).ToString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取HKEY_LOCAL_MACHINE中的启动项</span></span><br><span class="line">        registryKey = Microsoft.Win32.Registry.LocalMachine.OpenSubKey(<span class="string">@&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Run&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (registryKey != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">string</span> strValeName <span class="keyword">in</span> registryKey.GetValueNames())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!dicAllStartupItems.ContainsKey(strValeName))</span><br><span class="line">                &#123;</span><br><span class="line">                    dicAllStartupItems.Add(strValeName, registryKey.GetValue(strValeName).ToString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dicAllStartupItems;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span></span></span><br></pre></td></tr></table></figure>
<h6 id="UAC-策略导致部分电脑无法开机自启"><a href="#UAC-策略导致部分电脑无法开机自启" class="headerlink" title="UAC 策略导致部分电脑无法开机自启"></a>UAC 策略导致部分电脑无法开机自启</h6><p><a href="https://learn.microsoft.com/zh-cn/previous-versions/mt634236(v=vs.85%29">UAC (用户帐户控制)</a> 是由微软在其 Windows Vista 及更高版本操作系统中采用的一种控制机制。其原理是通知用户是否对应用程序使用硬盘驱动器和系统文件授权，以达到帮助阻止恶意程序损坏系统的效果。<br>非管理员用户登录的 Windows 系统，设置注册表开机自启，要求以管理员权限运行的程序（软件图标右下角有个盾牌）无法自动启动，修改 UAC 策略禁用后即可开机自启，所有软件以管理员权限运行。<br>运行 -&gt; gpedit.msc -&gt; 计算机配置 -&gt; Windows 设置 -&gt; 安全设置 -&gt; 本地策略 -&gt; 安全选项 -&gt; 禁用：用户账户控制：以管理员批准模式运行所有管理员<br><img src="https://sadness96.github.io/images/blog/csharp-RegistryHelper/gpedit_uac.jpg"/></p>
<h6 id="Windows-开机免密登录"><a href="#Windows-开机免密登录" class="headerlink" title="Windows 开机免密登录"></a>Windows 开机免密登录</h6><p>使用注册表方式启动软件，如果在系统启动后没有登录用户，是无法启动软件的，表现状态为开机后软件没有启动，输入密码后软件启动，需设置 Windows 开机免密登录。</p>
<ol>
<li>运行中输入 netplwiz → 取消勾选：要使用本机算计，用户必须输入用户名和密码 → 点击应用后需要输入自动登录的用户名和密码 → 确定即可。</li>
<li>个别系统在 netplwiz 中没有（要使用本机算计，用户必须输入用户名和密码）选项，需要在注册表：[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\PasswordLess\Device] 中修改 DevicePasswordLessBuildVersion 值为 0 即可。</li>
</ol>
<h5 id="设置系统右键菜单"><a href="#设置系统右键菜单" class="headerlink" title="设置系统右键菜单"></a>设置系统右键菜单</h5><h6 id="桌面右键菜单项"><a href="#桌面右键菜单项" class="headerlink" title="桌面右键菜单项"></a>桌面右键菜单项</h6><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">region</span> 注册表桌面右键菜单项</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 创建注册表桌面右键菜单项</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strName&quot;&gt;</span>键值名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strDisplayName&quot;&gt;</span>右键菜单显示名称,如果为空显示键值名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strSoftwarePath&quot;&gt;</span>启动软件路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strIcoPath&quot;&gt;</span>右键菜单图片路径,如果为空则不显示图片<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">CreateDesktopRightClickMenu</span>(<span class="params"><span class="built_in">string</span> strName, <span class="built_in">string</span> strDisplayName, <span class="built_in">string</span> strSoftwarePath, <span class="built_in">string</span> strIcoPath</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strName) || <span class="built_in">string</span>.IsNullOrEmpty(strSoftwarePath))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        RegistryKey registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(<span class="string">@&quot;Directory\Background\shell\&quot;</span> + strName, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            registryKey = Microsoft.Win32.Registry.ClassesRoot.CreateSubKey(<span class="string">@&quot;Directory\Background\shell\&quot;</span> + strName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strDisplayName))</span><br><span class="line">        &#123;</span><br><span class="line">            registryKey.SetValue(<span class="string">&quot;&quot;</span>, strDisplayName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strIcoPath) &amp;&amp; File.Exists(strIcoPath))</span><br><span class="line">        &#123;</span><br><span class="line">            registryKey.SetValue(<span class="string">&quot;icon&quot;</span>, strIcoPath);</span><br><span class="line">        &#125;</span><br><span class="line">        registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(<span class="string">@&quot;Directory\Background\shell\&quot;</span> + strName + <span class="string">@&quot;\command&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            registryKey = Microsoft.Win32.Registry.ClassesRoot.CreateSubKey(<span class="string">@&quot;Directory\Background\shell\&quot;</span> + strName + <span class="string">@&quot;\command&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        registryKey.SetValue(<span class="string">&quot;&quot;</span>, strSoftwarePath);</span><br><span class="line">        registryKey.Close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 创建注册表桌面右键菜单项(二级菜单)(WIN7-X64下测试通过)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strName&quot;&gt;</span>一级菜单键值名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strDisplayName&quot;&gt;</span>一级菜单右键菜单显示名称,如果为空显示键值名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strIcoPath&quot;&gt;</span>一级菜单右键菜单图片路径,如果为空则不显示图片<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;listSecondaryMenu&quot;&gt;</span>二级菜单配置<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">CreateDesktopRightClickMenu2</span>(<span class="params"><span class="built_in">string</span> strName, <span class="built_in">string</span> strDisplayName, <span class="built_in">string</span> strIcoPath, List&lt;SecondaryMenuModel&gt; listSecondaryMenu</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strName) || listSecondaryMenu.Count &lt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建一级菜单</span></span><br><span class="line">        RegistryKey registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(<span class="string">@&quot;Directory\Background\shell\&quot;</span> + strName, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            registryKey = Microsoft.Win32.Registry.ClassesRoot.CreateSubKey(<span class="string">@&quot;Directory\Background\shell\&quot;</span> + strName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strDisplayName))</span><br><span class="line">        &#123;</span><br><span class="line">            registryKey.SetValue(<span class="string">&quot;MUIVerb&quot;</span>, strDisplayName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strIcoPath) &amp;&amp; File.Exists(strIcoPath))</span><br><span class="line">        &#123;</span><br><span class="line">            registryKey.SetValue(<span class="string">&quot;icon&quot;</span>, strIcoPath);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> strSecondaryMenuName = <span class="built_in">string</span>.Empty;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> iSecondaryMenu = <span class="number">0</span>; iSecondaryMenu &lt; listSecondaryMenu.Count; iSecondaryMenu++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (iSecondaryMenu &lt; listSecondaryMenu.Count - <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                strSecondaryMenuName += listSecondaryMenu[iSecondaryMenu].strSecondaryMenuName;</span><br><span class="line">                strSecondaryMenuName += <span class="string">&#x27;;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                strSecondaryMenuName += listSecondaryMenu[iSecondaryMenu].strSecondaryMenuName;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strSecondaryMenuName))</span><br><span class="line">        &#123;</span><br><span class="line">            registryKey.SetValue(<span class="string">&quot;SubCommands&quot;</span>, strSecondaryMenuName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建二级菜单</span></span><br><span class="line">        <span class="keyword">foreach</span> (SecondaryMenuModel vSecondaryMenu <span class="keyword">in</span> listSecondaryMenu)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> strName2 = vSecondaryMenu.strSecondaryMenuName;</span><br><span class="line">            <span class="built_in">string</span> strDisplayName2 = vSecondaryMenu.strDisplayName;</span><br><span class="line">            <span class="built_in">string</span> strSoftwarePath2 = vSecondaryMenu.strSoftwarePath;</span><br><span class="line">            <span class="built_in">string</span> strIcoPath2 = vSecondaryMenu.strIcoPath;</span><br><span class="line">            registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, Environment.Is64BitOperatingSystem ? RegistryView.Registry64 : RegistryView.Registry32).OpenSubKey(<span class="string">@&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\&quot;</span> + strName2, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, Environment.Is64BitOperatingSystem ? RegistryView.Registry64 : RegistryView.Registry32).CreateSubKey(<span class="string">@&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\&quot;</span> + strName2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strDisplayName2))</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey.SetValue(<span class="string">&quot;&quot;</span>, strDisplayName2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strIcoPath) &amp;&amp; File.Exists(strIcoPath2))</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey.SetValue(<span class="string">&quot;icon&quot;</span>, strIcoPath2);</span><br><span class="line">            &#125;</span><br><span class="line">            registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, Environment.Is64BitOperatingSystem ? RegistryView.Registry64 : RegistryView.Registry32).OpenSubKey(<span class="string">@&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\&quot;</span> + strName2 + <span class="string">@&quot;\command&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, Environment.Is64BitOperatingSystem ? RegistryView.Registry64 : RegistryView.Registry32).CreateSubKey(<span class="string">@&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\&quot;</span> + strName2 + <span class="string">@&quot;\command&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            registryKey.SetValue(<span class="string">&quot;&quot;</span>, strSoftwarePath2);</span><br><span class="line">        &#125;</span><br><span class="line">        registryKey.Close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 删除注册表桌面右键菜单项(二级菜单只删除一级菜单)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strName&quot;&gt;</span>键值名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">DeleteDesktopRightClickMenu</span>(<span class="params"><span class="built_in">string</span> strName</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strName))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        RegistryKey registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(<span class="string">@&quot;Directory\Background\shell\&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        registryKey.DeleteSubKeyTree(strName);</span><br><span class="line">        registryKey.Close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span></span></span><br></pre></td></tr></table></figure>
<h6 id="文件夹右键菜单项"><a href="#文件夹右键菜单项" class="headerlink" title="文件夹右键菜单项"></a>文件夹右键菜单项</h6><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">region</span> 注册表文件夹右键菜单项</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 创建注册表文件夹右键菜单项</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strName&quot;&gt;</span>键值名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strDisplayName&quot;&gt;</span>右键菜单显示名称,如果为空显示键值名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strSoftwarePath&quot;&gt;</span>启动软件路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strIcoPath&quot;&gt;</span>右键菜单图片路径,如果为空则不显示图片<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">CreateFolderRightClickMenu</span>(<span class="params"><span class="built_in">string</span> strName, <span class="built_in">string</span> strDisplayName, <span class="built_in">string</span> strSoftwarePath, <span class="built_in">string</span> strIcoPath</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strName) || <span class="built_in">string</span>.IsNullOrEmpty(strSoftwarePath))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        RegistryKey registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(<span class="string">@&quot;Folder\shell\&quot;</span> + strName, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            registryKey = Microsoft.Win32.Registry.ClassesRoot.CreateSubKey(<span class="string">@&quot;Folder\shell\&quot;</span> + strName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strDisplayName))</span><br><span class="line">        &#123;</span><br><span class="line">            registryKey.SetValue(<span class="string">&quot;&quot;</span>, strDisplayName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strIcoPath) &amp;&amp; File.Exists(strIcoPath))</span><br><span class="line">        &#123;</span><br><span class="line">            registryKey.SetValue(<span class="string">&quot;icon&quot;</span>, strIcoPath);</span><br><span class="line">        &#125;</span><br><span class="line">        registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(<span class="string">@&quot;Folder\shell\&quot;</span> + strName + <span class="string">@&quot;\command&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            registryKey = Microsoft.Win32.Registry.ClassesRoot.CreateSubKey(<span class="string">@&quot;Folder\shell\&quot;</span> + strName + <span class="string">@&quot;\command&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        registryKey.SetValue(<span class="string">&quot;&quot;</span>, strSoftwarePath);</span><br><span class="line">        registryKey.Close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 创建注册表文件夹右键菜单项(二级菜单)(WIN7-X64下测试通过)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strName&quot;&gt;</span>一级菜单键值名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strDisplayName&quot;&gt;</span>一级菜单右键菜单显示名称,如果为空显示键值名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strIcoPath&quot;&gt;</span>一级菜单右键菜单图片路径,如果为空则不显示图片<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;listSecondaryMenu&quot;&gt;</span>二级菜单配置<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">CreateFolderRightClickMenu2</span>(<span class="params"><span class="built_in">string</span> strName, <span class="built_in">string</span> strDisplayName, <span class="built_in">string</span> strIcoPath, List&lt;SecondaryMenuModel&gt; listSecondaryMenu</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strName) || listSecondaryMenu.Count &lt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建一级菜单</span></span><br><span class="line">        RegistryKey registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(<span class="string">@&quot;Folder\shell\&quot;</span> + strName, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            registryKey = Microsoft.Win32.Registry.ClassesRoot.CreateSubKey(<span class="string">@&quot;Folder\shell\&quot;</span> + strName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strDisplayName))</span><br><span class="line">        &#123;</span><br><span class="line">            registryKey.SetValue(<span class="string">&quot;MUIVerb&quot;</span>, strDisplayName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strIcoPath) &amp;&amp; File.Exists(strIcoPath))</span><br><span class="line">        &#123;</span><br><span class="line">            registryKey.SetValue(<span class="string">&quot;icon&quot;</span>, strIcoPath);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> strSecondaryMenuName = <span class="built_in">string</span>.Empty;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> iSecondaryMenu = <span class="number">0</span>; iSecondaryMenu &lt; listSecondaryMenu.Count; iSecondaryMenu++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (iSecondaryMenu &lt; listSecondaryMenu.Count - <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                strSecondaryMenuName += listSecondaryMenu[iSecondaryMenu].strSecondaryMenuName;</span><br><span class="line">                strSecondaryMenuName += <span class="string">&#x27;;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                strSecondaryMenuName += listSecondaryMenu[iSecondaryMenu].strSecondaryMenuName;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strSecondaryMenuName))</span><br><span class="line">        &#123;</span><br><span class="line">            registryKey.SetValue(<span class="string">&quot;SubCommands&quot;</span>, strSecondaryMenuName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建二级菜单</span></span><br><span class="line">        <span class="keyword">foreach</span> (SecondaryMenuModel vSecondaryMenu <span class="keyword">in</span> listSecondaryMenu)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> strName2 = vSecondaryMenu.strSecondaryMenuName;</span><br><span class="line">            <span class="built_in">string</span> strDisplayName2 = vSecondaryMenu.strDisplayName;</span><br><span class="line">            <span class="built_in">string</span> strSoftwarePath2 = vSecondaryMenu.strSoftwarePath;</span><br><span class="line">            <span class="built_in">string</span> strIcoPath2 = vSecondaryMenu.strIcoPath;</span><br><span class="line">            registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, Environment.Is64BitOperatingSystem ? RegistryView.Registry64 : RegistryView.Registry32).OpenSubKey(<span class="string">@&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\&quot;</span> + strName2, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, Environment.Is64BitOperatingSystem ? RegistryView.Registry64 : RegistryView.Registry32).CreateSubKey(<span class="string">@&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\&quot;</span> + strName2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strDisplayName2))</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey.SetValue(<span class="string">&quot;&quot;</span>, strDisplayName2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strIcoPath) &amp;&amp; File.Exists(strIcoPath2))</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey.SetValue(<span class="string">&quot;icon&quot;</span>, strIcoPath2);</span><br><span class="line">            &#125;</span><br><span class="line">            registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, Environment.Is64BitOperatingSystem ? RegistryView.Registry64 : RegistryView.Registry32).OpenSubKey(<span class="string">@&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\&quot;</span> + strName2 + <span class="string">@&quot;\command&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, Environment.Is64BitOperatingSystem ? RegistryView.Registry64 : RegistryView.Registry32).CreateSubKey(<span class="string">@&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\&quot;</span> + strName2 + <span class="string">@&quot;\command&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            registryKey.SetValue(<span class="string">&quot;&quot;</span>, strSoftwarePath2);</span><br><span class="line">        &#125;</span><br><span class="line">        registryKey.Close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 删除注册表文件夹右键菜单项(二级菜单只删除一级菜单)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strName&quot;&gt;</span>键值名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">DeleteFolderRightClickMenu</span>(<span class="params"><span class="built_in">string</span> strName</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strName))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        RegistryKey registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(<span class="string">@&quot;Folder\shell\&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        registryKey.DeleteSubKeyTree(strName);</span><br><span class="line">        registryKey.Close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span></span></span><br></pre></td></tr></table></figure>
<h6 id="文件右键菜单项"><a href="#文件右键菜单项" class="headerlink" title="文件右键菜单项"></a>文件右键菜单项</h6><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">region</span> 注册表文件右键菜单项</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 创建注册表文件右键菜单项</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strName&quot;&gt;</span>键值名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strDisplayName&quot;&gt;</span>右键菜单显示名称,如果为空显示键值名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strSoftwarePath&quot;&gt;</span>启动软件路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strIcoPath&quot;&gt;</span>右键菜单图片路径,如果为空则不显示图片<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">CreateFileRightClickMenu</span>(<span class="params"><span class="built_in">string</span> strName, <span class="built_in">string</span> strDisplayName, <span class="built_in">string</span> strSoftwarePath, <span class="built_in">string</span> strIcoPath</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strName) || <span class="built_in">string</span>.IsNullOrEmpty(strSoftwarePath))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        RegistryKey registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(<span class="string">@&quot;*\shell\&quot;</span> + strName, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            registryKey = Microsoft.Win32.Registry.ClassesRoot.CreateSubKey(<span class="string">@&quot;*\shell\&quot;</span> + strName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strDisplayName))</span><br><span class="line">        &#123;</span><br><span class="line">            registryKey.SetValue(<span class="string">&quot;&quot;</span>, strDisplayName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strIcoPath) &amp;&amp; File.Exists(strIcoPath))</span><br><span class="line">        &#123;</span><br><span class="line">            registryKey.SetValue(<span class="string">&quot;icon&quot;</span>, strIcoPath);</span><br><span class="line">        &#125;</span><br><span class="line">        registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(<span class="string">@&quot;*\shell\&quot;</span> + strName + <span class="string">@&quot;\command&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            registryKey = Microsoft.Win32.Registry.ClassesRoot.CreateSubKey(<span class="string">@&quot;*\shell\&quot;</span> + strName + <span class="string">@&quot;\command&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        registryKey.SetValue(<span class="string">&quot;&quot;</span>, strSoftwarePath);</span><br><span class="line">        registryKey.Close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 创建注册表文件右键菜单项(二级菜单)(WIN7-X64下测试通过)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strName&quot;&gt;</span>一级菜单键值名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strDisplayName&quot;&gt;</span>一级菜单右键菜单显示名称,如果为空显示键值名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strIcoPath&quot;&gt;</span>一级菜单右键菜单图片路径,如果为空则不显示图片<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;listSecondaryMenu&quot;&gt;</span>二级菜单配置<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">CreateFileRightClickMenu2</span>(<span class="params"><span class="built_in">string</span> strName, <span class="built_in">string</span> strDisplayName, <span class="built_in">string</span> strIcoPath, List&lt;SecondaryMenuModel&gt; listSecondaryMenu</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strName) || listSecondaryMenu.Count &lt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建一级菜单</span></span><br><span class="line">        RegistryKey registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(<span class="string">@&quot;*\shell\&quot;</span> + strName, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            registryKey = Microsoft.Win32.Registry.ClassesRoot.CreateSubKey(<span class="string">@&quot;*\shell\&quot;</span> + strName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strDisplayName))</span><br><span class="line">        &#123;</span><br><span class="line">            registryKey.SetValue(<span class="string">&quot;MUIVerb&quot;</span>, strDisplayName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strIcoPath) &amp;&amp; File.Exists(strIcoPath))</span><br><span class="line">        &#123;</span><br><span class="line">            registryKey.SetValue(<span class="string">&quot;icon&quot;</span>, strIcoPath);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> strSecondaryMenuName = <span class="built_in">string</span>.Empty;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> iSecondaryMenu = <span class="number">0</span>; iSecondaryMenu &lt; listSecondaryMenu.Count; iSecondaryMenu++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (iSecondaryMenu &lt; listSecondaryMenu.Count - <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                strSecondaryMenuName += listSecondaryMenu[iSecondaryMenu].strSecondaryMenuName;</span><br><span class="line">                strSecondaryMenuName += <span class="string">&#x27;;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                strSecondaryMenuName += listSecondaryMenu[iSecondaryMenu].strSecondaryMenuName;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strSecondaryMenuName))</span><br><span class="line">        &#123;</span><br><span class="line">            registryKey.SetValue(<span class="string">&quot;SubCommands&quot;</span>, strSecondaryMenuName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建二级菜单</span></span><br><span class="line">        <span class="keyword">foreach</span> (SecondaryMenuModel vSecondaryMenu <span class="keyword">in</span> listSecondaryMenu)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> strName2 = vSecondaryMenu.strSecondaryMenuName;</span><br><span class="line">            <span class="built_in">string</span> strDisplayName2 = vSecondaryMenu.strDisplayName;</span><br><span class="line">            <span class="built_in">string</span> strSoftwarePath2 = vSecondaryMenu.strSoftwarePath;</span><br><span class="line">            <span class="built_in">string</span> strIcoPath2 = vSecondaryMenu.strIcoPath;</span><br><span class="line">            registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, Environment.Is64BitOperatingSystem ? RegistryView.Registry64 : RegistryView.Registry32).OpenSubKey(<span class="string">@&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\&quot;</span> + strName2, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, Environment.Is64BitOperatingSystem ? RegistryView.Registry64 : RegistryView.Registry32).CreateSubKey(<span class="string">@&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\&quot;</span> + strName2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strDisplayName2))</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey.SetValue(<span class="string">&quot;&quot;</span>, strDisplayName2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strIcoPath) &amp;&amp; File.Exists(strIcoPath2))</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey.SetValue(<span class="string">&quot;icon&quot;</span>, strIcoPath2);</span><br><span class="line">            &#125;</span><br><span class="line">            registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, Environment.Is64BitOperatingSystem ? RegistryView.Registry64 : RegistryView.Registry32).OpenSubKey(<span class="string">@&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\&quot;</span> + strName2 + <span class="string">@&quot;\command&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, Environment.Is64BitOperatingSystem ? RegistryView.Registry64 : RegistryView.Registry32).CreateSubKey(<span class="string">@&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\&quot;</span> + strName2 + <span class="string">@&quot;\command&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            registryKey.SetValue(<span class="string">&quot;&quot;</span>, strSoftwarePath2);</span><br><span class="line">        &#125;</span><br><span class="line">        registryKey.Close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 删除注册表文件右键菜单项(二级菜单只删除一级菜单)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strName&quot;&gt;</span>键值名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">DeleteFileRightClickMenu</span>(<span class="params"><span class="built_in">string</span> strName</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strName))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        RegistryKey registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(<span class="string">@&quot;*\shell\&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        registryKey.DeleteSubKeyTree(strName);</span><br><span class="line">        registryKey.Close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span></span></span><br></pre></td></tr></table></figure>
<h6 id="特定文件右键菜单项"><a href="#特定文件右键菜单项" class="headerlink" title="特定文件右键菜单项"></a>特定文件右键菜单项</h6><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">region</span> 注册表特定文件右键菜单项</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 创建注册表特定文件右键菜单项</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strFileType&quot;&gt;</span>特定文件类型(例:.txt|.exe)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strName&quot;&gt;</span>键值名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strDisplayName&quot;&gt;</span>右键菜单显示名称,如果为空显示键值名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strSoftwarePath&quot;&gt;</span>启动软件路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strIcoPath&quot;&gt;</span>右键菜单图片路径,如果为空则不显示图片<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">CreateSpecificFileRightClickMenu</span>(<span class="params"><span class="built_in">string</span> strFileType, <span class="built_in">string</span> strName, <span class="built_in">string</span> strDisplayName, <span class="built_in">string</span> strSoftwarePath, <span class="built_in">string</span> strIcoPath</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strFileType) || <span class="built_in">string</span>.IsNullOrEmpty(strName) || <span class="built_in">string</span>.IsNullOrEmpty(strSoftwarePath))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        RegistryKey registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(strFileType, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            registryKey = Microsoft.Win32.Registry.ClassesRoot.CreateSubKey(strFileType);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取(默认)中的数据</span></span><br><span class="line">        <span class="built_in">string</span> strDefault = registryKey.ValueCount &gt;= <span class="number">1</span> ? registryKey.GetValue(<span class="string">&quot;&quot;</span>).ToString() : <span class="built_in">string</span>.Empty;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strDefault))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果该后缀名里(默认)没有值,则创建shell写入菜单功能</span></span><br><span class="line">            registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(strFileType + <span class="string">@&quot;\shell\&quot;</span> + strName, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey = Microsoft.Win32.Registry.ClassesRoot.CreateSubKey(strFileType + <span class="string">@&quot;\shell\&quot;</span> + strName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strDisplayName))</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey.SetValue(<span class="string">&quot;&quot;</span>, strDisplayName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strIcoPath) &amp;&amp; File.Exists(strIcoPath))</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey.SetValue(<span class="string">&quot;icon&quot;</span>, strIcoPath);</span><br><span class="line">            &#125;</span><br><span class="line">            registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(strFileType + <span class="string">@&quot;\shell\&quot;</span> + strName + <span class="string">@&quot;\command&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey = Microsoft.Win32.Registry.ClassesRoot.CreateSubKey(strFileType + <span class="string">@&quot;\shell\&quot;</span> + strName + <span class="string">@&quot;\command&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            registryKey.SetValue(<span class="string">&quot;&quot;</span>, strSoftwarePath);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果该后缀名里(默认)存在值,读取值所在的路径创建shell写入菜单功能</span></span><br><span class="line">            registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(strDefault + <span class="string">@&quot;\shell\&quot;</span> + strName, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey = Microsoft.Win32.Registry.ClassesRoot.CreateSubKey(strDefault + <span class="string">@&quot;\shell\&quot;</span> + strName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strDisplayName))</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey.SetValue(<span class="string">&quot;&quot;</span>, strDisplayName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strIcoPath) &amp;&amp; File.Exists(strIcoPath))</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey.SetValue(<span class="string">&quot;icon&quot;</span>, strIcoPath);</span><br><span class="line">            &#125;</span><br><span class="line">            registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(strDefault + <span class="string">@&quot;\shell\&quot;</span> + strName + <span class="string">@&quot;\command&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey = Microsoft.Win32.Registry.ClassesRoot.CreateSubKey(strDefault + <span class="string">@&quot;\shell\&quot;</span> + strName + <span class="string">@&quot;\command&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            registryKey.SetValue(<span class="string">&quot;&quot;</span>, strSoftwarePath);</span><br><span class="line">        &#125;</span><br><span class="line">        registryKey.Close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 创建注册表特定文件右键菜单项(二级菜单)(WIN7-X64下测试通过)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strFileType&quot;&gt;</span>特定文件类型(例:.txt|.exe)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strName&quot;&gt;</span>一级菜单键值名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strDisplayName&quot;&gt;</span>一级菜单右键菜单显示名称,如果为空显示键值名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strIcoPath&quot;&gt;</span>一级菜单右键菜单图片路径,如果为空则不显示图片<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;listSecondaryMenu&quot;&gt;</span>二级菜单配置<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">CreateSpecificFileRightClickMenu2</span>(<span class="params"><span class="built_in">string</span> strFileType, <span class="built_in">string</span> strName, <span class="built_in">string</span> strDisplayName, <span class="built_in">string</span> strIcoPath, List&lt;SecondaryMenuModel&gt; listSecondaryMenu</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strFileType) || <span class="built_in">string</span>.IsNullOrEmpty(strName) || listSecondaryMenu.Count &lt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建一级菜单</span></span><br><span class="line">        RegistryKey registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(strFileType, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            registryKey = Microsoft.Win32.Registry.ClassesRoot.CreateSubKey(strFileType);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取(默认)中的数据</span></span><br><span class="line">        <span class="built_in">string</span> strDefault = registryKey.ValueCount &gt;= <span class="number">1</span> ? registryKey.GetValue(<span class="string">&quot;&quot;</span>).ToString() : <span class="built_in">string</span>.Empty;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strDefault))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果该后缀名里(默认)没有值,则创建shell写入菜单功能</span></span><br><span class="line">            registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(strFileType + <span class="string">@&quot;\shell\\&quot;</span> + strName, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey = Microsoft.Win32.Registry.ClassesRoot.CreateSubKey(strFileType + <span class="string">@&quot;\shell\\&quot;</span> + strName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strDisplayName))</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey.SetValue(<span class="string">&quot;MUIVerb&quot;</span>, strDisplayName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strIcoPath) &amp;&amp; File.Exists(strIcoPath))</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey.SetValue(<span class="string">&quot;icon&quot;</span>, strIcoPath);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">string</span> strSecondaryMenuName = <span class="built_in">string</span>.Empty;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> iSecondaryMenu = <span class="number">0</span>; iSecondaryMenu &lt; listSecondaryMenu.Count; iSecondaryMenu++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (iSecondaryMenu &lt; listSecondaryMenu.Count - <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    strSecondaryMenuName += listSecondaryMenu[iSecondaryMenu].strSecondaryMenuName;</span><br><span class="line">                    strSecondaryMenuName += <span class="string">&#x27;;&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    strSecondaryMenuName += listSecondaryMenu[iSecondaryMenu].strSecondaryMenuName;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strSecondaryMenuName))</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey.SetValue(<span class="string">&quot;SubCommands&quot;</span>, strSecondaryMenuName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果该后缀名里(默认)存在值,读取值所在的路径创建shell写入菜单功能</span></span><br><span class="line">            registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(strDefault + <span class="string">@&quot;\shell\\&quot;</span> + strName, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey = Microsoft.Win32.Registry.ClassesRoot.CreateSubKey(strDefault + <span class="string">@&quot;\shell\\&quot;</span> + strName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strDisplayName))</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey.SetValue(<span class="string">&quot;MUIVerb&quot;</span>, strDisplayName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strIcoPath) &amp;&amp; File.Exists(strIcoPath))</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey.SetValue(<span class="string">&quot;icon&quot;</span>, strIcoPath);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">string</span> strSecondaryMenuName = <span class="built_in">string</span>.Empty;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> iSecondaryMenu = <span class="number">0</span>; iSecondaryMenu &lt; listSecondaryMenu.Count; iSecondaryMenu++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (iSecondaryMenu &lt; listSecondaryMenu.Count - <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    strSecondaryMenuName += listSecondaryMenu[iSecondaryMenu].strSecondaryMenuName;</span><br><span class="line">                    strSecondaryMenuName += <span class="string">&#x27;;&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    strSecondaryMenuName += listSecondaryMenu[iSecondaryMenu].strSecondaryMenuName;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strSecondaryMenuName))</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey.SetValue(<span class="string">&quot;SubCommands&quot;</span>, strSecondaryMenuName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建二级菜单</span></span><br><span class="line">        <span class="keyword">foreach</span> (SecondaryMenuModel vSecondaryMenu <span class="keyword">in</span> listSecondaryMenu)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> strName2 = vSecondaryMenu.strSecondaryMenuName;</span><br><span class="line">            <span class="built_in">string</span> strDisplayName2 = vSecondaryMenu.strDisplayName;</span><br><span class="line">            <span class="built_in">string</span> strSoftwarePath2 = vSecondaryMenu.strSoftwarePath;</span><br><span class="line">            <span class="built_in">string</span> strIcoPath2 = vSecondaryMenu.strIcoPath;</span><br><span class="line">            registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, Environment.Is64BitOperatingSystem ? RegistryView.Registry64 : RegistryView.Registry32).OpenSubKey(<span class="string">@&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\&quot;</span> + strName2, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, Environment.Is64BitOperatingSystem ? RegistryView.Registry64 : RegistryView.Registry32).CreateSubKey(<span class="string">@&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\&quot;</span> + strName2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strDisplayName2))</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey.SetValue(<span class="string">&quot;&quot;</span>, strDisplayName2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strIcoPath) &amp;&amp; File.Exists(strIcoPath2))</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey.SetValue(<span class="string">&quot;icon&quot;</span>, strIcoPath2);</span><br><span class="line">            &#125;</span><br><span class="line">            registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, Environment.Is64BitOperatingSystem ? RegistryView.Registry64 : RegistryView.Registry32).OpenSubKey(<span class="string">@&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\&quot;</span> + strName2 + <span class="string">@&quot;\command&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, Environment.Is64BitOperatingSystem ? RegistryView.Registry64 : RegistryView.Registry32).CreateSubKey(<span class="string">@&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\&quot;</span> + strName2 + <span class="string">@&quot;\command&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            registryKey.SetValue(<span class="string">&quot;&quot;</span>, strSoftwarePath2);</span><br><span class="line">        &#125;</span><br><span class="line">        registryKey.Close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 删除注册表特定文件右键菜单项(二级菜单只删除一级菜单)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strFileType&quot;&gt;</span>特定文件类型(例:.txt|.exe)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strName&quot;&gt;</span>键值名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">DeleteSpecificFileRightClickMenu</span>(<span class="params"><span class="built_in">string</span> strFileType, <span class="built_in">string</span> strName</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strFileType) || <span class="built_in">string</span>.IsNullOrEmpty(strName))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        RegistryKey registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(strFileType, <span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//获取(默认)中的数据</span></span><br><span class="line">        <span class="built_in">string</span> strDefault = registryKey.ValueCount &gt;= <span class="number">1</span> ? registryKey.GetValue(<span class="string">&quot;&quot;</span>).ToString() : <span class="built_in">string</span>.Empty;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strDefault))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果该后缀名里(默认)没有值,则创建shell写入菜单功能</span></span><br><span class="line">            registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(strFileType + <span class="string">@&quot;\shell\&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            registryKey.DeleteSubKeyTree(strName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果该后缀名里(默认)存在值,读取值所在的路径创建shell写入菜单功能</span></span><br><span class="line">            registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(strDefault + <span class="string">@&quot;\shell\&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            registryKey.DeleteSubKeyTree(strName);</span><br><span class="line">        &#125;</span><br><span class="line">        registryKey.Close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span></span></span><br></pre></td></tr></table></figure>
<h5 id="设置系统特定文件后缀默认图标"><a href="#设置系统特定文件后缀默认图标" class="headerlink" title="设置系统特定文件后缀默认图标"></a>设置系统特定文件后缀默认图标</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">region</span> Registry Default Icon</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 修改特定后缀文件默认图标(需重启电脑)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strFileType&quot;&gt;</span>特定文件类型(例:.txt|.exe)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strIcoPath&quot;&gt;</span>替换图片路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">ModifyDefaultIcon</span>(<span class="params"><span class="built_in">string</span> strFileType, <span class="built_in">string</span> strIcoPath</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strFileType) || <span class="built_in">string</span>.IsNullOrEmpty(strIcoPath) || !File.Exists(strIcoPath))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        RegistryKey registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(strFileType, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            registryKey = Microsoft.Win32.Registry.ClassesRoot.CreateSubKey(strFileType);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取(默认)中的数据</span></span><br><span class="line">        <span class="built_in">string</span> strDefault = registryKey.ValueCount &gt;= <span class="number">1</span> ? registryKey.GetValue(<span class="string">&quot;&quot;</span>).ToString() : <span class="built_in">string</span>.Empty;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strDefault))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果该后缀名里(默认)没有值,则创建shell写入菜单功能</span></span><br><span class="line">            registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(strFileType + <span class="string">@&quot;\DefaultIcon\&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey = Microsoft.Win32.Registry.ClassesRoot.CreateSubKey(strFileType + <span class="string">@&quot;\DefaultIcon\&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strIcoPath))</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey.SetValue(<span class="string">&quot;&quot;</span>, strIcoPath);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果该后缀名里(默认)存在值,读取值所在的路径创建shell写入菜单功能</span></span><br><span class="line">            registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(strDefault + <span class="string">@&quot;\DefaultIcon\&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey = Microsoft.Win32.Registry.ClassesRoot.CreateSubKey(strDefault + <span class="string">@&quot;\DefaultIcon\&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strIcoPath))</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey.SetValue(<span class="string">&quot;&quot;</span>, strIcoPath);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        registryKey.Close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span></span></span><br></pre></td></tr></table></figure>
<h5 id="设置系统特定后缀文件默认程序"><a href="#设置系统特定后缀文件默认程序" class="headerlink" title="设置系统特定后缀文件默认程序"></a>设置系统特定后缀文件默认程序</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">region</span> Registry Default Programs</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 修改特定后缀文件默认程序</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strFileType&quot;&gt;</span>特定文件类型(例:.txt|.exe)<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strSoftwarePath&quot;&gt;</span>替换程序路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">ModifyDefaultPrograms</span>(<span class="params"><span class="built_in">string</span> strFileType, <span class="built_in">string</span> strSoftwarePath</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strFileType) || <span class="built_in">string</span>.IsNullOrEmpty(strSoftwarePath))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        RegistryKey registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(strFileType, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            registryKey = Microsoft.Win32.Registry.ClassesRoot.CreateSubKey(strFileType);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取(默认)中的数据</span></span><br><span class="line">        <span class="built_in">string</span> strDefault = registryKey.ValueCount &gt;= <span class="number">1</span> ? registryKey.GetValue(<span class="string">&quot;&quot;</span>).ToString() : <span class="built_in">string</span>.Empty;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strDefault))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果该后缀名里(默认)没有值,则创建shell写入菜单功能</span></span><br><span class="line">            registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(strFileType + <span class="string">@&quot;\shell\open\command\&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey = Microsoft.Win32.Registry.ClassesRoot.CreateSubKey(strFileType + <span class="string">@&quot;\shell\open\command\&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strSoftwarePath))</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey.SetValue(<span class="string">&quot;&quot;</span>, strSoftwarePath);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果该后缀名里(默认)存在值,读取值所在的路径创建shell写入菜单功能</span></span><br><span class="line">            registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(strDefault + <span class="string">@&quot;\shell\open\command\&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey = Microsoft.Win32.Registry.ClassesRoot.CreateSubKey(strDefault + <span class="string">@&quot;\shell\open\command\&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(strSoftwarePath))</span><br><span class="line">            &#123;</span><br><span class="line">                registryKey.SetValue(<span class="string">&quot;&quot;</span>, strSoftwarePath);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        registryKey.Close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span></span></span><br></pre></td></tr></table></figure>
<h5 id="创建-URL-Protocol-协议-通过网页打开本地应用"><a href="#创建-URL-Protocol-协议-通过网页打开本地应用" class="headerlink" title="创建 URL Protocol 协议,通过网页打开本地应用"></a>创建 URL Protocol 协议,通过网页打开本地应用</h5><p>由于公司业务需求，制作<a href="https://baike.baidu.com/item/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/4940767?fr=aladdin">单点登录</a>功能，该方法作为比较常见的一种，安装C/S端软件时写入注册表，B/S程序通过A标签即可打开C/S端程序并且自动登录B/S的用户名密码。<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">region</span> Registry URL Protocol</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 创建 URL Protocol 协议,通过网页打开本地应用</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strName&quot;&gt;</span>键值名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strSoftwarePath&quot;&gt;</span>启动软件路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">CreateURLProtocol</span>(<span class="params"><span class="built_in">string</span> strName, <span class="built_in">string</span> strSoftwarePath</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strName) || <span class="built_in">string</span>.IsNullOrEmpty(strSoftwarePath))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Web端调用方法:&lt;a href=&quot;strName://&quot;%1&quot;参数&gt;URL Protocol&lt;/a&gt;</span></span><br><span class="line">        RegistryKey registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(strName + <span class="string">@&quot;\shell\open\command&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            registryKey = Microsoft.Win32.Registry.ClassesRoot.CreateSubKey(strName + <span class="string">@&quot;\shell\open\command&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        registryKey.SetValue(<span class="string">&quot;&quot;</span>, strSoftwarePath);</span><br><span class="line">        registryKey.Close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 删除 URL Protocol 协议</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;strName&quot;&gt;</span>键值名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>成功返回true,失败返回false<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">DeleteURLProtocol</span>(<span class="params"><span class="built_in">string</span> strName</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(strName))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        RegistryKey registryKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(strName, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (registryKey == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            registryKey = Microsoft.Win32.Registry.ClassesRoot;</span><br><span class="line">            registryKey.DeleteSubKeyTree(strName);</span><br><span class="line">        &#125;</span><br><span class="line">        registryKey.Close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        TXTHelper.Logs(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span></span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>C#.Net</category>
      </categories>
      <tags>
        <tag>c#</tag>
        <tag>helper</tag>
        <tag>windows</tag>
        <tag>registry</tag>
      </tags>
  </entry>
</search>
